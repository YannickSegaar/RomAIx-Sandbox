const SVG_Thumb = `<svg width="24px" height="24px" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.29398 20.4966C4.56534 20.4966 4 19.8827 4 19.1539V12.3847C4 11.6559 4.56534 11.042 5.29398 11.042H8.12364L10.8534 4.92738C10.9558 4.69809 11.1677 4.54023 11.4114 4.50434L11.5175 4.49658C12.3273 4.49658 13.0978 4.85402 13.6571 5.48039C14.2015 6.09009 14.5034 6.90649 14.5034 7.7535L14.5027 8.92295L18.1434 8.92346C18.6445 8.92346 19.1173 9.13931 19.4618 9.51188L19.5612 9.62829C19.8955 10.0523 20.0479 10.6054 19.9868 11.1531L19.1398 18.742C19.0297 19.7286 18.2529 20.4966 17.2964 20.4966H8.69422H5.29398ZM11.9545 6.02658L9.41727 11.7111L9.42149 11.7693L9.42091 19.042H17.2964C17.4587 19.042 17.6222 18.8982 17.6784 18.6701L17.6942 18.5807L18.5412 10.9918C18.5604 10.8194 18.5134 10.6486 18.4189 10.5287C18.3398 10.4284 18.2401 10.378 18.1434 10.378H13.7761C13.3745 10.378 13.0488 10.0524 13.0488 9.65073V7.7535C13.0488 7.2587 12.8749 6.78825 12.5721 6.44915C12.4281 6.28794 12.2615 6.16343 12.0824 6.07923L11.9545 6.02658ZM7.96636 12.4966H5.45455V19.042H7.96636V12.4966Z" fill="white"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M5.29398 20.4966C4.56534 20.4966 4 19.8827 4 19.1539V12.3847C4 11.6559 4.56534 11.042 5.29398 11.042H8.12364L10.8534 4.92738C10.9558 4.69809 11.1677 4.54023 11.4114 4.50434L11.5175 4.49658C12.3273 4.49658 13.0978 4.85402 13.6571 5.48039C14.2015 6.09009 14.5034 6.90649 14.5034 7.7535L14.5027 8.92295L18.1434 8.92346C18.6445 8.92346 19.1173 9.13931 19.4618 9.51188L19.5612 9.62829C19.8955 10.0523 20.0479 10.6054 19.9868 11.1531L19.1398 18.742C19.0297 19.7286 18.2529 20.4966 17.2964 20.4966H8.69422H5.29398ZM11.9545 6.02658L9.41727 11.7111L9.42149 11.7693L9.42091 19.042H17.2964C17.4587 19.042 17.6222 18.8982 17.6784 18.6701L17.6942 18.5807L18.5412 10.9918C18.5604 10.8194 18.5134 10.6486 18.4189 10.5287C18.3398 10.4284 18.2401 10.378 18.1434 10.378H13.7761C13.3745 10.378 13.0488 10.0524 13.0488 9.65073V7.7535C13.0488 7.2587 12.8749 6.78825 12.5721 6.44915C12.4281 6.28794 12.2615 6.16343 12.0824 6.07923L11.9545 6.02658ZM7.96636 12.4966H5.45455V19.042H7.96636V12.4966Z" fill="currentColor"></path></svg>`

export const FormExtension = {
  name: 'Forms',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_form' || trace.payload?.name === 'ext_form',
  render: ({ trace, element }) => {
    const formContainer = document.createElement('form')

    formContainer.innerHTML = `
          <style>
            label {
              font-size: 0.8em;
              color: #888;
            }
            input[type="text"], input[type="email"], input[type="tel"], select, textarea {
              width: 100%;
              border: none;
              border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);
              background: transparent;
              margin: 5px 0;
              outline: none;
            }
            .phone {
              width: 150px;
            }
            .invalid {
              border-color: red;
            }
            .submit {
              background: linear-gradient(to right, #2e6ee1, #2e7ff1 );
              border: none;
              color: white;
              padding: 10px;
              border-radius: 5px;
              width: 100%;
              cursor: pointer;
            }
          </style>

          <label for="subject">Subject</label>
          <select class="subject" name="subject" required>
            <option value="" disabled selected></option>
            <option value="Tour Inquiries">Tour Inquiries</option>
            <option value="Booking Assistance">Booking Assistance</option>
            <option value="Special Requests">Special Requests</option>
            <option value="Feedback and Complaints">Feedback and Complaints</option>
          </select><br><br>

          <label for="name">Name</label>
          <input type="text" class="name" name="name" required><br><br>

          <label for="email">Email</label>
          <input type="email" class="email" name="email" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$" title="Invalid email address"><br><br>

          <label for="phone">Phone Number</label>
          <input type="tel" class="phone" name="phone" required pattern="^\+?[0-9\s\-]*$" title="Invalid phone number, please enter only numbers"><br><br>

          <label for="notes">Notes</label>
          <textarea class="notes" name="notes"></textarea><br><br>

          <input type="submit" class="submit" value="Submit">
        `

    formContainer.addEventListener('submit', function (event) {
      event.preventDefault()

      const subject = formContainer.querySelector('.subject')
      const name = formContainer.querySelector('.name')
      const email = formContainer.querySelector('.email')
      const phone = formContainer.querySelector('.phone')
      const notes = formContainer.querySelector('.notes')

      if (
        !subject.checkValidity() ||
        !name.checkValidity() ||
        !email.checkValidity() ||
        !phone.checkValidity()
      ) {
        subject.classList.add('invalid')
        name.classList.add('invalid')
        email.classList.add('invalid')
        phone.classList.add('invalid')
        return
      }

      formContainer.querySelector('.submit').remove()

      window.voiceflow.chat.interact({
        type: 'complete',
        payload: {
          subject: subject.value,
          name: name.value,
          email: email.value,
          phone: phone.value,
          notes: notes.value
        },
      })
    })

    element.appendChild(formContainer)
  },
}

  
  

export const MapExtension = {
  name: 'Maps',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_map' || trace.payload?.name === 'ext_map',
  render: ({ trace, element }) => {
    const GoogleMap = document.createElement('iframe')
    const { apiKey, origin, destination, zoom, height, width } = trace.payload

    GoogleMap.width = width || '240'
    GoogleMap.height = height || '240'
    GoogleMap.style.border = '0'
    GoogleMap.loading = 'lazy'
    GoogleMap.allowFullscreen = true
    GoogleMap.src = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&zoom=${zoom}`

    element.appendChild(GoogleMap)
  },
}

export const VideoExtension = {
  name: 'Video',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_video' || trace.payload?.name === 'ext_video',
  render: ({ trace, element }) => {
    const videoElement = document.createElement('video')
    const { videoURL, autoplay, controls } = trace.payload

    videoElement.width = 250
    videoElement.height = 200
    videoElement.src = videoURL

    if (autoplay) {
      videoElement.setAttribute('autoplay', '')
    }
    if (controls) {
      videoElement.setAttribute('controls', '')
    }

    videoElement.addEventListener('ended', function () {
      window.voiceflow.chat.interact({ type: 'complete' })
    })
    element.appendChild(videoElement)
  },
}

export const TimerExtension = {
  name: 'Timer',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_timer' || trace.payload?.name === 'ext_timer',
  render: ({ trace, element }) => {
    const { duration } = trace.payload || 5
    let timeLeft = duration

    const timerContainer = document.createElement('div')
    timerContainer.innerHTML = `<p>Time left: <span id="time">${timeLeft}</span></p>`

    const countdown = setInterval(() => {
      if (timeLeft <= 0) {
        clearInterval(countdown)
        window.voiceflow.chat.interact({ type: 'complete' })
      } else {
        timeLeft -= 1
        timerContainer.querySelector('#time').textContent = timeLeft
      }
    }, 1000)

    element.appendChild(timerContainer)
  },
}

export const FileUploadExtension = {
  name: 'FileUpload',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_fileUpload' || trace.payload?.name === 'ext_fileUpload',
  render: ({ trace, element }) => {
    const fileUploadContainer = document.createElement('div')
    fileUploadContainer.innerHTML = `
      <style>
        .my-file-upload {
          border: 2px dashed rgba(46, 110, 225, 0.3);
          padding: 20px;
          text-align: center;
          cursor: pointer;
        }
      </style>
      <div class='my-file-upload'>Drag and drop a file here or click to upload</div>
      <input type='file' style='display: none;'>
    `

    const fileInput = fileUploadContainer.querySelector('input[type=file]')
    const fileUploadBox = fileUploadContainer.querySelector('.my-file-upload')

    fileUploadBox.addEventListener('click', function () {
      fileInput.click()
    })

    fileInput.addEventListener('change', function () {
      const file = fileInput.files[0]
      console.log('File selected:', file)

      fileUploadContainer.innerHTML = `<img src="https://s3.amazonaws.com/com.voiceflow.studio/share/upload/upload.gif" alt="Upload" width="50" height="50">`

      var data = new FormData()
      data.append('file', file)

      fetch('https://tmpfiles.org/api/v1/upload', {
        method: 'POST',
        body: data,
      })
        .then((response) => {
          if (response.ok) {
            return response.json()
          } else {
            throw new Error('Upload failed: ' + response.statusText)
          }
        })
        .then((result) => {
          fileUploadContainer.innerHTML =
            '<img src="https://s3.amazonaws.com/com.voiceflow.studio/share/check/check.gif" alt="Done" width="50" height="50">'
          console.log('File uploaded:', result.data.url)
          window.voiceflow.chat.interact({
            type: 'complete',
            payload: {
              file: result.data.url.replace(
                'https://tmpfiles.org/',
                'https://tmpfiles.org/dl/'
              ),
            },
          })
        })
        .catch((error) => {
          console.error(error)
          fileUploadContainer.innerHTML = '<div>Error during upload</div>'
        })
    })

    element.appendChild(fileUploadContainer)
  },
}

export const KBUploadExtension = {
  name: 'KBUpload',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_KBUpload' || trace.payload?.name === 'ext_KBUpload',
  render: ({ trace, element }) => {
    const apiKey = trace.payload.apiKey || null
    const maxChunkSize = trace.payload.maxChunkSize || 1000
    const tags = `tags=${JSON.stringify(trace.payload.tags)}&` || ''
    const overwrite = trace.payload.overwrite || false

    if (apiKey) {
      const kbfileUploadContainer = document.createElement('div')
      kbfileUploadContainer.innerHTML = `
      <style>
        .my-file-upload {
          border: 2px dashed rgba(46, 110, 225, 0.3);
          padding: 20px;
          text-align: center;
          cursor: pointer;
        }
      </style>
      <div class='my-file-upload'>Drag and drop a file here or click to upload</div>
      <input type='file' accept='.txt,.text,.pdf,.docx' style='display: none;'>
    `

      const fileInput = kbfileUploadContainer.querySelector('input[type=file]')
      const fileUploadBox =
        kbfileUploadContainer.querySelector('.my-file-upload')

      fileUploadBox.addEventListener('click', function () {
        fileInput.click()
      })

      fileInput.addEventListener('change', function () {
        const file = fileInput.files[0]

        kbfileUploadContainer.innerHTML = `<img src="https://s3.amazonaws.com/com.voiceflow.studio/share/upload/upload.gif" alt="Upload" width="50" height="50">`

        const formData = new FormData()
        formData.append('file', file)

        fetch(
          `https://api.voiceflow.com/v3alpha/knowledge-base/docs/upload?${tags}overwrite=${overwrite}&maxChunkSize=${maxChunkSize}`,
          {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              Authorization: apiKey,
            },
            body: formData,
          }
        )
          .then((response) => {
            if (response.ok) {
              return response.json()
            } else {
              throw new Error('Upload failed: ' + response.statusText)
              window.voiceflow.chat.interact({
                type: 'error',
                payload: {
                  id: 0,
                },
              })
            }
          })
          .then((result) => {
            kbfileUploadContainer.innerHTML =
              '<img src="https://s3.amazonaws.com/com.voiceflow.studio/share/check/check.gif" alt="Done" width="50" height="50">'
            window.voiceflow.chat.interact({
              type: 'complete',
              payload: {
                id: result.data.documentID || 0,
              },
            })
          })
          .catch((error) => {
            console.error(error)
            kbfileUploadContainer.innerHTML = '<div>Error during upload</div>'
          })
      })
      element.appendChild(kbfileUploadContainer)
    }
  },
}

export const DateExtension = {
  name: 'Date',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_date' || trace.payload?.name === 'ext_date',
  render: ({ trace, element }) => {
    const formContainer = document.createElement('form')

    // Get current date and time
    let currentDate = new Date()
    let minDate = new Date()
    minDate.setMonth(currentDate.getMonth() - 1)
    let maxDate = new Date()
    maxDate.setMonth(currentDate.getMonth() + 2)

    // Convert to ISO string and remove seconds and milliseconds
    let minDateString = minDate.toISOString().slice(0, 16)
    let maxDateString = maxDate.toISOString().slice(0, 16)

    formContainer.innerHTML = `
          <style>
            label {
              font-size: 0.8em;
              color: #888;
            }
            input[type="datetime-local"]::-webkit-calendar-picker-indicator {
                border: none;
                background: transparent;
                border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);
                bottom: 0;
                outline: none;
                color: transparent;
                cursor: pointer;
                height: auto;
                left: 0;
                position: absolute;
                right: 0;
                top: 0;
                width: auto;
                padding:6px;
                font: normal 8px sans-serif;
            }
            .meeting input{
              background: transparent;
              border: none;
              padding: 2px;
              border-bottom: 0.5px solid rgba(0, 0, 0, 0.1);
              font: normal 14px sans-serif;
              outline:none;
              margin: 5px 0;
              &:focus{outline:none;}
            }
            .invalid {
              border-color: red;
            }
            .submit {
              background: linear-gradient(to right, #2e6ee1, #2e7ff1 );
              border: none;
              color: white;
              padding: 10px;
              border-radius: 5px;
              width: 100%;
              cursor: pointer;
              opacity: 0.3;
            }
            .submit:enabled {
              opacity: 1; /* Make the button fully opaque when it's enabled */
            }
          </style>
          <label for="date">Select your date/time</label><br>
          <div class="meeting"><input type="datetime-local" id="meeting" name="meeting" value="" min="${minDateString}" max="${maxDateString}" /></div><br>
          <input type="submit" id="submit" class="submit" value="Submit" disabled="disabled">
          `

    const submitButton = formContainer.querySelector('#submit')
    const datetimeInput = formContainer.querySelector('#meeting')

    datetimeInput.addEventListener('input', function () {
      if (this.value) {
        submitButton.disabled = false
      } else {
        submitButton.disabled = true
      }
    })
    formContainer.addEventListener('submit', function (event) {
      event.preventDefault()

      const datetime = datetimeInput.value
      console.log(datetime)
      let [date, time] = datetime.split('T')

      formContainer.querySelector('.submit').remove()

      window.voiceflow.chat.interact({
        type: 'complete',
        payload: { date: date, time: time },
      })
    })
    element.appendChild(formContainer)
  },
}

export const ConfettiExtension = {
  name: 'Confetti',
  type: 'effect',
  match: ({ trace }) =>
    trace.type === 'ext_confetti' || trace.payload?.name === 'ext_confetti',
  effect: ({ trace }) => {
    const canvas = document.querySelector('#confetti-canvas')

    var myConfetti = confetti.create(canvas, {
      resize: true,
      useWorker: true,
    })
    myConfetti({
      particleCount: 200,
      spread: 160,
    })
  },
}

export const GTH_FormExtension = {
  name: 'Forms',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'GTH_ext_form' || trace.payload?.name === 'GTH_ext_form',
  render: ({ trace, element }) => {
    const formContainer = document.createElement('form')

    formContainer.innerHTML = `
          <style>
            /* General Styling */
            form {
              font-family: "Montserrat", sans-serif;
              width: 100%;
              padding: 10px;
              background-color: #f9f9f9;
              box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
              border-radius: 5px;
              margin: 0;
            }
            label {
              font-size: 0.9em;
              color: #444;
              margin-bottom: 5px;
              display: block;
              width: 100%;
            }
            .required::after {
              content: ' *';
              color: red;
            }
            input[type="text"], input[type="email"], input[type="tel"], select, textarea {
              width: 100%;
              border: 1px solid #ccc;
              padding: 8px;
              margin-bottom: 10px;
              font-size: 0.9em;
              border-radius: 3px;
              box-sizing: border-box;
              color: #000;
            }
            input::placeholder, textarea::placeholder, select option[value=""] {
              color: #bfbfbf;
            }
            select {
              color: #000;
            }
            select option {
              color: #000;
            }
            textarea {
              width: 100%;
              height: 120px; /* Adjust the height here */
              font-size: 0.85em; /* Adjust the font size here */
              color: #000;
            }
            input[type="submit"] {
              background-color: #ff6900;
              background-image: url('https://gotourshawaii.com/wp-content/uploads/2024/05/Black-White-Modern-Handwritten-Square-Studio-Logo-3-1.png');
              border: none;
              color: white;
              padding: 10px 20px;
              border-radius: 12px;
              font-size: 0.9em;
              font-weight: bold;
              text-transform: uppercase;
              cursor: pointer;
              background-size: cover;
              background-position: center;
              background-repeat: no-repeat;
              width: 100%;
              transition: background-color 0.3s ease;
            }
            input[type="submit"]:hover {
              background-color: #042d62;
            }
            .invalid {
              border-color: red;
            }
            /* Responsive Styling */
            @media (max-width: 768px) {
              form {
                width: 100%;
              }
              input[type="submit"] {
                font-size: 1em;
                padding: 12px;
              }
            }
          </style>

          <div class="form-row">
            <label for="firstName" class="required">First Name</label>
            <input type="text" class="firstName" name="firstName" placeholder="John" required>
          </div>

          <div class="form-row">
            <label for="lastName" class="required">Last Name</label>
            <input type="text" class="lastName" name="lastName" placeholder="Doe" required>
          </div>

          <div class="form-row">
            <label for="phone" class="required">Contact Number</label>
            <input type="tel" class="phone" name="phone" placeholder="+123 456 7890" required pattern="^\+?[0-9\s\-]*$" title="Invalid phone number, please enter only numbers">
          </div>

          <div class="form-row">
            <label for="email" class="required">Email</label>
            <input type="email" class="email" name="email" placeholder="youremail@company.com" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$" title="Invalid email address">
          </div>

          <div class="form-row">
            <label for="services" class="required">Services</label>
            <select class="services" name="services" required>
              <option value="" disabled selected>Select Service</option>
              <option value="Oahu Island Tours">Oahu Island Tours</option>
              <option value="Pearl Harbor Tours">Pearl Harbor Tours</option>
              <option value="Luaus Tours">Luaus Tours</option>
              <option value="Private Tours">Private Tours</option>
              <option value="General Inquiry">General Inquiry</option>
            </select>
          </div>

          <div class="form-row">
            <label for="message" class="required">Message</label>
            <textarea class="message" name="message" placeholder="Message" required></textarea>
          </div>

          <input type="submit" class="submit" value="Submit">
        `

    formContainer.addEventListener('submit', function (event) {
      event.preventDefault()

      const firstName = formContainer.querySelector('.firstName')
      const lastName = formContainer.querySelector('.lastName')
      const phone = formContainer.querySelector('.phone')
      const email = formContainer.querySelector('.email')
      const services = formContainer.querySelector('.services')
      const message = formContainer.querySelector('.message')

      if (
        !firstName.checkValidity() ||
        !lastName.checkValidity() ||
        !phone.checkValidity() ||
        !email.checkValidity() ||
        !services.checkValidity() ||
        !message.checkValidity()
      ) {
        // Add 'invalid' class to invalid fields
        [firstName, lastName, phone, email, services, message].forEach((field) => {
          if (!field.checkValidity()) {
            field.classList.add('invalid')
          } else {
            field.classList.remove('invalid')
          }
        })
        return
      }

      formContainer.querySelector('.submit').remove()

      window.voiceflow.chat.interact({
        type: 'complete',
        payload: {
          firstName: firstName.value,
          lastName: lastName.value,
          phone: phone.value,
          email: email.value,
          services: services.value,
          message: message.value
        },
      })
    })

    element.appendChild(formContainer)
  },
}



// YRS: New collect feedback extension (https://youtu.be/ImklyDQDA40?si=ZETFhyVsMsqZ-VSR)

// GTH_FeedbackExtension with removePreviousFeedbackElements
export const GTH_FeedbackExtension = {
  name: 'Feedback',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'GTH_ext_feedback' || trace.payload?.name === 'GTH_ext_feedback',
  render: ({ trace, element }) => {
    removePreviousFeedbackElements(); // Clear previous feedback

    const feedbackContainer = document.createElement('div');
    feedbackContainer.innerHTML = `
      <style>
        .vfrc-feedback {
          display: flex;
          align-items: center;
          justify-content: space-between;
        }

        .vfrc-feedback--description {
          font-size: 0.8em;
          color: grey;
          pointer-events: none;
          font-family: 'Open Sans', sans-serif !important; /* Apply Open Sans font */
        }

        .vfrc-feedback--buttons {
          display: flex;
        }

        .vfrc-feedback--button {
          margin: 0;
          padding: 0;
          margin-left: 0px;
          border: none;
          background: none;
          opacity: 0.2;
        }

        .vfrc-feedback--button:hover {
          opacity: 0.5; /* opacity on hover */
        }

        .vfrc-feedback--button.selected {
          opacity: 0.6;
        }

        .vfrc-feedback--button.disabled {
          pointer-events: none;
        }

        .vfrc-feedback--button:first-child svg {
          fill: none; /* color for thumb up */
          stroke: none;
          border: none;
          margin-left: 6px;
        }

        .vfrc-feedback--button:last-child svg {
          margin-left: 4px;
          fill: none; /* color for thumb down */
          stroke: none;
          border: none;
          transform: rotate(180deg);
        }
      </style>
      <div class="vfrc-feedback">
        <div class="vfrc-feedback--description">Was this answer helpful?</div>
        <div class="vfrc-feedback--buttons">
          <button class="vfrc-feedback--button" data-feedback="1">${SVG_Thumb}</button>
          <button class="vfrc-feedback--button" data-feedback="0">${SVG_Thumb}</button>
        </div>
      </div>
    `;

    feedbackContainer.querySelectorAll('.vfrc-feedback--button').forEach((button) => {
      button.addEventListener('click', function () {
        const feedback = this.getAttribute('data-feedback');
        window.voiceflow.chat.interact({
          type: 'complete',
          payload: { feedback: feedback },
        });

        feedbackContainer.querySelectorAll('.vfrc-feedback--button').forEach((btn) => {
          btn.classList.add('disabled');
          if (btn === this) {
            btn.classList.add('selected');
          }
        });
      });
    });

    element.appendChild(feedbackContainer);
  },
};

// Remove previous feedback function
function removePreviousFeedbackElements() {
  const chatWidget = document.querySelector('#voiceflow-chat').shadowRoot.querySelector('.vfrc-chat--dialog');
  const feedbackWidget = chatWidget.querySelector('.vfrc-feedback');

  if (feedbackWidget) {
    feedbackWidget.closest('.vfrc-system-response').remove();
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// YRS: GIFTCARD & WAITING ANIMATION EXTENSION VAN SHOPIFY VOICEFLOW

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// This extension displays a gift card with a specified amount and code
export const GiftCardDisplayExtension = {
  name: 'GiftCardDisplay',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_giftCardDisplay' ||
    trace.payload?.name === 'ext_giftCardDisplay',
  render: ({ trace, element }) => {
    const title = trace.payload.title || 'Waikiki Turtle Canyon Snorkel Tour';
    const amount = trace.payload.amount || '10';
    const code = (trace.payload.code || 'G9FD5FEG8HDC8A94').toUpperCase();
    const formattedCode = code;
    const logoUrl = 'https://gotourshawaii.com/wp-content/uploads/2024/05/Logo-2.svg';
    const borderImageUrl = 'https://gotourshawaii.com/wp-content/uploads/2024/05/Black-White-Modern-Handwritten-Square-Studio-Logo-3-1.png';

    const giftCardContainer = document.createElement('div');
    giftCardContainer.innerHTML = `
      <style>
        .vfrc-message--extension-GiftCardDisplay {
          background-color: transparent !important;
          background: none !important;
        }
        .gift-card-border-wrapper {
          position: relative;
          max-width: 420px;
          margin: 0 auto;
          padding: 15px; /* Adjust this value to control border thickness */
          background-color: #042d62;
          background-image: url('${borderImageUrl}');
          background-size: contain;
          background-repeat: repeat;
          border-radius: 12px;
        }
        .gift-card-container {
          font-family: "Montserrat", sans-serif;
          max-width: 400px;
          margin: 0 auto;
          padding: 20px;
          border-radius: 8px;
          background-color: #fff;
          text-align: center;
          position: relative;
          z-index: 2;
        }
        .gift-card-logo {
          width: 150px;
          margin: 0 auto 10px;
          display: block;
        }
        .gift-card-title {
          font-size: 1.1em;
          font-weight: bold;
          margin-bottom: 10px;
          color: #000;
        }
        .gift-card-image {
          width: 100%;
          max-width: 400px;
          border-radius: 8px;
          position: relative;
        }
        .gift-card-amount {
          width: 100%;
          max-width: 350px;
          font-size: 50px;
          font-weight: bold;
          color: #fff;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .discount-label {
          font-size: 1.0em; /* Updated font size for "DISCOUNT CODE" */
          font-weight: bold;
          margin-top: 10px;
          margin-bottom: 10px;
        }
        .gift-card-code {
          font-size: 14px; /* Updated font size for the unique gift code */
          font-weight: bold;
          margin-bottom: 10px;
          color: #ffffff;/* YRS: White color unique gift code */
          padding: 15px; /* Added padding to make the container larger */
          background-color: #042d62;
          background-image: url('${borderImageUrl}');
          border-radius: 6px; /* Slight rounding for better aesthetics */
          display: inline-block;
        }
        .button {
          border: none;
          color: white;
          padding: 10px 20px;
          border-radius: 12px;
          font-size: 0.9em;
          font-weight: bold;
          text-transform: uppercase;
          cursor: pointer;
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          width: 100%;
          transition: background-color 0.3s ease;
          margin-top: 10px;
          background-color: #ff6900; /* Orange background */
          background-image: url('${borderImageUrl}');
        }
        .button:hover {
          background-color: #042d62;
          color: #ffffff;
          background-image: url('${borderImageUrl}');
        }
      </style>
      <div class="gift-card-border-wrapper">
        <div class="gift-card-container">
          <img src="${logoUrl}" alt="Company Logo" class="gift-card-logo">
          <div class="gift-card-title">${title}</div>
          <div class="gift-card-image">
            <img src="https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Carousel_Photos/Carousel_TurtleSnorkel.jpeg" alt="Gift Card" class="gift-card-image">
            <div class="gift-card-amount">$${amount}</div>
          </div>
          <div class="discount-label">DISCOUNT CODE</div>
          <div class="gift-card-code" id="gift-card-code">${formattedCode}</div>
          <button class="button copy-button" id="copy-button">Copy Code</button>
          <button class="button book-button" id="book-button">Book Tour</button>
        </div>
      </div>
    `;

    const copyButton = giftCardContainer.querySelector('#copy-button');
    const giftCardCode = giftCardContainer.querySelector('#gift-card-code');

    copyButton.addEventListener('click', () => {
      navigator.clipboard.writeText(giftCardCode.textContent).then(() => {
        alert('Gift card code copied to clipboard!');
      });
    });

    const bookButton = giftCardContainer.querySelector('#book-button');
    bookButton.addEventListener('click', () => {
      // Trigger the next message path in Voiceflow
      window.voiceflow.chat.interact({
        type: 'bookTour', // Custom action type
        payload: { bookTour: 1 }, // Payload to indicate that the button was clicked
      });
    });

    element.appendChild(giftCardContainer);
  },
};


// This extension shows a waiting animation with customizable text and delay
// Also checking for the vf_done value to stop/hide the animation if it's true
export const WaitingAnimationExtension = {
    name: 'WaitingAnimation',
    type: 'response',
    match: ({ trace }) =>
      trace?.type === 'ext_waitingAnimation' || trace?.payload?.name === 'ext_waitingAnimation',
    render: async ({ trace, element }) => {
      window.vf_done = true;
      await new Promise((resolve) => setTimeout(resolve, 250));
  
      const text = trace?.payload?.text || '';
      const delay = trace?.payload?.delay || 3000;
  
      const waitingContainer = document.createElement('div');
      waitingContainer.innerHTML = `
        <style>
          .vfrc-message--extension-WaitingAnimation {
            background-color: transparent !important;
            background: none !important;
          }
          .waiting-animation-container {
            font-family: Arial, sans-serif;
            font-size: 14px;
            font-weight: 300;
            color: #fffc;
            display: flex;
            align-items: center;
          }
          .waiting-text {
            display: inline-block;
            margin-left: 10px;
          }
          .waiting-letter {
            display: inline-block;
            animation: shine 1s linear infinite;
          }
          @keyframes shine {
            0%, 100% { color: #fffc; }
            50% { color: #000; }
          }
          .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #fffc;
            border-top: 2px solid #587C74;
            border-radius: 50%;
            animation: spin 1s linear infinite;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
        <div class="waiting-animation-container">
          <div class="spinner"></div>
          <span class="waiting-text">
            ${text.split('').map((letter, index) =>
              letter === ' '
                ? ' '
                : `<span class="waiting-letter" style="animation-delay: ${index * (1000 / text.length)}ms">${letter}</span>`
            ).join('')}
          </span>
        </div>
      `;
  
      element.appendChild(waitingContainer);
  
      window.voiceflow.chat.interact({
        type: 'continue',
      });
  
      let intervalCleared = false;
      window.vf_done = false;
  
      const checkDoneInterval = setInterval(() => {
        if (window.vf_done) {
          clearInterval(checkDoneInterval);
          waitingContainer.style.display = 'none';
          window.vf_done = false;
        }
      }, 100);
  
      setTimeout(() => {
        if (!intervalCleared) {
          clearInterval(checkDoneInterval);
          waitingContainer.style.display = 'none';
        }
      }, delay);
    },
  };
  



// YRS: DONE ANIMATION

// This extension triggers a "done" action,
// typically used to signal the completion of a task
// and hide a previous WaitingAnimation
export const DoneAnimationExtension = {
  name: 'DoneAnimation',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_doneAnimation' ||
    trace.payload?.name === 'ext_doneAnimation',
  render: async ({ trace, element }) => {
    window.vf_done = true
    await new Promise((resolve) => setTimeout(resolve, 250))

    window.voiceflow.chat.interact({
      type: 'continue',
    })
  },
}

// YRS: INVISIBlE TIMER EXTENSION

export const InvisibleTimerExtension = {
  name: 'Invisible Timer',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_invisible_timer' || trace.payload?.name === 'ext_invisible_timer',
  render: ({ trace }) => {
    const { duration = 5 } = trace.payload || {}; // Default to 5 seconds if duration is not provided

    const countdown = setTimeout(() => {
      window.voiceflow.chat.interact({ type: 'complete' }); // Proceed to the next step after the delay
      clearTimeout(countdown); // Clear the timeout to avoid memory leaks
    }, duration * 1000); // Convert seconds to milliseconds
  },
};


// YRS: Disable Input Extension

export const DisableInputExtension = {
  name: 'DisableInput',
  type: 'effect',
  match: ({ trace }) =>
    trace.type === 'ext_disableInput' ||
    trace.payload?.name === 'ext_disableInput',
  effect: ({ trace }) => {
    const { isDisabled } = trace.payload

    function disableInput() {
      const chatDiv = document.getElementById('voiceflow-chat')

      if (chatDiv) {
        const shadowRoot = chatDiv.shadowRoot
        if (shadowRoot) {
          const chatInput = shadowRoot.querySelector('.vfrc-chat-input')
          const textarea = shadowRoot.querySelector(
            'textarea[id^="vf-chat-input--"]'
          )
          const button = shadowRoot.querySelector('.vfrc-chat-input--button')

          if (chatInput && textarea && button) {
            // Add a style tag if it doesn't exist
            let styleTag = shadowRoot.querySelector('#vf-disable-input-style')
            if (!styleTag) {
              styleTag = document.createElement('style')
              styleTag.id = 'vf-disable-input-style'
              styleTag.textContent = `
                .vf-no-border, .vf-no-border * {
                  border: none !important;
                }
                .vf-hide-button {
                  display: none !important;
                }
              `
              shadowRoot.appendChild(styleTag)
            }

            function updateInputState() {
              textarea.disabled = isDisabled
              if (!isDisabled) {
                textarea.placeholder = 'Message...'
                chatInput.classList.remove('vf-no-border')
                button.classList.remove('vf-hide-button')
                // Restore original value getter/setter
                Object.defineProperty(
                  textarea,
                  'value',
                  originalValueDescriptor
                )
              } else {
                textarea.placeholder = ''
                chatInput.classList.add('vf-no-border')
                button.classList.add('vf-hide-button')
                Object.defineProperty(textarea, 'value', {
                  get: function () {
                    return ''
                  },
                  configurable: true,
                })
              }

              // Trigger events to update component state
              textarea.dispatchEvent(
                new Event('input', { bubbles: true, cancelable: true })
              )
              textarea.dispatchEvent(
                new Event('change', { bubbles: true, cancelable: true })
              )
            }

            // Store original value descriptor
            const originalValueDescriptor = Object.getOwnPropertyDescriptor(
              HTMLTextAreaElement.prototype,
              'value'
            )

            // Initial update
            updateInputState()
          } else {
            console.error('Chat input, textarea, or button not found')
          }
        } else {
          console.error('Shadow root not found')
        }
      } else {
        console.error('Chat div not found')
      }
    }

    disableInput()
  },
}


// YRS: MAKE.COM DATA TO VOICEFLOW EXTENSION

export const makeToVoiceflowExtension = {
  name: 'makeToVoiceflow',
  type: 'response',
  match: ({ trace }) => trace.type === 'ext_getMakeData' || trace.payload?.name === 'ext_getMakeData',
  render: ({ trace, element }) => {
    const makeUrl = trace.payload.makeUrl || null;

    const options = {
      method: 'GET'
    };

    try {
      if (!makeUrl) {
        throw new Error('Webhook URL is null!');
      }

      // Make the API call
      fetch(makeUrl, options).then((response) => {
        // Check if the response status is OK
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        } else {
          return response.json();
        }
      })
      .then((result) => {
        console.log(result);
        console.log(result.name);
        console.log(result.email);
        console.log(result.phone);

        window.voiceflow.chat.interact({
          type: 'complete',
          payload: {
            name: result.name,
            email: result.email,
            phone: result.phone,
          }
        });
      });
    } catch (error) {
      console.log(error.message);
      return {
        next: { path: 'error' },
        trace: [{ type: 'debug', payload: { message: "Error: " + error.message } }]
      };
    }
  }
};

// YRS: RESCHEDULE/CANCEL FORM EXTENSION

export const RescheduleCancelFormExtension = {
  name: 'RescheduleCancelForm',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'RescheduleCancelForm' || trace.payload?.name === 'RescheduleCancelForm',
  render: ({ trace, element }) => {
    const formContainer = document.createElement('form');

    formContainer.innerHTML = `
      <style>
        /* General Styling */
        form {
          font-family: "Montserrat", sans-serif;
          width: 100%;
          padding: 10px;
          background-color: #f9f9f9;
          box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
          border-radius: 5px;
          margin: 0;
        }
        label {
          font-size: 0.9em;
          color: #444;
          margin-bottom: 5px;
          display: block;
          width: 100%;
        }
        .required::after {
          content: ' *';
          color: red;
        }
        input[type="text"], input[type="email"], input[type="tel"], input[type="number"], select, textarea {
          width: 100%;
          border: 1px solid #ccc;
          padding: 8px;
          margin-bottom: 10px;
          font-size: 0.9em;
          border-radius: 3px;
          box-sizing: border-box;
          color: #000;
        }
        input::placeholder, textarea::placeholder, select option[value=""] {
          color: #bfbfbf;
        }
        select {
          color: #000;
        }
        select option {
          color: #000;
        }
        textarea {
          width: 100%;
          height: 120px;
          font-size: 0.85em;
          color: #000;
        }
        input[type="submit"] {
          background-color: #ff6900;
          background-image: url('https://gotourshawaii.com/wp-content/uploads/2024/05/Black-White-Modern-Handwritten-Square-Studio-Logo-3-1.png');
          border: none;
          color: white;
          padding: 10px 20px;
          border-radius: 12px;
          font-size: 0.9em;
          font-weight: bold;
          text-transform: uppercase;
          cursor: pointer;
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          width: 100%;
          transition: background-color 0.3s ease;
        }
        input[type="submit"]:hover {
          background-color: #042d62;
        }
        .invalid {
          border-color: red;
        }
        /* Responsive Styling */
        @media (max-width: 768px) {
          form {
            width: 100%;
          }
          input[type="submit"] {
            font-size: 1em;
            padding: 12px;
          }
        }
        /* File Upload Styling */
        .file-upload {
          border: 2px dashed rgba(46, 110, 225, 0.3);
          padding: 20px;
          text-align: center;
          cursor: pointer;
          margin-bottom: 10px;
        }
        .file-upload.dragover {
          border-color: #2e6ee1;
        }
        .file-upload a {
          color: #2e6ee1;
          text-decoration: none;
        }
        .file-upload a:hover {
          text-decoration: underline;
        }
        /* Acknowledgment Box Styling */
        .acknowledgment-box {
          background-color: #fff3e6;
          border: 1px solid #ff6900;
          border-radius: 5px;
          padding: 15px;
          margin: 15px 0;
        }
        .checkbox-container {
          display: flex;
          align-items: flex-start;
          gap: 10px;
          margin: 10px 0;
        }
        .checkbox-container input[type="checkbox"] {
          margin-top: 4px;
        }
        .checkbox-container label {
          font-size: 0.85em;
          line-height: 1.4;
          color: #333;
        }
      </style>

      <div class="form-row">
        <label for="firstName" class="required">First Name</label>
        <input type="text" class="firstName" name="firstName" placeholder="John" required>
      </div>

      <div class="form-row">
        <label for="lastName" class="required">Last Name</label>
        <input type="text" class="lastName" name="lastName" placeholder="Doe" required>
      </div>

      <div class="form-row">
        <label for="email" class="required">Email</label>
        <input type="email" class="email" name="email" placeholder="youremail@company.com" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$" title="Invalid email address">
      </div>

      <div class="form-row">
        <label for="phone" class="required">Phone Number</label>
        <input type="tel" class="phone" name="phone" placeholder="+1234567890" required pattern="^\+?[0-9\s\-]*$" title="Invalid phone number, please enter only numbers">
      </div>

      <div class="form-row">
        <label for="bookingNumber" class="required">Booking Number</label>
        <input type="text" class="bookingNumber" name="bookingNumber" placeholder="ABC123" required>
      </div>

      <div class="form-row">
        <label for="action" class="required">Action</label>
        <select class="action" name="action" required>
          <option value="" disabled selected>Select Action</option>
          <option value="Cancel">Cancel</option>
          <option value="Reschedule">Reschedule</option>
        </select>
      </div>

      <div class="form-row">
        <label for="tour" class="required">Select Tour</label>
        <select class="tour" name="tour" required>
          <option value="" disabled selected>Select Tour</option>
          <option value="Hidden Gems of Oahu with Byodo-In Temple">Hidden Gems of Oahu with Byodo-In Temple</option>
          <option value="Hidden Gems of Oahu with Waimea Botanical Garden/Waterfall">Hidden Gems of Oahu with Waimea Botanical Garden/Waterfall</option>
          <option value="Waikiki Turtle Canyon Snorkeling and Swim">Waikiki Turtle Canyon Snorkeling and Swim</option>
          <option value="Paina Waikiki Luau">Paina Waikiki Luau</option>
          <option value="Premier Pearl Harbor and Hawaiian Kingdom History Tour">Premier Pearl Harbor and Hawaiian Kingdom History Tour</option>
        </select>
      </div>

      <div class="form-row">
        <label for="tickets" class="required">Number of Tickets</label>
        <input type="number" class="tickets" name="tickets" min="1" placeholder="1" required>
      </div>

      <div class="form-row">
        <label for="reason" class="required">Reason</label>
        <textarea class="reason" name="reason" placeholder="Please explain your reason" required></textarea>
      </div>

      <div class="form-row">
        <label for="attachment">Attachment (Optional)</label>
        <div class="attachment"></div>
      </div>

      <div class="acknowledgment-box">
        <div class="checkbox-container">
          <input type="checkbox" id="acknowledgment" class="acknowledgment" required>
          <label for="acknowledgment" class="required">I understand that submitting this form does not guarantee an immediate cancellation or rescheduling. A Go Tours Hawaii representative will review my request and contact me to confirm any changes to my booking.</label>
        </div>
      </div>

      <input type="submit" class="submit" value="Submit">
    `;

    // Insert file upload extension into the form
    const attachmentDiv = formContainer.querySelector('.attachment');

    // Create the file upload element
    const fileUploadContainer = document.createElement('div');
    fileUploadContainer.innerHTML = `
      <div class='file-upload'>Drag and drop a file here or click to upload</div>
      <input type='file' style='display: none;'>
    `;

    const fileInput = fileUploadContainer.querySelector('input[type=file]');
    const fileUploadBox = fileUploadContainer.querySelector('.file-upload');

    fileUploadBox.addEventListener('click', function () {
      fileInput.click();
    });

    fileUploadBox.addEventListener('dragover', function (event) {
      event.preventDefault();
      fileUploadBox.classList.add('dragover');
    });

    fileUploadBox.addEventListener('dragleave', function (event) {
      event.preventDefault();
      fileUploadBox.classList.remove('dragover');
    });

    fileUploadBox.addEventListener('drop', function (event) {
      event.preventDefault();
      fileUploadBox.classList.remove('dragover');
      const file = event.dataTransfer.files[0];
      handleFileUpload(file);
    });

    fileInput.addEventListener('change', function () {
      const file = fileInput.files[0];
      handleFileUpload(file);
    });

    let uploadedFileURL = '';
    let uploadedFileName = '';

    function handleFileUpload(file) {
      console.log('File selected:', file);
      uploadedFileName = file.name;
      fileUploadBox.innerHTML = `<img src="https://s3.amazonaws.com/com.voiceflow.studio/share/upload/upload.gif" alt="Uploading..." width="50" height="50">`;

      var data = new FormData();
      data.append('file', file);

      fetch('https://tmpfiles.org/api/v1/upload', {
        method: 'POST',
        body: data,
      })
        .then((response) => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Upload failed: ' + response.statusText);
          }
        })
        .then((result) => {
          uploadedFileURL = result.data.url.replace(
            'https://tmpfiles.org/',
            'https://tmpfiles.org/dl/'
          );
          fileUploadBox.innerHTML = `<div>File uploaded: <a href="${uploadedFileURL}" target="_blank">${uploadedFileName}</a></div>`;
          console.log('File uploaded:', uploadedFileURL);
        })
        .catch((error) => {
          console.error(error);
          fileUploadBox.innerHTML = '<div>Error during upload</div>';
        });
    }

    attachmentDiv.appendChild(fileUploadContainer);

    formContainer.addEventListener('submit', function (event) {
      event.preventDefault();

      const firstName = formContainer.querySelector('.firstName');
      const lastName = formContainer.querySelector('.lastName');
      const email = formContainer.querySelector('.email');
      const phone = formContainer.querySelector('.phone');
      const bookingNumber = formContainer.querySelector('.bookingNumber');
      const action = formContainer.querySelector('.action');
      const tour = formContainer.querySelector('.tour');
      const tickets = formContainer.querySelector('.tickets');
      const reason = formContainer.querySelector('.reason');
      const acknowledgment = formContainer.querySelector('.acknowledgment');

      // Validate fields
      if (
        !firstName.checkValidity() ||
        !lastName.checkValidity() ||
        !email.checkValidity() ||
        !phone.checkValidity() ||
        !bookingNumber.checkValidity() ||
        !action.checkValidity() ||
        !tour.checkValidity() ||
        !tickets.checkValidity() ||
        !reason.checkValidity() ||
        !acknowledgment.checked
      ) {
        // Add 'invalid' class to invalid fields
        [firstName, lastName, email, phone, bookingNumber, action, tour, tickets, reason].forEach((field) => {
          if (!field.checkValidity()) {
            field.classList.add('invalid');
          } else {
            field.classList.remove('invalid');
          }
        });
        return;
      }

      formContainer.querySelector('.submit').remove();

      window.voiceflow.chat.interact({
        type: 'complete',
        payload: {
          firstName: firstName.value,
          lastName: lastName.value,
          email: email.value,
          phone: phone.value,
          bookingNumber: bookingNumber.value,
          action: action.value,
          tour: tour.value,
          tickets: tickets.value,
          reason: reason.value,
          fileUrl: uploadedFileURL,
          acknowledged: acknowledgment.checked
        },
      });
    });

    element.appendChild(formContainer);
  },
};


// YRS: New iFrame Extension to display a webpage in an iFrame for new version of Voiceflow webchat 

export const IframeEmbedExtension = {
  name: 'IframeEmbed',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_iframeEmbed' || trace.payload?.name === 'ext_iframeEmbed',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      iframeUrl, 
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '1200px'
    } = trace.payload;

    // First, we need to modify the parent element to be full width
    element.style.width = '100%';
    element.style.maxWidth = '100%';
    element.style.margin = '0';
    element.style.padding = '0';
    element.style.display = 'flex';
    element.style.justifyContent = 'center';
    element.style.backgroundColor = 'transparent';
    element.style.border = 'none';
    
    // Create a container for the iframe
    const container = document.createElement('div');
    
    // Style the container to be centered with max-width
    container.style.width = 'calc(100% - ' + padding + ' * 2)';
    container.style.maxWidth = maxWidth;
    container.style.margin = '0 auto';
    container.style.padding = padding;
    container.style.boxSizing = 'border-box';
    
    // Create the iframe element
    const iframeEl = document.createElement('iframe');
    
    // Set attributes and styling for the iframe
    iframeEl.style.width = '100%';
    iframeEl.style.height = height + 'px';
    iframeEl.style.border = 'none';
    iframeEl.style.backgroundColor = backgroundColor;
    iframeEl.style.borderRadius = '8px'; // Slight rounding of corners
    
    // Essential attributes
    iframeEl.setAttribute('frameborder', '0');
    iframeEl.setAttribute('marginheight', '0');
    iframeEl.setAttribute('marginwidth', '0');
    iframeEl.setAttribute('allowfullscreen', 'true');
    
    // Set the source URL
    iframeEl.src = iframeUrl;
    
    // Hide initially and show when loaded
    iframeEl.style.display = "none";
    iframeEl.onload = () => {
      iframeEl.style.display = "block";
    };
    
    // Add the iframe to the container
    container.appendChild(iframeEl);
    
    // Find the chat dialog element (this is the trick to break out of the chat bubble)
    let chatDialog = element;
    while (chatDialog && !chatDialog.classList.contains('vfrc-chat--dialog')) {
      chatDialog = chatDialog.parentElement;
    }
    
    // If we found the chat dialog, we'll insert our container there directly
    if (chatDialog) {
      // Optionally, use a delay before inserting
      if (delay > 0) {
        setTimeout(() => {
          chatDialog.appendChild(container);
        }, delay * 1000);
      } else {
        chatDialog.appendChild(container);
      }
      
      // Remove the original element that would have contained the response
      if (element.parentElement) {
        element.parentElement.removeChild(element);
      }
    } else {
      // Fallback if we can't find the chat dialog
      element.appendChild(container);
    }
  },
};

// YRS: Updated Styled iFrame Extension for better customization of iFrame:

export const CustomizedIframeExtension = {
  name: 'CustomizedIframe',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_customizedIframe' || trace.payload?.name === 'ext_customizedIframe',
  render: ({ trace, element }) => {
    // Extract properties from the payload with expanded styling options
    const { 
      iframeUrl, 
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '1200px',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and glow effects
      shadowColor = 'rgba(88, 124, 116, 0.3)',
      shadowSize = '10px',
      glow = false,
      glowColor = 'rgba(88, 124, 116, 0.6)',
      glowSize = '15px',
      // Animation
      animateIn = true,
      // Additional styling
      headerBar = false,
      headerText = '',
      headerBgColor = '#587C74',
      headerTextColor = '#ffffff'
    } = trace.payload;

    // First, we need to modify the parent element to be full width
    element.style.width = '100%';
    element.style.maxWidth = '100%';
    element.style.margin = '0';
    element.style.padding = '0';
    element.style.display = 'flex';
    element.style.justifyContent = 'center';
    element.style.backgroundColor = 'transparent';
    element.style.border = 'none';
    
    // Create a container for the iframe
    const container = document.createElement('div');
    
    // Style the container to be centered with max-width
    container.style.width = 'calc(100% - ' + padding + ' * 2)';
    container.style.maxWidth = maxWidth;
    container.style.margin = '0 auto';
    container.style.padding = padding;
    container.style.boxSizing = 'border-box';
    
    // Create the main wrapper for styling
    const wrapper = document.createElement('div');
    
    // Apply border styling
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden'; // Ensures content respects border radius
    wrapper.style.backgroundColor = backgroundColor;
    
    // Apply shadow effect
    if (shadowSize !== '0') {
      wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    }
    
    // Apply glow effect if enabled
    if (glow) {
      wrapper.style.boxShadow = `0 0 ${glowSize} ${glowColor}`;
    }
    
    // Optional header bar
    if (headerBar) {
      const header = document.createElement('div');
      header.style.backgroundColor = headerBgColor;
      header.style.color = headerTextColor;
      header.style.padding = '10px 15px';
      header.style.fontWeight = 'bold';
      header.style.borderBottom = `1px solid ${borderColor}`;
      header.textContent = headerText;
      wrapper.appendChild(header);
    }
    
    // Create the iframe element
    const iframeEl = document.createElement('iframe');
    
    // Set attributes and styling for the iframe
    iframeEl.style.width = '100%';
    iframeEl.style.height = height + 'px';
    iframeEl.style.border = 'none';
    iframeEl.style.display = 'block';
    
    // Essential attributes
    iframeEl.setAttribute('frameborder', '0');
    iframeEl.setAttribute('marginheight', '0');
    iframeEl.setAttribute('marginwidth', '0');
    iframeEl.setAttribute('allowfullscreen', 'true');
    
    // Set the source URL
    iframeEl.src = iframeUrl;
    
    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }
    
    // Add the iframe to the wrapper
    wrapper.appendChild(iframeEl);
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    
    // Find the chat dialog element
    let chatDialog = element;
    while (chatDialog && !chatDialog.classList.contains('vfrc-chat--dialog')) {
      chatDialog = chatDialog.parentElement;
    }
    
    // If we found the chat dialog, we'll insert our container there directly
    if (chatDialog) {
      // Optionally, use a delay before inserting
      if (delay > 0) {
        setTimeout(() => {
          chatDialog.appendChild(container);
          if (animateIn) {
            setTimeout(() => {
              wrapper.style.opacity = '1';
              wrapper.style.transform = 'translateY(0)';
            }, 100);
          }
        }, delay * 1000);
      } else {
        chatDialog.appendChild(container);
        if (animateIn) {
          setTimeout(() => {
            wrapper.style.opacity = '1';
            wrapper.style.transform = 'translateY(0)';
          }, 100);
        }
      }
      
      // Remove the original element that would have contained the response
      if (element.parentElement) {
        element.parentElement.removeChild(element);
      }
    } else {
      // Fallback if we can't find the chat dialog
      element.appendChild(container);
      if (animateIn) {
        setTimeout(() => {
          wrapper.style.opacity = '1';
          wrapper.style.transform = 'translateY(0)';
        }, 100);
      }
    }
  },
};

// YRS: Google Maps Directions Workflow Extension (March 11, 2025)

// Directions Workflow Extension
export const DirectionsWorkflowExtension = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow' || trace.payload?.name === 'ext_directionsWorkflow',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // Replace with your actual API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '440px',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.maxWidth = '100%';
    container.style.margin = '0';
    container.style.padding = '0';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.border = 'none';
    
    // Create the main wrapper
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data
    const toursData = [
      {
        id: 'hawaii-circle',
        name: 'Hawaii Grand Circle Island Tour',
        description: 'Discover the beauty of Oahu island on this full-day tour',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'pearl-harbor',
        name: 'Pearl Harbor & Honolulu City Tour',
        description: 'Visit historic Pearl Harbor and tour Honolulu\'s landmarks',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'north-shore',
        name: 'North Shore Adventure Tour',
        description: 'Experience Oahu\'s legendary North Shore beaches and culture',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      }
    ];

    // Use the specified pickup points or default ones
    const allPickupPoints = pickupPoints.length > 0 ? pickupPoints : defaultPickupPoints;

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Selection */
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 120px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
        }
        
        .map-container {
          height: 250px;
        }
        
        .route-map-container {
          height: 300px;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
        }
        
        .pickup-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map -->
          <div class="workflow-step" id="step-route">
            <h3>Walking Directions</h3>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Pickup Point</span></p>
              <p class="walk-time" id="route-time">Calculating walking time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "",
        lat: 0,
        lng: 0
      },
      nearestPickup: null,
      pickupPoints: allPickupPoints,
      apiKey: apiKey
    };

    // Add event listeners
    function setupEventListeners() {
      // Get all DOM elements we need
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Tour Selection
      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          // Remove selected class from all cards
          tourCards.forEach(c => c.classList.remove('selected'));
          // Add selected class to clicked card
          card.classList.add('selected');
          // Save selected tour
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
      }
    }

    // Function to search for a location
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Simulate API call (in production, this would be a real API call)
      setTimeout(() => {
        // Simulate a successful geocoding result
        workflowData.userLocation = {
          address: accommodationName ? `${accommodationName}, ${address}, ${city}` : `${address}, ${city}`,
          placeId: "ChIJTUbDjDsYAHwRT5ae7MOGBZ0", // Example Place ID
          lat: 21.2873,
          lng: -157.8361
        };

        // Create an iframe for the map with the place ID
        const mapIframe = document.createElement('iframe');
        mapIframe.width = "100%";
        mapIframe.height = "100%";
        mapIframe.frameBorder = "0";
        mapIframe.style.border = "0";
        mapIframe.referrerPolicy = "no-referrer-when-downgrade";
        mapIframe.src = `https://www.google.com/maps/embed/v1/place?key=${workflowData.apiKey}&q=place_id:${workflowData.userLocation.placeId}&zoom=17&maptype=roadmap`;
        mapIframe.allowFullscreen = true;

        // Clear previous content and append the new iframe
        const mapContainer = wrapper.querySelector('#location-map');
        if (mapContainer) {
          mapContainer.innerHTML = '';
          mapContainer.appendChild(mapIframe);
        }

        // Move to the confirmation step
        goToStep('step-location-confirm');
      }, 2000);
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Find the closest pickup point using the Haversine formula
        let closestPoint = null;
        let minDistance = Infinity;

        workflowData.pickupPoints.forEach(point => {
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            point.lat,
            point.lon
          );

          if (distance < minDistance) {
            minDistance = distance;
            closestPoint = point;
          }
        });

        // Save the nearest pickup
        workflowData.nearestPickup = closestPoint;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map
    function showRouteMap() {
      // Create an iframe for the directions
      const routeIframe = document.createElement('iframe');
      routeIframe.width = "100%";
      routeIframe.height = "100%";
      routeIframe.frameBorder = "0";
      routeIframe.style.border = "0";
      routeIframe.referrerPolicy = "no-referrer-when-downgrade";

      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;

      // Set the source URL for the directions map
      routeIframe.src = `https://www.google.com/maps/embed/v1/directions?key=${workflowData.apiKey}&origin=${origin}&destination=${destination}&mode=walking`;

      // Clear previous content and append the new iframe
      const routeMapContainer = wrapper.querySelector('#route-map');
      if (routeMapContainer) {
        routeMapContainer.innerHTML = '';
        routeMapContainer.appendChild(routeIframe);
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate walking time (approximate)
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      const walkTimeMinutes = Math.round(distance * 15); // Rough estimate: 15 min per km
      
      if (routeTime) routeTime.textContent = `Walking time: ~${walkTimeMinutes} minutes (${distance.toFixed(1)} km)`;

      // Go to the route step
      goToStep('step-route');
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Initialize the workflow
    setupEventListeners();
  },
};

// YRS: Google Maps Directions Workflow Extension VERSION 2 (March 12, 2025)

// Directions Workflow Extension Version 2
export const DirectionsWorkflowExtension2 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow2' || trace.payload?.name === 'ext_directionsWorkflow2',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '440px',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.maxWidth = '100%';
    container.style.margin = '0';
    container.style.padding = '0';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.border = 'none';
    
    // Create the main wrapper
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data
    const toursData = [
      {
        id: 'hawaii-circle',
        name: 'Hawaii Grand Circle Island Tour',
        description: 'Discover the beauty of Oahu island on this full-day tour',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'pearl-harbor',
        name: 'Pearl Harbor & Honolulu City Tour',
        description: 'Visit historic Pearl Harbor and tour Honolulu\'s landmarks',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'north-shore',
        name: 'North Shore Adventure Tour',
        description: 'Experience Oahu\'s legendary North Shore beaches and culture',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      }
    ];

    // Use the specified pickup points or default ones
    const allPickupPoints = pickupPoints.length > 0 ? pickupPoints : defaultPickupPoints;

    // Add function to load Google Maps API
    const loadGoogleMapsScript = () => {
      if (window.google && window.google.maps) {
        console.log('Google Maps API already loaded');
        return Promise.resolve();
      }
      
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMaps`;
        script.async = true;
        script.defer = true;
        
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully');
          resolve();
        };
        
        script.onerror = function() {
          console.error('Error loading Google Maps API');
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Selection */
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 120px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
        }
        
        .map-container {
          height: 250px;
        }
        
        .route-map-container {
          height: 300px;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
        }
        
        .pickup-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map -->
          <div class="workflow-step" id="step-route">
            <h3>Walking Directions</h3>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Pickup Point</span></p>
              <p class="walk-time" id="route-time">Calculating walking time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", // Will be populated by Places API
        lat: 0,
        lng: 0
      },
      nearestPickup: null,
      pickupPoints: allPickupPoints,
      apiKey: apiKey
    };

    // Add event listeners
    function setupEventListeners() {
      // Get all DOM elements we need
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Tour Selection
      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          // Remove selected class from all cards
          tourCards.forEach(c => c.classList.remove('selected'));
          // Add selected class to clicked card
          card.classList.add('selected');
          // Save selected tour
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Make the API call to Google Places API
      const searchUrl = `https://places.googleapis.com/v1/places:searchText`;
      
      // Option 1: Try using fetch with the new Places API
      fetch(searchUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Goog-Api-Key': apiKey,
          'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.id,places.location'
        },
        body: JSON.stringify({
          textQuery: fullAddress,
          locationBias: {
            circle: {
              center: {
                latitude: defaultLat,
                longitude: defaultLng
              },
              radius: defaultRadius
            }
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.places && data.places.length > 0) {
          const place = data.places[0];
          
          // Format and save location data
          const locationData = {
            address: place.formattedAddress || fullAddress,
            placeId: place.id,
            lat: place.location.latitude,
            lng: place.location.longitude
          };
          
          workflowData.userLocation = locationData;
          
          // Create and embed the map using place ID
          const mapContainer = wrapper.querySelector('#location-map');
          const mapFallback = wrapper.querySelector('#location-map-fallback');
          
          if (mapContainer) {
            try {
              // Use place ID for more accurate mapping
              const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
              
              mapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${mapUrl}"
                  allowfullscreen
                  onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                  onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (mapFallback) {
                const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                if (fallbackAddressEl) {
                  fallbackAddressEl.textContent = locationData.address;
                }
              }
            } catch (error) {
              console.error('Error embedding map:', error);
              if (mapContainer) mapContainer.style.display = 'none';
              if (mapFallback) mapFallback.style.display = 'block';
            }
          }
          
          // Move to the confirmation step
          goToStep('step-location-confirm');
        } else {
          // Fallback to Option 2 if Places API fails
          fallbackLocationSearch(fullAddress);
        }
      })
      .catch(error => {
        console.error('Error using Places API:', error);
        // Fallback to Option 2 if Places API fails
        fallbackLocationSearch(fullAddress);
      });
    }

    // Fallback location search using Geocoding API
    function fallbackLocationSearch(fullAddress) {
      // Option 2: Try using Geocoding API
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Find the closest pickup point using the Haversine formula
        let closestPoint = null;
        let minDistance = Infinity;

        workflowData.pickupPoints.forEach(point => {
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            point.lat,
            point.lon
          );

          if (distance < minDistance) {
            minDistance = distance;
            closestPoint = point;
          }
        });

        // If no pickup points found or no closest point, use a default
        if (!closestPoint) {
          closestPoint = allPickupPoints[0];
        }

        // Save the nearest pickup
        workflowData.nearestPickup = closestPoint;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map
    function showRouteMap() {
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=walking`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>Walking route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate walking time (approximate)
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      const walkTimeMinutes = Math.round(distance * 15); // Rough estimate: 15 min per km
      
      if (routeTime) routeTime.textContent = `Walking time: ~${walkTimeMinutes} minutes (${distance.toFixed(1)} km)`;

      // Go to the route step
      goToStep('step-route');
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Initialize the workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 3 (12 March 2025)

// Directions Workflow Extension Version 3
export const DirectionsWorkflowExtension3 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow3' || trace.payload?.name === 'ext_directionsWorkflow3',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data
    const toursData = [
      {
        id: 'hawaii-circle',
        name: 'Hawaii Grand Circle Island Tour',
        description: 'Discover the beauty of Oahu island on this full-day tour',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'pearl-harbor',
        name: 'Pearl Harbor & Honolulu City Tour',
        description: 'Visit historic Pearl Harbor and tour Honolulu\'s landmarks',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'north-shore',
        name: 'North Shore Adventure Tour',
        description: 'Experience Oahu\'s legendary North Shore beaches and culture',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      }
    ];

    // Use the specified pickup points or default ones
    const allPickupPoints = pickupPoints.length > 0 ? pickupPoints : defaultPickupPoints;

    // Add function to load Google Maps API
    const loadGoogleMapsScript = () => {
      if (window.google && window.google.maps) {
        console.log('Google Maps API already loaded');
        return Promise.resolve();
      }
      
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMaps`;
        script.async = true;
        script.defer = true;
        
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully');
          resolve();
        };
        
        script.onerror = function() {
          console.error('Error loading Google Maps API');
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Selection */
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px; /* Fixed height for tour images */
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map -->
          <div class="workflow-step" id="step-route">
            <h3>Walking Directions</h3>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Pickup Point</span></p>
              <p class="walk-time" id="route-time">Calculating walking time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", // Will be populated by Places API
        lat: 0,
        lng: 0
      },
      nearestPickup: null,
      pickupPoints: allPickupPoints,
      apiKey: apiKey
    };

    // Add event listeners
    function setupEventListeners() {
      // Get all DOM elements we need
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Tour Selection
      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          // Remove selected class from all cards
          tourCards.forEach(c => c.classList.remove('selected'));
          // Add selected class to clicked card
          card.classList.add('selected');
          // Save selected tour
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Make the API call to Google Places API
      const searchUrl = `https://places.googleapis.com/v1/places:searchText`;
      
      // Option 1: Try using fetch with the new Places API
      fetch(searchUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Goog-Api-Key': apiKey,
          'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.id,places.location'
        },
        body: JSON.stringify({
          textQuery: fullAddress,
          locationBias: {
            circle: {
              center: {
                latitude: defaultLat,
                longitude: defaultLng
              },
              radius: defaultRadius
            }
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.places && data.places.length > 0) {
          const place = data.places[0];
          
          // Format and save location data
          const locationData = {
            address: place.formattedAddress || fullAddress,
            placeId: place.id,
            lat: place.location.latitude,
            lng: place.location.longitude
          };
          
          workflowData.userLocation = locationData;
          
          // Create and embed the map using place ID
          const mapContainer = wrapper.querySelector('#location-map');
          const mapFallback = wrapper.querySelector('#location-map-fallback');
          
          if (mapContainer) {
            try {
              // Use place ID for more accurate mapping
              const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
              
              mapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${mapUrl}"
                  allowfullscreen
                  onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                  onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (mapFallback) {
                const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                if (fallbackAddressEl) {
                  fallbackAddressEl.textContent = locationData.address;
                }
              }
            } catch (error) {
              console.error('Error embedding map:', error);
              if (mapContainer) mapContainer.style.display = 'none';
              if (mapFallback) mapFallback.style.display = 'block';
            }
          }
          
          // Move to the confirmation step
          goToStep('step-location-confirm');
        } else {
          // Fallback to Option 2 if Places API fails
          fallbackLocationSearch(fullAddress);
        }
      })
      .catch(error => {
        console.error('Error using Places API:', error);
        // Fallback to Option 2 if Places API fails
        fallbackLocationSearch(fullAddress);
      });
    }

    // Fallback location search using Geocoding API
    function fallbackLocationSearch(fullAddress) {
      // Option 2: Try using Geocoding API
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Find the closest pickup point using the Haversine formula
        let closestPoint = null;
        let minDistance = Infinity;

        workflowData.pickupPoints.forEach(point => {
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            point.lat,
            point.lon
          );

          if (distance < minDistance) {
            minDistance = distance;
            closestPoint = point;
          }
        });

        // If no pickup points found or no closest point, use a default
        if (!closestPoint) {
          closestPoint = allPickupPoints[0];
        }

        // Save the nearest pickup
        workflowData.nearestPickup = closestPoint;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map
    function showRouteMap() {
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=walking`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>Walking route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate walking time (approximate)
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      const walkTimeMinutes = Math.round(distance * 15); // Rough estimate: 15 min per km
      
      if (routeTime) routeTime.textContent = `Walking time: ~${walkTimeMinutes} minutes (${distance.toFixed(1)} km)`;

      // Go to the route step
      goToStep('step-route');
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        // Enforce consistent width after everything is loaded
        setTimeout(enforceConsistentWidth, 100);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 100);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 4 (12 March 2025)

// Directions Workflow Extension Version 4
export const DirectionsWorkflowExtension4 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow4' || trace.payload?.name === 'ext_directionsWorkflow4',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Add function to load Google Maps API with Places library
    const loadGoogleMapsScript = () => {
      if (window.google && window.google.maps) {
        console.log('Google Maps API already loaded');
        return Promise.resolve();
      }
      
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMaps`;
        script.async = true;
        script.defer = true;
        
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully');
          // Initialize autocomplete after Maps API is loaded
          initAutocomplete();
          resolve();
        };
        
        script.onerror = function() {
          console.error('Error loading Google Maps API');
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Function to initialize Google Places Autocomplete
    function initAutocomplete() {
      // Only initialize if the API is loaded and the input field exists
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Places API not available');
        return;
      }
      
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      if (!accommodationInput) {
        console.error('Accommodation input field not found');
        return;
      }
      
      // Create the autocomplete object
      const autocomplete = new google.maps.places.Autocomplete(accommodationInput, {
        types: ['establishment', 'lodging'],
        componentRestrictions: {country: 'us'},
        fields: ['address_components', 'formatted_address', 'geometry', 'name', 'place_id']
      });
      
      // When a place is selected, fill in the address fields
      autocomplete.addListener('place_changed', function() {
        const place = autocomplete.getPlace();
        
        if (!place.geometry) {
          console.error('No place details available for selection');
          return;
        }
        
        // Fill address field with selected place's address
        const addressInput = wrapper.querySelector('#address');
        if (addressInput) {
          let streetNumber = '';
          let route = '';
          
          // Extract street address components
          for (const component of place.address_components) {
            const type = component.types[0];
            if (type === 'street_number') {
              streetNumber = component.long_name;
            } else if (type === 'route') {
              route = component.long_name;
            }
          }
          
          // Set address value
          if (streetNumber && route) {
            addressInput.value = `${streetNumber} ${route}`;
          } else if (route) {
            addressInput.value = route;
          } else {
            // Fall back to whatever we can extract from the formatted address
            const formattedAddress = place.formatted_address || '';
            const commaIndex = formattedAddress.indexOf(',');
            if (commaIndex > 0) {
              addressInput.value = formattedAddress.substring(0, commaIndex);
            } else {
              addressInput.value = formattedAddress;
            }
          }
        }
      });
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Selection */
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px; /* Fixed height for tour images */
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey
    };

    // Add event listeners
    function setupEventListeners() {
      // Get all DOM elements we need
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Tour Selection
      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          // Remove selected class from all cards
          tourCards.forEach(c => c.classList.remove('selected'));
          // Add selected class to clicked card
          card.classList.add('selected');
          // Save selected tour
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Make the API call to Google Places API
      const searchUrl = `https://places.googleapis.com/v1/places:searchText`;
      
      // Option 1: Try using fetch with the new Places API
      fetch(searchUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Goog-Api-Key': apiKey,
          'X-Goog-FieldMask': 'places.displayName,places.formattedAddress,places.id,places.location'
        },
        body: JSON.stringify({
          textQuery: fullAddress,
          locationBias: {
            circle: {
              center: {
                latitude: defaultLat,
                longitude: defaultLng
              },
              radius: defaultRadius
            }
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.places && data.places.length > 0) {
          const place = data.places[0];
          
          // Format and save location data
          const locationData = {
            address: place.formattedAddress || fullAddress,
            placeId: place.id,
            lat: place.location.latitude,
            lng: place.location.longitude
          };
          
          workflowData.userLocation = locationData;
          
          // Create and embed the map using place ID
          const mapContainer = wrapper.querySelector('#location-map');
          const mapFallback = wrapper.querySelector('#location-map-fallback');
          
          if (mapContainer) {
            try {
              // Use place ID for more accurate mapping
              const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
              
              mapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${mapUrl}"
                  allowfullscreen
                  onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                  onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (mapFallback) {
                const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                if (fallbackAddressEl) {
                  fallbackAddressEl.textContent = locationData.address;
                }
              }
            } catch (error) {
              console.error('Error embedding map:', error);
              if (mapContainer) mapContainer.style.display = 'none';
              if (mapFallback) mapFallback.style.display = 'block';
            }
          }
          
          // Move to the confirmation step
          goToStep('step-location-confirm');
        } else {
          // Fallback to Option 2 if Places API fails
          fallbackLocationSearch(fullAddress);
        }
      })
      .catch(error => {
        console.error('Error using Places API:', error);
        // Fallback to Option 2 if Places API fails
        fallbackLocationSearch(fullAddress);
      });
    }

    // Fallback location search using Geocoding API
    function fallbackLocationSearch(fullAddress) {
      // Option 2: Try using Geocoding API
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        // Enforce consistent width after everything is loaded
        setTimeout(enforceConsistentWidth, 100);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 100);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 5 (12 March 2025)

export const DirectionsWorkflowExtension5 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow5' || trace.payload?.name === 'ext_directionsWorkflow5',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Selection */
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
          max-height: 350px;
          overflow-y: auto;
          padding-right: 5px;
          margin-bottom: 15px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px; /* Fixed height for tour images */
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Scrollable Area -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
        
        // Make sure tour options are scrollable
        const tourOptions = wrapper.querySelector('.tour-options');
        if (tourOptions) {
          tourOptions.style.maxHeight = '350px';
          tourOptions.style.overflowY = 'auto';
        }
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey
    };

    // Add event listeners
    function setupEventListeners() {
      // Get all DOM elements we need
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Tour Selection
      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          // Remove selected class from all cards
          tourCards.forEach(c => c.classList.remove('selected'));
          // Add selected class to clicked card
          card.classList.add('selected');
          // Save selected tour
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          // Try to initialize autocomplete after step change
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        // Try to initialize autocomplete again after step change
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        
        // Wait for DOM to be fully ready
        setTimeout(() => {
          console.log('Starting autocomplete setup...');
          setupAutocomplete();
          enforceConsistentWidth();
        }, 1000);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 1000);
        };
        document.head.appendChild(script);
        
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 1000);
      });
  },
};


// YRS: DirectionsWorkflowExtension VERSION 6 - Claude Sonnet 3.7 (12 March 2025)

export const DirectionsWorkflowExtension6 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow6' || trace.payload?.name === 'ext_directionsWorkflow6',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // Optional: can come from data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      backgroundColor = '#ffffff',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with fixed width
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px';
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Workflow data object
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: null,
      nearestPickup: FIXED_PICKUP,
      apiKey: apiKey,
      accommodationName: "",
      addressPlace: null, // Store the selected place object
      addressAutocomplete: null, // Store the autocomplete element
      addressEntered: false // Flag to track if address is entered
    };

    // Load Google Maps API with the bootstrap loader for alpha version
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        document.head.appendChild(script);
        
        // Create a timeout to wait for the API to load
        let attempts = 0;
        const maxAttempts = 10;
        const checkInterval = 500; // 500ms
        
        const checkIfLoaded = () => {
          attempts++;
          if (window.google && window.google.maps) {
            // Try to load places library
            window.google.maps.importLibrary("places")
              .then(() => {
                console.log('Places library loaded successfully');
                resolve();
              })
              .catch(err => {
                console.warn('Error loading Places library:', err);
                if (attempts < maxAttempts) {
                  setTimeout(checkIfLoaded, checkInterval);
                } else {
                  reject(new Error('Failed to load Places library after multiple attempts'));
                }
              });
          } else if (attempts < maxAttempts) {
            setTimeout(checkIfLoaded, checkInterval);
          } else {
            reject(new Error('Google Maps API failed to load after multiple attempts'));
          }
        };
        
        // Start checking if the API is loaded
        setTimeout(checkIfLoaded, checkInterval);
      });
    };

    // Initialize Google Places Autocomplete for the address field only
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.log('Google Maps API not fully loaded, retrying in 500ms...');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      
      // Only set up autocomplete for the address field
      const addressContainer = wrapper.querySelector('#address-container');
      
      if (!addressContainer) {
        console.error('Address container element not found');
        return;
      }
      
      // Clear container first to prevent duplicates
      addressContainer.innerHTML = '';

      try {
        // Create the address autocomplete element
        const addressAutocomplete = new google.maps.places.PlaceAutocompleteElement();
        addressAutocomplete.id = 'address';
        addressAutocomplete.placeholder = 'e.g. 2005 Kalia Rd';
        addressAutocomplete.style.width = '100%';
        addressAutocomplete.style.height = '44px';
        addressAutocomplete.style.borderRadius = '8px';
        addressAutocomplete.componentRestrictions = { country: 'us' };
        addressAutocomplete.types = ['address'];
        addressContainer.appendChild(addressAutocomplete);
        
        // Store the autocomplete element
        workflowData.addressAutocomplete = addressAutocomplete;
        
        // Listen for address selection
        addressAutocomplete.addEventListener('gmp-placeselect', async ({ place }) => {
          await place.fetchFields({
            fields: ['displayName', 'formattedAddress', 'location', 'placeId'],
          });
          
          console.log('Address selected:', place.formattedAddress);
          
          // Store the place and set the addressEntered flag to true
          workflowData.addressPlace = place;
          workflowData.addressEntered = true;
          
          // Update user location data
          workflowData.userLocation = {
            address: place.formattedAddress,
            placeId: place.placeId,
            lat: place.location.lat,
            lng: place.location.lng
          };
          
          console.log('Address entered successfully. userLocation:', workflowData.userLocation);
        });
        
        console.log('Address autocomplete setup complete');
      } catch (error) {
        console.error('Error setting up autocomplete:', error);
        alert('There was an error setting up the address search. Please disable any ad blockers or try a different browser.');
      }
    }

    // HTML and CSS for the workflow
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
          max-height: 350px;
          overflow-y: auto;
          padding-right: 5px;
          margin-bottom: 15px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Fix for google place autocomplete elements */
        gmp-place-autocomplete {
          width: 100%;
          display: block;
          font-family: 'Inter', sans-serif;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3;
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px;
        }
        
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="e.g. Hyatt Hotel">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <div id="address-container" style="width: 100%;"></div>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required readonly>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map"></div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map"></div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add wrapper to container and container to element
    container.appendChild(wrapper);
    element.appendChild(container);

    // Apply animation and ensure scrollability
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
        const tourOptions = wrapper.querySelector('.tour-options');
        if (tourOptions) {
          tourOptions.style.maxHeight = '350px';
          tourOptions.style.overflowY = 'auto';
        }
      }, 100);
    }

    // Event listeners setup
    function setupEventListeners() {
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-name');

      // Store accommodation name when it changes
      if (accommodationInput) {
        accommodationInput.addEventListener('input', (e) => {
          workflowData.accommodationName = e.target.value;
        });
      }

      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          tourCards.forEach(c => c.classList.remove('selected'));
          card.classList.add('selected');
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setupAutocomplete(); // Ensure autocomplete is set up when moving to address step
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', cancelWorkflow);
      
      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });
      
      findPickupBtn.addEventListener('click', () => {
        // Check if the street address has been entered or selected
        if (workflowData.addressEntered && workflowData.userLocation) {
          goToStep('step-searching');
          setTimeout(() => {
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          }, 1000);
        }
        // If the autocomplete is there but no selection has been made, check for a value
        else if (workflowData.addressAutocomplete && workflowData.addressAutocomplete.value) {
          // Try to geocode the manually entered address
          geocodeAddress(workflowData.addressAutocomplete.value);
        } 
        else {
          alert('Please enter a street address');
        }
      });
      
      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });
      
      confirmLocationBtn.addEventListener('click', findPickupPoint);
      
      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });
      
      doneBtn.addEventListener('click', completeWorkflow);
      
      showRouteBtn.addEventListener('click', showRouteMap);
      
      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });
      
      routeDoneBtn.addEventListener('click', completeWorkflow);
    }

    // Navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => step.classList.remove('active'));
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        enforceConsistentWidth();
      }
    }

    // Geocode an address manually
    function geocodeAddress(address) {
      const city = wrapper.querySelector('#city')?.value || 'Honolulu';
      const fullAddress = `${address}, ${city}`;
      
      goToStep('step-searching');
      
      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Set the addressEntered flag to true since we've geocoded successfully
            workflowData.addressEntered = true;
            
            workflowData.userLocation = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error:', data.status);
            alert('Unable to find location. Please enter a valid address.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error geocoding address:', error);
          alert('Unable to find location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Update location map with place data
    function updateLocationMap(locationData) {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Find pickup point (always uses the fixed pickup)
    function findPickupPoint() {
      goToStep('step-finding-pickup');
      
      setTimeout(() => {
        // Update pickup info UI
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = FIXED_PICKUP.image;
        if (pickupTitle) pickupTitle.textContent = FIXED_PICKUP.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${FIXED_PICKUP.time}`;
        if (pickupDetails) pickupDetails.textContent = FIXED_PICKUP.instructions;

        goToStep('step-pickup-info');
      }, 1500);
    }

    // Show route map with transportation mode
    function showRouteMap() {
      const transportMode = wrapper.querySelector('#transport-mode')?.value || 'walking';
      
      if (!workflowData.userLocation) {
        alert('Unable to find your location. Please go back and try again.');
        return;
      }
      
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${FIXED_PICKUP.lat},${FIXED_PICKUP.lon}`;
      
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${transportMode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${transportMode.charAt(0).toUpperCase() + transportMode.slice(1)} route from ${workflowData.userLocation.address} to ${FIXED_PICKUP.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = FIXED_PICKUP.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat, 
        workflowData.userLocation.lng, 
        FIXED_PICKUP.lat, 
        FIXED_PICKUP.lon
      );
      
      const speeds = {
        walking: 4,     // km/h
        bicycling: 15,  // km/h
        driving: 40,    // km/h
        transit: 20     // km/h
      };
      
      const timeMinutes = Math.round((distance / (speeds[transportMode] || 4)) * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[transportMode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      goToStep('step-route');
      
      // Add listener for transport mode changes
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', showRouteMap);
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Calculate distance using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Earth's radius in km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    // Enforce consistent width
    function enforceConsistentWidth() {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Cancel workflow
    function cancelWorkflow() {
      // If integrated with Voiceflow, can signal cancellation
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = '<p>Workflow cancelled.</p>';
      }
    }

    // Complete workflow
    function completeWorkflow() {
      // Include accommodation name with location data
      const fullAddress = workflowData.accommodationName 
        ? `${workflowData.accommodationName}, ${workflowData.userLocation?.address || ''}`
        : workflowData.userLocation?.address || '';
      
      // If integrated with Voiceflow, can signal completion with data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: {
              selectedTour: workflowData.selectedTourName,
              userAddress: fullAddress,
              pickupPoint: FIXED_PICKUP.name,
              pickupTime: FIXED_PICKUP.time,
              pickupInstructions: FIXED_PICKUP.instructions,
              userLat: workflowData.userLocation?.lat || 0,
              userLon: workflowData.userLocation?.lng || 0,
              pickupLat: FIXED_PICKUP.lat,
              pickupLon: FIXED_PICKUP.lon
            }
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = `
          <div style="padding: 20px; text-align: center;">
            <h3>Thank you for completing the workflow!</h3>
            <p>Your pickup has been confirmed at ${FIXED_PICKUP.name} for ${workflowData.selectedTourName}.</p>
            <p>Pickup time: ${FIXED_PICKUP.time}</p>
          </div>
        `;
      }
    }

    // Initialize workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
        setupAutocomplete();
        enforceConsistentWidth();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        alert('There was an error loading the map service. Please disable any ad blockers or try a different browser.');
        setupEventListeners(); // Still set up event listeners even if Maps API fails
        enforceConsistentWidth();
      });
  },
};




// YRS: DirectionsWorkflowExtension VERSION 7 - Claude Sonnet 3.7 with Brave Search (13 March 2025)

export const DirectionsWorkflowExtension7 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow7' || trace.payload?.name === 'ext_directionsWorkflow7',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // Optional: can come from data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      backgroundColor = '#ffffff',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with fixed width
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px';
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Workflow data object
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: null,
      nearestPickup: FIXED_PICKUP,
      apiKey: apiKey,
      accommodationName: "",
      addressPlace: null, // Store the selected place object
      addressAutocomplete: null, // Store the autocomplete element
      addressEntered: false, // Flag to track if address is entered
      addressSelectionComplete: false // New flag to track when selection is fully processed
    };

    // Load Google Maps API with the bootstrap loader for alpha version
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        document.head.appendChild(script);
        
        // Create a timeout to wait for the API to load
        let attempts = 0;
        const maxAttempts = 10;
        const checkInterval = 500; // 500ms
        
        const checkIfLoaded = () => {
          attempts++;
          if (window.google && window.google.maps) {
            // Try to load places library
            window.google.maps.importLibrary("places")
              .then(() => {
                console.log('Places library loaded successfully');
                resolve();
              })
              .catch(err => {
                console.warn('Error loading Places library:', err);
                if (attempts < maxAttempts) {
                  setTimeout(checkIfLoaded, checkInterval);
                } else {
                  reject(new Error('Failed to load Places library after multiple attempts'));
                }
              });
          } else if (attempts < maxAttempts) {
            setTimeout(checkIfLoaded, checkInterval);
          } else {
            reject(new Error('Google Maps API failed to load after multiple attempts'));
          }
        };
        
        // Start checking if the API is loaded
        setTimeout(checkIfLoaded, checkInterval);
      });
    };

    // Initialize Google Places Autocomplete for the address field only
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Enhanced API check with more detailed logging
      if (!window.google) {
        console.error('Google object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps) {
        console.error('Google Maps object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps.places) {
        console.error('Google Maps Places object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps.places.PlaceAutocompleteElement) {
        console.error('PlaceAutocompleteElement not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      
      // Only set up autocomplete for the address field
      const addressContainer = wrapper.querySelector('#address-container');
      
      if (!addressContainer) {
        console.error('Address container element not found');
        return;
      }
      
      // Clear container first to prevent duplicates
      addressContainer.innerHTML = '';
      
      try {
        // Create the address autocomplete element
        const addressAutocomplete = new google.maps.places.PlaceAutocompleteElement({
          types: ['address'],
          componentRestrictions: { country: 'us' }
        });
        
        addressAutocomplete.id = 'address';
        addressAutocomplete.placeholder = 'e.g. 2005 Kalia Rd';
        addressAutocomplete.style.width = '100%';
        addressAutocomplete.style.height = '44px';
        addressAutocomplete.style.borderRadius = '8px';
        addressAutocomplete.style.transition = 'border-color 0.3s ease';
        
        addressContainer.appendChild(addressAutocomplete);
        
        // Store the autocomplete element
        workflowData.addressAutocomplete = addressAutocomplete;
        
        // Add a selection status indicator
        const selectionIndicator = document.createElement('div');
        selectionIndicator.id = 'address-selection-indicator';
        selectionIndicator.style.color = '#999';
        selectionIndicator.style.fontSize = '12px';
        selectionIndicator.style.marginTop = '4px';
        selectionIndicator.textContent = 'Type and select an address from the dropdown';
        addressContainer.appendChild(selectionIndicator);
        
        // Listen for address selection with enhanced logging
        addressAutocomplete.addEventListener('gmp-placeselect', async (event) => {
          console.log('PLACE SELECT EVENT TRIGGERED'); // Debug line
          
          try {
            const prediction = event.place;
            
            // Visual feedback - update the input style to show selection is in progress
            addressAutocomplete.style.borderColor = '#FFA500'; // Orange while processing
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Processing selection...';
              selectionIndicator.style.color = '#FFA500';
            }
            
            // Ensure we have a valid place object with necessary fields
            await prediction.fetchFields({
              fields: ['displayName', 'formattedAddress', 'location', 'placeId'],
            });
            
            console.log('Address selected:', prediction.formattedAddress);
            
            // Store the place and set the flags
            workflowData.addressPlace = prediction;
            workflowData.addressEntered = true;
            
            // Update user location data
            workflowData.userLocation = {
              address: prediction.formattedAddress,
              placeId: prediction.placeId,
              lat: prediction.location.lat,
              lng: prediction.location.lng
            };
            
            // Visual feedback - update the input style to show selection is complete
            addressAutocomplete.style.borderColor = primaryColor;
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Address selected: ' + prediction.formattedAddress;
              selectionIndicator.style.color = primaryColor;
            }
            
            // Set flag that selection is fully processed
            workflowData.addressSelectionComplete = true;
            
            console.log('Address entered successfully. userLocation:', workflowData.userLocation);
          } catch (error) {
            console.error('Error processing selected place:', error);
            
            // Visual feedback for error
            addressAutocomplete.style.borderColor = 'red';
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Error processing address. Please try again.';
              selectionIndicator.style.color = 'red';
            }
            
            // Reset flags on error
            workflowData.addressEntered = false;
            workflowData.addressSelectionComplete = false;
          }
        });
        
        // Listen for input changes to reset selection state when user modifies the input
        addressAutocomplete.addEventListener('input', () => {
          if (workflowData.addressSelectionComplete) {
            // Reset if the user changes the input after a successful selection
            workflowData.addressSelectionComplete = false;
            workflowData.addressEntered = false;
            
            // Reset visual indicators
            addressAutocomplete.style.borderColor = '';
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Type and select an address from the dropdown';
              selectionIndicator.style.color = '#999';
            }
          }
        });
        
        console.log('Address autocomplete setup complete');
      } catch (error) {
        console.error('Error setting up autocomplete:', error);
        alert('There was an error setting up the address search. Please disable any ad blockers or try a different browser.');
      }
    }

    // HTML and CSS for the workflow
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
          max-height: 350px;
          overflow-y: auto;
          padding-right: 5px;
          margin-bottom: 15px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Fix for google place autocomplete elements */
        gmp-place-autocomplete {
          width: 100%;
          display: block;
          font-family: 'Inter', sans-serif;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3;
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px;
        }
        
        img, iframe {
          max-width: 100%;
          border: 0;
        }
        
        /* New styles for address selection feedback */
        .address-selection-success {
          border-color: ${primaryColor} !important;
          box-shadow: 0 0 0 1px ${primaryColor};
        }
        
        .address-selection-processing {
          border-color: #FFA500 !important;
          box-shadow: 0 0 0 1px #FFA500;
        }
        
        .address-selection-error {
          border-color: #FF4136 !important;
          box-shadow: 0 0 0 1px #FF4136;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="e.g. Hyatt Hotel">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <div id="address-container" style="width: 100%;"></div>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required readonly>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map"></div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map"></div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add wrapper to container and container to element
    container.appendChild(wrapper);
    element.appendChild(container);

    // Apply animation and ensure scrollability
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
        const tourOptions = wrapper.querySelector('.tour-options');
        if (tourOptions) {
          tourOptions.style.maxHeight = '350px';
          tourOptions.style.overflowY = 'auto';
        }
      }, 100);
    }

    // Event listeners setup
    function setupEventListeners() {
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-name');

      // Store accommodation name when it changes
      if (accommodationInput) {
        accommodationInput.addEventListener('input', (e) => {
          workflowData.accommodationName = e.target.value;
        });
      }

      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          tourCards.forEach(c => c.classList.remove('selected'));
          card.classList.add('selected');
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setupAutocomplete(); // Ensure autocomplete is set up when moving to address step
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', cancelWorkflow);
      
      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });
      
      findPickupBtn.addEventListener('click', () => {
        // Debug log to check the current state
        console.log('Find Pickup button clicked. Current workflow data:', {
          addressEntered: workflowData.addressEntered,
          addressSelectionComplete: workflowData.addressSelectionComplete,
          userLocation: workflowData.userLocation,
          addressAutocomplete: workflowData.addressAutocomplete ? 
            { value: workflowData.addressAutocomplete.value } : null
        });
        
        // Check for a properly selected address - either selection is complete or we have valid location data
        if ((workflowData.addressSelectionComplete || workflowData.addressEntered) && workflowData.userLocation) {
          goToStep('step-searching');
          setTimeout(() => {
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          }, 1000);
        }
        // If there's a value in the input but no completed selection, try geocoding
        else if (workflowData.addressAutocomplete && workflowData.addressAutocomplete.value) {
          // Try to geocode the manually entered address
          geocodeAddress(workflowData.addressAutocomplete.value);
        } 
        else {
          alert('Please enter a street address and select it from the dropdown menu');
        }
      });
      
      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });
      
      confirmLocationBtn.addEventListener('click', findPickupPoint);
      
      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });
      
      doneBtn.addEventListener('click', completeWorkflow);
      
      showRouteBtn.addEventListener('click', showRouteMap);
      
      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });
      
      routeDoneBtn.addEventListener('click', completeWorkflow);
    }

    // Navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => step.classList.remove('active'));
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        enforceConsistentWidth();
      }
    }

    // Geocode an address manually
    function geocodeAddress(address) {
      const city = wrapper.querySelector('#city')?.value || 'Honolulu';
      const fullAddress = `${address}, ${city}`;
      
      goToStep('step-searching');
      
      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Set the addressEntered flag to true since we've geocoded successfully
            workflowData.addressEntered = true;
            workflowData.addressSelectionComplete = true;
            
            workflowData.userLocation = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            // Visual feedback if the autocomplete element is available
            if (workflowData.addressAutocomplete) {
              workflowData.addressAutocomplete.style.borderColor = primaryColor;
              
              const selectionIndicator = wrapper.querySelector('#address-selection-indicator');
              if (selectionIndicator) {
                selectionIndicator.textContent = 'Address found: ' + result.formatted_address;
                selectionIndicator.style.color = primaryColor;
              }
            }
            
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error:', data.status);
            alert('Unable to find location. Please enter a valid address.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error geocoding address:', error);
          alert('Unable to find location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Update location map with place data
    function updateLocationMap(locationData) {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Find pickup point (always uses the fixed pickup)
    function findPickupPoint() {
      goToStep('step-finding-pickup');
      
      setTimeout(() => {
        // Update pickup info UI
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = FIXED_PICKUP.image;
        if (pickupTitle) pickupTitle.textContent = FIXED_PICKUP.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${FIXED_PICKUP.time}`;
        if (pickupDetails) pickupDetails.textContent = FIXED_PICKUP.instructions;

        goToStep('step-pickup-info');
      }, 1500);
    }

    // Show route map with transportation mode
    function showRouteMap() {
      const transportMode = wrapper.querySelector('#transport-mode')?.value || 'walking';
      
      if (!workflowData.userLocation) {
        alert('Unable to find your location. Please go back and try again.');
        return;
      }
      
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${FIXED_PICKUP.lat},${FIXED_PICKUP.lon}`;
      
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${transportMode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${transportMode.charAt(0).toUpperCase() + transportMode.slice(1)} route from ${workflowData.userLocation.address} to ${FIXED_PICKUP.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = FIXED_PICKUP.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat, 
        workflowData.userLocation.lng, 
        FIXED_PICKUP.lat, 
        FIXED_PICKUP.lon
      );
      
      const speeds = {
        walking: 4,     // km/h
        bicycling: 15,  // km/h
        driving: 40,    // km/h
        transit: 20     // km/h
      };
      
      const timeMinutes = Math.round((distance / (speeds[transportMode] || 4)) * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[transportMode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      goToStep('step-route');
      
      // Add listener for transport mode changes
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', showRouteMap);
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Calculate distance using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Earth's radius in km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    // Enforce consistent width
    function enforceConsistentWidth() {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Cancel workflow
    function cancelWorkflow() {
      // If integrated with Voiceflow, can signal cancellation
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = '<p>Workflow cancelled.</p>';
      }
    }

    // Complete workflow
    function completeWorkflow() {
      // Include accommodation name with location data
      const fullAddress = workflowData.accommodationName 
        ? `${workflowData.accommodationName}, ${workflowData.userLocation?.address || ''}`
        : workflowData.userLocation?.address || '';
      
      // If integrated with Voiceflow, can signal completion with data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: {
              selectedTour: workflowData.selectedTourName,
              userAddress: fullAddress,
              pickupPoint: FIXED_PICKUP.name,
              pickupTime: FIXED_PICKUP.time,
              pickupInstructions: FIXED_PICKUP.instructions,
              userLat: workflowData.userLocation?.lat || 0,
              userLon: workflowData.userLocation?.lng || 0,
              pickupLat: FIXED_PICKUP.lat,
              pickupLon: FIXED_PICKUP.lon
            }
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = `
          <div style="padding: 20px; text-align: center;">
            <h3>Thank you for completing the workflow!</h3>
            <p>Your pickup has been confirmed at ${FIXED_PICKUP.name} for ${workflowData.selectedTourName}.</p>
            <p>Pickup time: ${FIXED_PICKUP.time}</p>
          </div>
        `;
      }
    }

    // Initialize workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
        setupAutocomplete();
        enforceConsistentWidth();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        alert('There was an error loading the map service. Please disable any ad blockers or try a different browser.');
        setupEventListeners(); // Still set up event listeners even if Maps API fails
        enforceConsistentWidth();
      });
  },
};


// YRS: DirectionsWorkflowExtension VERSION 8 - Claude Sonnet 3.7 with Brave Search + YouTube Transcript (13 March 2025)

export const DirectionsWorkflowExtension8 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow8' || trace.payload?.name === 'ext_directionsWorkflow8',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // Optional: can come from data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      backgroundColor = '#ffffff',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with fixed width
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px';
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Global state for debugging
    const DEBUG = true;

    // Workflow data object for state management
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: null,
      nearestPickup: FIXED_PICKUP,
      apiKey: apiKey,
      accommodationName: "",
      addressInputValue: "", // Store the raw input value
      autocompleteService: null, // Will store the autocomplete service instance
      placeService: null, // Will store the place service instance
      sessionToken: null, // For optimizing billing
      geocoder: null, // For geocoding fallback
      autocompleteInitialized: false, // Flag to track autocomplete initialization
      isAddressSelected: false, // Flag to track if an address was selected
      allowManualAddress: true, // Whether to allow geocoding of manually entered addresses
      debugMode: DEBUG
    };

    // Load Google Maps API with the bootstrap loader
    const loadGoogleMapsScript = () => {
      console.log('Loading Google Maps API...');
      
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Create the bootstrap loader script using Google's recommended approach
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMaps&v=weekly`;
        script.async = true;
        script.defer = true;
        
        // Define the callback function that will be called when the API is loaded
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Handle script loading error
        script.onerror = function() {
          console.error('Failed to load Google Maps API');
          reject(new Error('Google Maps API failed to load'));
        };
        
        // Add the script to the document
        document.head.appendChild(script);
      });
    };

    // Initialize Google Places Autocomplete
    function initializeAutocomplete() {
      if (workflowData.autocompleteInitialized) {
        console.log('Autocomplete already initialized, skipping');
        return;
      }
      
      const addressInput = wrapper.querySelector('#address-input');
      if (!addressInput) {
        console.error('Address input element not found');
        return;
      }
      
      try {
        // Create a new session token for optimizing billing
        workflowData.sessionToken = new google.maps.places.AutocompleteSessionToken();

        // Initialize the autocomplete service
        const autocomplete = new google.maps.places.Autocomplete(addressInput, {
          types: ['address'],
          componentRestrictions: { country: 'us' },
          fields: ['address_components', 'formatted_address', 'geometry', 'name', 'place_id'],
          sessionToken: workflowData.sessionToken
        });
        
        // Store autocomplete reference
        workflowData.autocompleteService = autocomplete;
        
        // Initialize PlacesService for detailed place information
        workflowData.placeService = new google.maps.places.PlacesService(document.createElement('div'));
        
        // Initialize Geocoder for manual address fallback
        workflowData.geocoder = new google.maps.Geocoder();
        
        // Set default bounds for better predictions
        const defaultBounds = new google.maps.LatLngBounds(
          new google.maps.LatLng(defaultLat - 0.1, defaultLng - 0.1),
          new google.maps.LatLng(defaultLat + 0.1, defaultLng + 0.1)
        );
        
        autocomplete.setBounds(defaultBounds);
        
        // Listen for the place_changed event
        autocomplete.addListener('place_changed', () => {
          console.log('Place changed event triggered');
          const place = autocomplete.getPlace();
          
          // Update UI to show address is being processed
          updateAddressStatus('processing');
          
          if (!place.geometry) {
            console.log('No geometry returned for the selected place');
            updateAddressStatus('error', 'Invalid address selected');
            workflowData.isAddressSelected = false;
            return;
          }
          
          console.log('Place selected:', place);
          
          // Store the place details
          workflowData.userLocation = {
            placeId: place.place_id,
            address: place.formatted_address,
            lat: place.geometry.location.lat(),
            lng: place.geometry.location.lng()
          };
          
          // Update flags to indicate address selection is complete
          workflowData.isAddressSelected = true;
          
          // Update UI to show address was successfully selected
          updateAddressStatus('success', place.formatted_address);
          
          if (workflowData.debugMode) {
            console.log('Updated workflowData:', {
              userLocation: workflowData.userLocation,
              isAddressSelected: workflowData.isAddressSelected
            });
          }
        });
        
        // Also track input changes to handle case where user changes the input after selection
        addressInput.addEventListener('input', function() {
          // Cache the current input value
          workflowData.addressInputValue = this.value;
          
          // If user modifies the input after selecting an address, we need to reset
          if (workflowData.isAddressSelected) {
            workflowData.isAddressSelected = false;
            updateAddressStatus('initial');
          }
        });
        
        // Prevent form submission on Enter key
        addressInput.addEventListener('keydown', function(e) {
          if (e.key === 'Enter') {
            e.preventDefault();
          }
        });
        
        workflowData.autocompleteInitialized = true;
        console.log('Places Autocomplete initialized successfully');
      } catch (error) {
        console.error('Error initializing Places Autocomplete:', error);
        // Display a user-friendly error message
        const errorMessage = document.createElement('div');
        errorMessage.className = 'autocomplete-error';
        errorMessage.textContent = 'Unable to initialize address search. Please try again later.';
        errorMessage.style.color = 'red';
        errorMessage.style.margin = '5px 0';
        
        const addressContainer = wrapper.querySelector('#address-container');
        if (addressContainer) {
          addressContainer.appendChild(errorMessage);
        }
      }
    }
    
    // Helper function to update address field UI based on selection status
    function updateAddressStatus(status, message = '') {
      const addressInput = wrapper.querySelector('#address-input');
      const statusIndicator = wrapper.querySelector('#address-status');
      
      if (!addressInput || !statusIndicator) return;
      
      // Reset previous status
      addressInput.classList.remove('address-success', 'address-processing', 'address-error');
      
      switch (status) {
        case 'success':
          addressInput.classList.add('address-success');
          statusIndicator.textContent = 'Address selected ✓';
          statusIndicator.style.color = primaryColor;
          break;
        case 'processing':
          addressInput.classList.add('address-processing');
          statusIndicator.textContent = 'Processing address...';
          statusIndicator.style.color = '#FFA500'; // Orange
          break;
        case 'error':
          addressInput.classList.add('address-error');
          statusIndicator.textContent = message || 'Error selecting address';
          statusIndicator.style.color = '#FF0000'; // Red
          break;
        case 'initial':
        default:
          statusIndicator.textContent = 'Type and select an address from the dropdown';
          statusIndicator.style.color = '#999999'; // Gray
          break;
      }
    }
    
    // Geocode a manually entered address (fallback when autocomplete selection fails)
    function geocodeAddress(address) {
      return new Promise((resolve, reject) => {
        if (!workflowData.geocoder) {
          workflowData.geocoder = new google.maps.Geocoder();
        }
        
        const city = wrapper.querySelector('#city')?.value || 'Honolulu';
        const fullAddress = `${address}, ${city}, HI, USA`;
        
        console.log('Geocoding address:', fullAddress);
        
        workflowData.geocoder.geocode({ address: fullAddress }, (results, status) => {
          if (status === 'OK' && results && results.length > 0) {
            const result = results[0];
            
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat(),
              lng: result.geometry.location.lng()
            };
            
            console.log('Geocoded location:', locationData);
            resolve(locationData);
          } else {
            console.error('Geocoding failed with status:', status);
            reject(new Error(`Geocoding failed: ${status}`));
          }
        });
      });
    }

    // HTML and CSS for the workflow
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
          max-height: 350px;
          overflow-y: auto;
          padding-right: 5px;
          margin-bottom: 15px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Address status classes */
        .address-success {
          border-color: ${primaryColor} !important;
          box-shadow: 0 0 0 1px ${primaryColor};
        }
        
        .address-processing {
          border-color: #FFA500 !important;
          box-shadow: 0 0 0 1px #FFA500;
        }
        
        .address-error {
          border-color: #FF0000 !important;
          box-shadow: 0 0 0 1px #FF0000;
        }
        
        .address-status {
          font-size: 12px;
          margin-top: 4px;
          color: #999;
          font-style: italic;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3;
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px;
        }
        
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="e.g. Hyatt Hotel">
              </div>
              
              <div class="form-group">
                <label for="address-input">Street Address*</label>
                <div id="address-container">
                  <input type="text" id="address-input" class="form-control" placeholder="Start typing your address">
                  <div id="address-status" class="address-status">Type and select an address from the dropdown</div>
                </div>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required readonly>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map"></div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map"></div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add wrapper to container and container to element
    container.appendChild(wrapper);
    element.appendChild(container);

    // Apply animation and ensure scrollability
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
        const tourOptions = wrapper.querySelector('.tour-options');
        if (tourOptions) {
          tourOptions.style.maxHeight = '350px';
          tourOptions.style.overflowY = 'auto';
        }
      }, 100);
    }

    // Event listeners setup
    function setupEventListeners() {
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address-input');

      // Store accommodation name when it changes
      if (accommodationInput) {
        accommodationInput.addEventListener('input', (e) => {
          workflowData.accommodationName = e.target.value;
        });
      }

      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          tourCards.forEach(c => c.classList.remove('selected'));
          card.classList.add('selected');
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          // Initialize Google Places only when needed
          if (!workflowData.autocompleteInitialized && window.google && window.google.maps) {
            initializeAutocomplete();
          }
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', cancelWorkflow);
      
      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });
      
      findPickupBtn.addEventListener('click', async () => {
        console.log('Find Pickup button clicked');
        console.log('Current state:', {
          isAddressSelected: workflowData.isAddressSelected,
          userLocation: workflowData.userLocation,
          addressInputValue: workflowData.addressInputValue || (addressInput ? addressInput.value : '')
        });
        
        // Case 1: We have a properly selected place from autocomplete
        if (workflowData.isAddressSelected && workflowData.userLocation) {
          console.log('Using selected address:', workflowData.userLocation);
          goToStep('step-searching');
          setTimeout(() => {
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          }, 1000);
          return;
        }
        
        // Case 2: Try to geocode the manually entered address if allowed
        const inputValue = workflowData.addressInputValue || (addressInput ? addressInput.value : '');
        if (inputValue && workflowData.allowManualAddress) {
          console.log('Attempting to geocode manually entered address:', inputValue);
          
          try {
            goToStep('step-searching');
            const locationData = await geocodeAddress(inputValue);
            
            // Update state with geocoded data
            workflowData.userLocation = locationData;
            workflowData.isAddressSelected = true;
            
            // Show confirmation map
            updateLocationMap(locationData);
            goToStep('step-location-confirm');
          } catch (error) {
            console.error('Geocoding failed:', error);
            goToStep('step-address');
            updateAddressStatus('error', 'Could not find this address. Please select from the dropdown.');
          }
          return;
        }
        
        // Case 3: No valid address
        updateAddressStatus('error', 'Please enter and select an address from the dropdown');
      });
      
      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });
      
      confirmLocationBtn.addEventListener('click', findPickupPoint);
      
      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });
      
      doneBtn.addEventListener('click', completeWorkflow);
      
      showRouteBtn.addEventListener('click', showRouteMap);
      
      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });
      
      routeDoneBtn.addEventListener('click', completeWorkflow);
    }

    // Navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => step.classList.remove('active'));
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Initialize autocomplete if going to address step
        if (stepId === 'step-address' && !workflowData.autocompleteInitialized && window.google && window.google.maps) {
          setTimeout(initializeAutocomplete, 100);
        }
      }
    }

    // Update location map with place data
    function updateLocationMap(locationData) {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Find pickup point (always uses the fixed pickup)
    function findPickupPoint() {
      goToStep('step-finding-pickup');
      
      setTimeout(() => {
        // Update pickup info UI
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = FIXED_PICKUP.image;
        if (pickupTitle) pickupTitle.textContent = FIXED_PICKUP.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${FIXED_PICKUP.time}`;
        if (pickupDetails) pickupDetails.textContent = FIXED_PICKUP.instructions;

        goToStep('step-pickup-info');
      }, 1500);
    }

    // Show route map with transportation mode
    function showRouteMap() {
      const transportMode = wrapper.querySelector('#transport-mode')?.value || 'walking';
      
      if (!workflowData.userLocation) {
        alert('Unable to find your location. Please go back and try again.');
        return;
      }
      
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${FIXED_PICKUP.lat},${FIXED_PICKUP.lon}`;
      
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${transportMode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${transportMode.charAt(0).toUpperCase() + transportMode.slice(1)} route from ${workflowData.userLocation.address} to ${FIXED_PICKUP.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = FIXED_PICKUP.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat, 
        workflowData.userLocation.lng, 
        FIXED_PICKUP.lat, 
        FIXED_PICKUP.lon
      );
      
      const speeds = {
        walking: 4,     // km/h
        bicycling: 15,  // km/h
        driving: 40,    // km/h
        transit: 20     // km/h
      };
      
      const timeMinutes = Math.round((distance / (speeds[transportMode] || 4)) * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[transportMode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      goToStep('step-route');
      
      // Add listener for transport mode changes
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', showRouteMap);
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Calculate distance using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Earth's radius in km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    // Cancel workflow
    function cancelWorkflow() {
      // If integrated with Voiceflow, can signal cancellation
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = '<p>Workflow cancelled.</p>';
      }
    }

    // Complete workflow
    function completeWorkflow() {
      // Include accommodation name with location data
      const fullAddress = workflowData.accommodationName 
        ? `${workflowData.accommodationName}, ${workflowData.userLocation?.address || ''}`
        : workflowData.userLocation?.address || '';
      
      // If integrated with Voiceflow, can signal completion with data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: {
              selectedTour: workflowData.selectedTourName,
              userAddress: fullAddress,
              pickupPoint: FIXED_PICKUP.name,
              pickupTime: FIXED_PICKUP.time,
              pickupInstructions: FIXED_PICKUP.instructions,
              userLat: workflowData.userLocation?.lat || 0,
              userLon: workflowData.userLocation?.lng || 0,
              pickupLat: FIXED_PICKUP.lat,
              pickupLon: FIXED_PICKUP.lon
            }
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = `
          <div style="padding: 20px; text-align: center;">
            <h3>Thank you for completing the workflow!</h3>
            <p>Your pickup has been confirmed at ${FIXED_PICKUP.name} for ${workflowData.selectedTourName}.</p>
            <p>Pickup time: ${FIXED_PICKUP.time}</p>
          </div>
        `;
      }
    }

    // Initialize workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        alert('There was an error loading the map service. Please disable any ad blockers or try a different browser.');
        setupEventListeners(); // Still set up event listeners even if Maps API fails
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 9 - Github CoPilot (13 March 2025)

export const DirectionsWorkflowExtension9 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow9' || trace.payload?.name === 'ext_directionsWorkflow9',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // Optional: can come from data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      backgroundColor = '#ffffff',
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with fixed width
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px';
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto';

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Workflow data object
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: null,
      nearestPickup: FIXED_PICKUP,
      apiKey: apiKey,
      accommodationName: "",
      addressPlace: null, // Store the selected place object
      addressAutocomplete: null, // Store the autocomplete element
      addressEntered: false, // Flag to track if address is entered
      addressSelectionComplete: false // New flag to track when selection is fully processed
    };

    // Load Google Maps API with the bootstrap loader for alpha version
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        document.head.appendChild(script);
        
        // Create a timeout to wait for the API to load
        let attempts = 0;
        const maxAttempts = 10;
        const checkInterval = 500; // 500ms
        
        const checkIfLoaded = () => {
          attempts++;
          if (window.google && window.google.maps) {
            // Try to load places library
            window.google.maps.importLibrary("places")
              .then(() => {
                console.log('Places library loaded successfully');
                resolve();
              })
              .catch(err => {
                console.warn('Error loading Places library:', err);
                if (attempts < maxAttempts) {
                  setTimeout(checkIfLoaded, checkInterval);
                } else {
                  reject(new Error('Failed to load Places library after multiple attempts'));
                }
              });
          } else if (attempts < maxAttempts) {
            setTimeout(checkIfLoaded, checkInterval);
          } else {
            reject(new Error('Google Maps API failed to load after multiple attempts'));
          }
        };
        
        // Start checking if the API is loaded
        setTimeout(checkIfLoaded, checkInterval);
      });
    };

    // Initialize Google Places Autocomplete for the address field only
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Enhanced API check with more detailed logging
      if (!window.google) {
        console.error('Google object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps) {
        console.error('Google Maps object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps.places) {
        console.error('Google Maps Places object not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      if (!window.google.maps.places.PlaceAutocompleteElement) {
        console.error('PlaceAutocompleteElement not available');
        setTimeout(setupAutocomplete, 500);
        return;
      }
      
      // Only set up autocomplete for the address field
      const addressContainer = wrapper.querySelector('#address-container');
      
      if (!addressContainer) {
        console.error('Address container element not found');
        return;
      }
      
      // Clear container first to prevent duplicates
      addressContainer.innerHTML = '';
      
      try {
        // Create the address autocomplete element
        const addressAutocomplete = new google.maps.places.PlaceAutocompleteElement({
          types: ['address'],
          componentRestrictions: { country: 'us' }
        });
        
        addressAutocomplete.id = 'address';
        addressAutocomplete.placeholder = 'e.g. 2005 Kalia Rd';
        addressAutocomplete.style.width = '100%';
        addressAutocomplete.style.height = '44px';
        addressAutocomplete.style.borderRadius = '8px';
        addressAutocomplete.style.transition = 'border-color 0.3s ease';
        
        addressContainer.appendChild(addressAutocomplete);
        
        // Store the autocomplete element
        workflowData.addressAutocomplete = addressAutocomplete;
        
        // Add a selection status indicator
        const selectionIndicator = document.createElement('div');
        selectionIndicator.id = 'address-selection-indicator';
        selectionIndicator.style.color = '#999';
        selectionIndicator.style.fontSize = '12px';
        selectionIndicator.style.marginTop = '4px';
        selectionIndicator.textContent = 'Type and select an address from the dropdown';
        addressContainer.appendChild(selectionIndicator);
        
        // Listen for address selection with enhanced logging
        addressAutocomplete.addEventListener('gmp-placeselect', async (event) => {
          console.log('PLACE SELECT EVENT TRIGGERED'); // Debug line
          
          try {
            const prediction = event.place;
            
            // Visual feedback - update the input style to show selection is in progress
            addressAutocomplete.style.borderColor = '#FFA500'; // Orange while processing
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Processing selection...';
              selectionIndicator.style.color = '#FFA500';
            }
            
            // Ensure we have a valid place object with necessary fields
            await prediction.fetchFields({
              fields: ['displayName', 'formattedAddress', 'location', 'placeId'],
            });
            
            console.log('Address selected:', prediction.formattedAddress);
            
            // Store the place and set the flags
            workflowData.addressPlace = prediction;
            workflowData.addressEntered = true;
            
            // Update user location data
            workflowData.userLocation = {
              address: prediction.formattedAddress,
              placeId: prediction.placeId,
              lat: prediction.location.lat,
              lng: prediction.location.lng
            };
            
            // Visual feedback - update the input style to show selection is complete
            addressAutocomplete.style.borderColor = primaryColor;
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Address selected: ' + prediction.formattedAddress;
              selectionIndicator.style.color = primaryColor;
            }
            
            // Set flag that selection is fully processed
            workflowData.addressSelectionComplete = true;
            
            console.log('Address entered successfully. userLocation:', workflowData.userLocation);
          } catch (error) {
            console.error('Error processing selected place:', error);
            
            // Visual feedback for error
            addressAutocomplete.style.borderColor = 'red';
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Error processing address. Please try again.';
              selectionIndicator.style.color = 'red';
            }
            
            // Reset flags on error
            workflowData.addressEntered = false;
            workflowData.addressSelectionComplete = false;
          }
        });
        
        // Listen for input changes to reset selection state when user modifies the input
        addressAutocomplete.addEventListener('input', () => {
          if (workflowData.addressSelectionComplete) {
            // Reset if the user changes the input after a successful selection
            workflowData.addressSelectionComplete = false;
            workflowData.addressEntered = false;
            
            // Reset visual indicators
            addressAutocomplete.style.borderColor = '';
            
            if (selectionIndicator) {
              selectionIndicator.textContent = 'Type and select an address from the dropdown';
              selectionIndicator.style.color = '#999';
            }
          }
        });
        
        console.log('Address autocomplete setup complete');
      } catch (error) {
        console.error('Error setting up autocomplete:', error);
        alert('There was an error setting up the address search. Please disable any ad blockers or try a different browser.');
      }
    }

    // HTML and CSS for the workflow
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        .tour-options {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-top: 10px;
          width: 100%;
          max-height: 350px;
          overflow-y: auto;
          padding-right: 5px;
          margin-bottom: 15px;
        }
        
        .tour-card {
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          cursor: pointer;
          transition: all 0.2s ease;
          width: 100%;
          box-sizing: border-box;
        }
        
        .tour-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(88, 124, 116, 0.2);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image {
          width: 100%;
          height: 150px;
          object-fit: cover;
          background-color: #f0f0f0;
        }
        
        .tour-info {
          padding: 12px;
        }
        
        .tour-info h3 {
          margin: 0 0 8px;
          font-size: 16px;
        }
        
        .tour-info p {
          margin: 0;
          font-size: 14px;
          color: #666;
        }
        
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Fix for google place autocomplete elements */
        gmp-place-autocomplete {
          width: 100%;
          display: block;
          font-family: 'Inter', sans-serif;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3;
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px;
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        h3, p, form, div.tour-options, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px;
        }
        
        img, iframe {
          max-width: 100%;
          border: 0;
        }
        
        /* New styles for address selection feedback */
        .address-selection-success {
          border-color: ${primaryColor} !important;
          box-shadow: 0 0 0 1px ${primaryColor};
        }
        
        .address-selection-processing {
          border-color: #FFA500 !important;
          box-shadow: 0 0 0 1px #FFA500;
        }
        
        .address-selection-error {
          border-color: #FF4136 !important;
          box-shadow: 0 0 0 1px #FF4136;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-options">
              ${toursData.map(tour => `
                <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}">
                  <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                  <div class="tour-info">
                    <h3>${tour.name}</h3>
                    <p>${tour.description}</p>
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="e.g. Hyatt Hotel">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <div id="address-container" style="width: 100%;"></div>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required readonly>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map"></div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map"></div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add wrapper to container and container to element
    container.appendChild(wrapper);
    element.appendChild(container);

    // Apply animation and ensure scrollability
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
        const tourOptions = wrapper.querySelector('.tour-options');
        if (tourOptions) {
          tourOptions.style.maxHeight = '350px';
          tourOptions.style.overflowY = 'auto';
        }
      }, 100);
    }

    // Event listeners setup
    function setupEventListeners() {
      const tourCards = wrapper.querySelectorAll('.tour-card');
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-name');

      // Store accommodation name when it changes
      if (accommodationInput) {
        accommodationInput.addEventListener('input', (e) => {
          workflowData.accommodationName = e.target.value;
        });
      }

      tourCards.forEach(card => {
        card.addEventListener('click', () => {
          tourCards.forEach(c => c.classList.remove('selected'));
          card.classList.add('selected');
          workflowData.selectedTour = card.dataset.tourId;
          workflowData.selectedTourName = card.dataset.tourName;
        });
      });

      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setupAutocomplete(); // Ensure autocomplete is set up when moving to address step
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', cancelWorkflow);
      
      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });
      
      findPickupBtn.addEventListener('click', () => {
  console.log('Find Pickup button clicked. Current workflow data:', {
    addressEntered: workflowData.addressEntered,
    addressSelectionComplete: workflowData.addressSelectionComplete,
    userLocation: workflowData.userLocation
  });
  
  // Force geocoding of whatever text is in the autocomplete field
  // This works around any issues with the selection events
  const addressElement = workflowData.addressAutocomplete;
  
  if (addressElement && addressElement.querySelector('input')) {
    // Access the actual input element inside the custom element
    const inputField = addressElement.querySelector('input');
    const addressText = inputField.value;
    
    if (addressText && addressText.trim() !== '') {
      // Always proceed with geocoding what's in the field
      geocodeAddress(addressText);
      return;
    }
  }
  
  // Fallback handling
  if (workflowData.userLocation) {
    goToStep('step-searching');
    setTimeout(() => {
      updateLocationMap(workflowData.userLocation);
      goToStep('step-location-confirm');
    }, 1000);
  } else {
    alert('Please enter a street address and select it from the dropdown menu');
  }
});


      
      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
      });
      
      confirmLocationBtn.addEventListener('click', findPickupPoint);
      
      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });
      
      doneBtn.addEventListener('click', completeWorkflow);
      
      showRouteBtn.addEventListener('click', showRouteMap);
      
      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });
      
      routeDoneBtn.addEventListener('click', completeWorkflow);
    }

    // Navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => step.classList.remove('active'));
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        enforceConsistentWidth();
      }
    }

    // Geocode an address manually
    function geocodeAddress(address) {
      const city = wrapper.querySelector('#city')?.value || 'Honolulu';
      const fullAddress = `${address}, ${city}`;
      
      goToStep('step-searching');
      
      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Set the addressEntered flag to true since we've geocoded successfully
            workflowData.addressEntered = true;
            workflowData.addressSelectionComplete = true;
            
            workflowData.userLocation = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            // Visual feedback if the autocomplete element is available
            if (workflowData.addressAutocomplete) {
              workflowData.addressAutocomplete.style.borderColor = primaryColor;
              
              const selectionIndicator = wrapper.querySelector('#address-selection-indicator');
              if (selectionIndicator) {
                selectionIndicator.textContent = 'Address found: ' + result.formatted_address;
                selectionIndicator.style.color = primaryColor;
              }
            }
            
            updateLocationMap(workflowData.userLocation);
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error:', data.status);
            alert('Unable to find location. Please enter a valid address.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error geocoding address:', error);
          alert('Unable to find location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Update location map with place data
    function updateLocationMap(locationData) {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Find pickup point (always uses the fixed pickup)
    function findPickupPoint() {
      goToStep('step-finding-pickup');
      
      setTimeout(() => {
        // Update pickup info UI
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = FIXED_PICKUP.image;
        if (pickupTitle) pickupTitle.textContent = FIXED_PICKUP.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${FIXED_PICKUP.time}`;
        if (pickupDetails) pickupDetails.textContent = FIXED_PICKUP.instructions;

        goToStep('step-pickup-info');
      }, 1500);
    }

    // Show route map with transportation mode
    function showRouteMap() {
      const transportMode = wrapper.querySelector('#transport-mode')?.value || 'walking';
      
      if (!workflowData.userLocation) {
        alert('Unable to find your location. Please go back and try again.');
        return;
      }
      
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${FIXED_PICKUP.lat},${FIXED_PICKUP.lon}`;
      
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${transportMode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${transportMode.charAt(0).toUpperCase() + transportMode.slice(1)} route from ${workflowData.userLocation.address} to ${FIXED_PICKUP.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = FIXED_PICKUP.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat, 
        workflowData.userLocation.lng, 
        FIXED_PICKUP.lat, 
        FIXED_PICKUP.lon
      );
      
      const speeds = {
        walking: 4,     // km/h
        bicycling: 15,  // km/h
        driving: 40,    // km/h
        transit: 20     // km/h
      };
      
      const timeMinutes = Math.round((distance / (speeds[transportMode] || 4)) * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[transportMode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      goToStep('step-route');
      
      // Add listener for transport mode changes
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', showRouteMap);
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Calculate distance using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 6371; // Earth's radius in km
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    // Enforce consistent width
    function enforceConsistentWidth() {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Cancel workflow
    function cancelWorkflow() {
      // If integrated with Voiceflow, can signal cancellation
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = '<p>Workflow cancelled.</p>';
      }
    }

    // Complete workflow
    function completeWorkflow() {
      // Include accommodation name with location data
      const fullAddress = workflowData.accommodationName 
        ? `${workflowData.accommodationName}, ${workflowData.userLocation?.address || ''}`
        : workflowData.userLocation?.address || '';
      
      // If integrated with Voiceflow, can signal completion with data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: {
              selectedTour: workflowData.selectedTourName,
              userAddress: fullAddress,
              pickupPoint: FIXED_PICKUP.name,
              pickupTime: FIXED_PICKUP.time,
              pickupInstructions: FIXED_PICKUP.instructions,
              userLat: workflowData.userLocation?.lat || 0,
              userLon: workflowData.userLocation?.lng || 0,
              pickupLat: FIXED_PICKUP.lat,
              pickupLon: FIXED_PICKUP.lon
            }
          }
        });
      } else {
        // Simple fallback
        element.innerHTML = `
          <div style="padding: 20px; text-align: center;">
            <h3>Thank you for completing the workflow!</h3>
            <p>Your pickup has been confirmed at ${FIXED_PICKUP.name} for ${workflowData.selectedTourName}.</p>
            <p>Pickup time: ${FIXED_PICKUP.time}</p>
          </div>
        `;
      }
    }

    // Initialize workflow
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
        setupAutocomplete();
        enforceConsistentWidth();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        alert('There was an error loading the map service. Please disable any ad blockers or try a different browser.');
        setupEventListeners(); // Still set up event listeners even if Maps API fails
        enforceConsistentWidth();
      });
  },
};

// YRS: HIER BEN IK GESTOPT MET DE AUTOCOMPLETE FEATURE WANT DIT WILDE MAAR NIET WERKEN
// DUS VANAF DE VOLGENDE EXTENSION VERSIONS GA IK VERDER MET DE REST VAN DE WORKFLOW
// IK VRAAG LATER AAN HET DEV TEAM HOE WE DE AUTOCOMPLETE KUNNEN TOEPASSEN ALS DE ANDERE DELEN
// VAN DEZE EXTENSION GOED STAAN

// YRS: DirectionsWorkflowExtension VERSION 10 - Claude Sonnet 3.7 (13 March 2025)

export const DirectionsWorkflowExtension10 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow10' || trace.payload?.name === 'ext_directionsWorkflow10',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
        }
        
        .step-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .step-indicator.active {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - NEW */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 15px 0;
        }
        
        .tour-carousel {
          display: flex;
          overflow: hidden;
          width: 100%;
          position: relative;
          border-radius: 10px;
        }
        
        .carousel-track {
          display: flex;
          transition: transform 0.3s ease-in-out;
          width: 100%;
        }
        
        .tour-card {
          min-width: 100%;
          flex: 0 0 100%;
          border-radius: 10px;
          overflow: hidden;
          transition: all 0.3s ease;
          position: relative;
          border: 2px solid transparent;
          box-sizing: border-box;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-card-inner {
          display: flex;
          flex-direction: column;
          height: 100%;
        }
        
        .tour-title-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          padding: 10px;
          background-color: rgba(0,0,0,0.6);
          color: white;
          text-align: center;
          font-weight: 600;
          z-index: 2;
        }
        
        .tour-image-container {
          position: relative;
          width: 100%;
          padding-top: 50%; /* 2:1 aspect ratio */
          overflow: hidden;
        }
        
        .tour-image {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px;
          background-color: #f8f9fa;
        }
        
        .tour-description {
          font-size: 14px;
          color: #444;
          margin-bottom: 12px;
          line-height: 1.4;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          text-align: center;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        .carousel-arrow {
          position: absolute;
          top: 50%;
          transform: translateY(-50%);
          width: 40px;
          height: 40px;
          background-color: rgba(255,255,255,0.8);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          transition: all 0.2s;
        }
        
        .carousel-arrow:hover {
          background-color: white;
          box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #333;
        }
        
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 10px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback,
        div.tour-carousel-container {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track -->
              <div class="tour-carousel">
                <div class="carousel-track">
                  ${toursData.map((tour, index) => `
                    <div class="tour-card" data-tour-id="${tour.id}" data-tour-name="${tour.name}" data-index="${index}">
                      <div class="tour-card-inner">
                        <div class="tour-title-overlay">${tour.name}</div>
                        <div class="tour-image-container">
                          <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                        </div>
                        <div class="tour-info">
                          <div class="tour-description">${tour.description}</div>
                          <button class="select-tour-btn" data-tour-id="${tour.id}">Select This Tour</button>
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
              
              <!-- Indicators -->
              <div class="carousel-indicators">
                ${toursData.map((_, index) => `
                  <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                `).join('')}
              </div>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator"></div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
                <div class="step-indicator active"></div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Carousel navigation
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const carouselTrack = wrapper.querySelector('.carousel-track');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      const selectButtons = wrapper.querySelectorAll('.select-tour-btn');
      const tourCards = wrapper.querySelectorAll('.tour-card');
      
      // Initialize carousel functionality
      function updateCarousel() {
        // Update track position
        if (carouselTrack) {
          carouselTrack.style.transform = `translateX(-${workflowData.currentCarouselIndex * 100}%)`;
        }
        
        // Update indicators
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
        });
      }
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // "Select This Tour" button clicks
      selectButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourCard = wrapper.querySelector(`.tour-card[data-tour-id="${tourId}"]`);
          
          // Clear previous selections
          tourCards.forEach(card => card.classList.remove('selected'));
          
          // Mark this card as selected
          if (tourCard) {
            tourCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourCard.dataset.tourName;
          }
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          // Try to initialize autocomplete after step change
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        // Try to initialize autocomplete again after step change
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        
        // Wait for DOM to be fully ready
        setTimeout(() => {
          console.log('Starting autocomplete setup...');
          setupAutocomplete();
          enforceConsistentWidth();
        }, 1000);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 1000);
        };
        document.head.appendChild(script);
        
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 1000);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 11 - Claude Sonnet 3.7 (13 March 2025)

export const DirectionsWorkflowExtension11 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow11' || trace.payload?.name === 'ext_directionsWorkflow11',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/NorthShore-Tour.jpg'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/Hawaii-Tour.jpg'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PearlHarbor-Tour.jpg'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - New numbered workflow indicators */
        .progress-container {
          display: flex;
          justify-content: center;
          margin-bottom: 20px;
          width: 100%;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #e0e0e0;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          position: relative;
          margin: 0 6px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.active:after,
        .workflow-step-indicator.completed:after {
          content: "";
          position: absolute;
          bottom: -12px;
          left: 50%;
          transform: translateX(-50%);
          width: 0;
          height: 0;
          border-left: 6px solid transparent;
          border-right: 6px solid transparent;
          border-bottom: 6px solid #fff;
          transform: translateX(-50%) rotate(180deg);
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):before {
          content: "";
          position: absolute;
          top: 50%;
          right: -14px;
          width: 14px;
          height: 2px;
          background-color: #e0e0e0;
          z-index: 0;
        }
        
        .workflow-step-indicator.completed:not(:last-child):before,
        .workflow-step-indicator.active:not(:last-child):before {
          background-color: ${primaryColor};
        }
        
        /* Tour indicator dots separate styling */
        .carousel-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Tour Carousel - NEW with multiple visible tours */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 15px 0;
          padding: 10px 0;
        }
        
        .tour-carousel {
          display: flex;
          overflow: hidden;
          width: 100%;
          position: relative;
          border-radius: 10px;
        }
        
        .carousel-track {
          display: flex;
          transition: transform 0.3s ease-in-out;
          width: 100%;
          padding: 10px 0;
        }
        
        .tour-card {
          min-width: 80%; /* Show partial view of adjacent cards */
          flex: 0 0 80%;
          border-radius: 10px;
          overflow: hidden;
          transition: all 0.3s ease;
          position: relative;
          border: 2px solid transparent;
          box-sizing: border-box;
          margin: 0 -20px; /* Negative margin to create overlapping effect */
          transform: scale(0.85);
          opacity: 0.7;
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .tour-card.active {
          opacity: 1;
          transform: scale(1);
          z-index: 2;
          box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-card-inner {
          display: flex;
          flex-direction: column;
          height: 100%;
        }
        
        .tour-title-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          padding: 10px;
          background-color: rgba(0,0,0,0.6);
          color: white;
          text-align: center;
          font-weight: 600;
          z-index: 2;
        }
        
        .tour-image-container {
          position: relative;
          width: 100%;
          padding-top: 50%; /* 2:1 aspect ratio */
          overflow: hidden;
        }
        
        .tour-image {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px;
          background-color: #f8f9fa;
        }
        
        .tour-description {
          font-size: 14px;
          color: #444;
          margin-bottom: 12px;
          line-height: 1.4;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          text-align: center;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        .carousel-arrow {
          position: absolute;
          top: 50%;
          transform: translateY(-50%);
          width: 40px;
          height: 40px;
          background-color: rgba(255,255,255,0.8);
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          transition: all 0.2s;
        }
        
        .carousel-arrow:hover {
          background-color: white;
          box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #333;
        }
        
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 10px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback,
        div.tour-carousel-container {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track -->
              <div class="tour-carousel">
                <div class="carousel-track">
                  ${toursData.map((tour, index) => `
                    <div class="tour-card ${index === 0 ? 'active' : ''}" data-tour-id="${tour.id}" data-tour-name="${tour.name}" data-index="${index}">
                      <div class="tour-card-inner">
                        <div class="tour-title-overlay">${tour.name}</div>
                        <div class="tour-image-container">
                          <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                        </div>
                        <div class="tour-info">
                          <div class="tour-description">${tour.description}</div>
                          <button class="select-tour-btn" data-tour-id="${tour.id}">Select This Tour</button>
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
              
              <!-- Indicators -->
              <div class="carousel-indicators">
                ${toursData.map((_, index) => `
                  <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                `).join('')}
              </div>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator completed">3</div>
                <div class="workflow-step-indicator active completed">4</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Carousel navigation
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const carouselTrack = wrapper.querySelector('.carousel-track');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      const selectButtons = wrapper.querySelectorAll('.select-tour-btn');
      const tourCards = wrapper.querySelectorAll('.tour-card');
      
      // Initialize carousel functionality
      function updateCarousel() {
        // Update track position
        if (carouselTrack) {
          // Center the active card (accounting for the partial view of adjacent cards)
          carouselTrack.style.transform = `translateX(calc(-${workflowData.currentCarouselIndex * 80}% + 10%))`;
        }
        
        // Update indicators
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
        });
        
        // Update active class on tour cards
        tourCards.forEach((card, index) => {
          card.classList.toggle('active', index === workflowData.currentCarouselIndex);
        });
      }
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // "Select This Tour" button clicks
      selectButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourCard = wrapper.querySelector(`.tour-card[data-tour-id="${tourId}"]`);
          
          // Clear previous selections
          tourCards.forEach(card => card.classList.remove('selected'));
          
          // Mark this card as selected
          if (tourCard) {
            tourCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourCard.dataset.tourName;
          }
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          // Try to initialize autocomplete after step change
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        // Try to initialize autocomplete again after step change
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        
        // Wait for DOM to be fully ready
        setTimeout(() => {
          console.log('Starting autocomplete setup...');
          setupAutocomplete();
          enforceConsistentWidth();
        }, 1000);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 1000);
        };
        document.head.appendChild(script);
        
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 1000);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 12 - Claude Sonnet 3.7 (13 March 2025)

export const DirectionsWorkflowExtension12 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow12' || trace.payload?.name === 'ext_directionsWorkflow12',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '600',
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 26px;
          height: 26px;
          border-radius: 50%;
          background-color: #e0e0e0;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 13px;
          position: relative;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):before {
          content: "";
          position: absolute;
          top: 50%;
          right: -6px;
          width: 6px;
          height: 2px;
          background-color: #e0e0e0;
          z-index: 0;
        }
        
        .workflow-step-indicator.completed:not(:last-child):before,
        .workflow-step-indicator.active:not(:last-child):before {
          background-color: ${primaryColor};
        }
        
        /* Tour indicator dots separate styling */
        .carousel-indicator {
          width: 10px;
          height: 10px;
          border-radius: 50%;
          background-color: #e0e0e0;
          margin: 0 5px;
          transition: all 0.2s ease;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Tour Carousel - Improved with side view */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px 0 30px;
        }
        
        .tour-carousel {
          display: flex;
          overflow: hidden;
          width: 100%;
          position: relative;
          border-radius: 10px;
        }
        
        .carousel-track {
          display: flex;
          transition: transform 0.3s ease-in-out;
          padding: 15px 0;
          margin: 0 -15%;
          width: 130%;
        }
        
        .tour-card {
          width: 60%;
          flex: 0 0 60%;
          border-radius: 10px;
          overflow: hidden;
          transition: all 0.3s ease;
          position: relative;
          border: 2px solid transparent;
          box-sizing: border-box;
          margin: 0 3px;
          transform: scale(0.8);
          opacity: 0.6;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .tour-card.active {
          opacity: 1;
          transform: scale(1);
          z-index: 2;
          box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-card-inner {
          display: flex;
          flex-direction: column;
          height: 100%;
        }
        
        .tour-title-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          padding: 10px;
          background-color: rgba(0,0,0,0.6);
          color: white;
          text-align: center;
          font-weight: 600;
          z-index: 2;
        }
        
        .tour-image-container {
          position: relative;
          width: 100%;
          padding-top: 100%; /* 1:1 aspect ratio */
          overflow: hidden;
        }
        
        .tour-image {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px;
          background-color: #f8f9fa;
        }
        
        .tour-description {
          font-size: 14px;
          color: #444;
          margin-bottom: 12px;
          line-height: 1.4;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          text-align: center;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel Arrows Styling */
        .carousel-arrow {
          position: absolute;
          top: 50%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.2s;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 10px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          margin-top: auto;
          padding-top: 20px;
          width: 100%;
        }
        
        .btn {
          padding: 12px 20px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container, div.btn-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback,
        div.tour-carousel-container {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track -->
              <div class="tour-carousel">
                <div class="carousel-track">
                  ${toursData.map((tour, index) => `
                    <div class="tour-card ${index === 0 ? 'active' : ''}" data-tour-id="${tour.id}" data-tour-name="${tour.name}" data-index="${index}">
                      <div class="tour-card-inner">
                        <div class="tour-image-container">
                          <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                        </div>
                        <div class="tour-info">
                          <h4>${tour.name}</h4>
                          <div class="tour-description">${tour.description}</div>
                          <button class="select-tour-btn" data-tour-id="${tour.id}">Select This Tour</button>
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator completed">3</div>
                <div class="workflow-step-indicator active completed">4</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Carousel navigation
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const carouselTrack = wrapper.querySelector('.carousel-track');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      const selectButtons = wrapper.querySelectorAll('.select-tour-btn');
      const tourCards = wrapper.querySelectorAll('.tour-card');
      
      // Initialize carousel functionality
      function updateCarousel() {
        // Update track position
        if (carouselTrack) {
          // Center the active card for the multi-card view
          carouselTrack.style.transform = `translateX(calc(-${workflowData.currentCarouselIndex * 60}% + 20%))`;
        }
        
        // Update indicators
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
        });
        
        // Update active class on tour cards
        tourCards.forEach((card, index) => {
          card.classList.toggle('active', index === workflowData.currentCarouselIndex);
        });
      }
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // "Select This Tour" button clicks
      selectButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourCard = wrapper.querySelector(`.tour-card[data-tour-id="${tourId}"]`);
          
          // Clear previous selections
          tourCards.forEach(card => card.classList.remove('selected'));
          
          // Mark this card as selected
          if (tourCard) {
            tourCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourCard.dataset.tourName;
          }
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          // Try to initialize autocomplete after step change
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        // Try to initialize autocomplete again after step change
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        // Enforce consistent width whenever changing steps
        enforceConsistentWidth();
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Function to enforce consistent width across all steps
    function enforceConsistentWidth() {
      // Get all workflow steps
      const steps = wrapper.querySelectorAll('.workflow-step');
      
      // Ensure all steps have the exact same width
      steps.forEach(step => {
        step.style.width = '100%';
        step.style.maxWidth = '100%';
      });
      
      // Ensure all content elements within steps have consistent width too
      const contentElements = wrapper.querySelectorAll('.workflow-step > *');
      contentElements.forEach(element => {
        element.style.maxWidth = '100%';
        element.style.boxSizing = 'border-box';
      });
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded, setting up event listeners');
        setupEventListeners();
        
        // Wait for DOM to be fully ready
        setTimeout(() => {
          console.log('Starting autocomplete setup...');
          setupAutocomplete();
          enforceConsistentWidth();
        }, 1000);
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 1000);
        };
        document.head.appendChild(script);
        
        // Enforce consistent width even if Maps API fails
        setTimeout(enforceConsistentWidth, 1000);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 13 - Claude Sonnet 3.7 (13 March 2025)

export const DirectionsWorkflowExtension13 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow13' || trace.payload?.name === 'ext_directionsWorkflow13',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '650', // Increased height to make room for buttons
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper
    wrapper.style.position = 'relative'; // For absolute positioning inside

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          position: relative;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
          position: relative;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #ddd;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):after {
          content: "";
          display: inline-block;
          position: absolute;
          width: 8px;
          height: 2px;
          background-color: #ddd;
          margin-left: 30px;
        }
        
        .workflow-step-indicator.completed:not(:last-child):after {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - Fixed, Static Approach */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px auto 50px;
          height: 360px; /* Fixed height to ensure visibility */
        }
        
        /* Main centered card */
        .center-card {
          position: absolute;
          width: 280px; /* Fixed width */
          max-width: 90%;
          height: 360px; /* Fixed height */
          left: 50%;
          top: 0;
          transform: translateX(-50%);
          z-index: 3;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          background-color: white;
          border: 1px solid #e0e0e0;
        }
        
        /* Side cards */
        .side-card-left,
        .side-card-right {
          position: absolute;
          width: 200px;
          height: 300px;
          border-radius: 12px;
          background-color: white;
          opacity: 0.65;
          overflow: hidden;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          z-index: 1;
          border: 1px solid #e0e0e0;
          top: 30px;
        }
        
        .side-card-left {
          left: 20px;
        }
        
        .side-card-right {
          right: 20px;
        }
        
        .tour-card {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .side-card-left .tour-image,
        .side-card-right .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-card {
          display: flex;
          flex-direction: column;
          height: 100%;
          border: 2px solid transparent;
          border-radius: 12px;
          overflow: hidden;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image-container {
          width: 100%;
          height: 200px; /* Reduce image height */
          overflow: hidden;
          position: relative;
        }
        
        .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        #carousel-loading {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100%;
          width: 100%;
          color: #666;
          font-size: 16px;
        }
        
        .tour-info {
          padding: 12px 15px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }
        
        .tour-info h4 {
          margin: 0 0 8px;
          font-size: 18px;
          color: #333;
        }
        
        .tour-description {
          font-size: 14px;
          color: #555;
          margin-bottom: 16px;
          flex: 1;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel navigation arrows */
        .carousel-arrow {
          position: absolute;
          top: 40%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.2s;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        /* Carousel indicators */
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 15px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
          cursor: pointer;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          width: 100%;
          position: absolute;
          bottom: 20px;
          left: 0;
          padding: 0 20px;
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
          min-width: 100px;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <!-- Pre-rendered static carousel structure -->
            <div class="tour-carousel-container">
              <div class="carousel-arrow prev">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <div class="center-card" id="active-tour-card">
                <div class="tour-card">
                  <div class="tour-image-container">
                    <img src="${toursData[0].image}" alt="${toursData[0].name}" class="tour-image">
                  </div>
                  <div class="tour-info">
                    <h4>${toursData[0].name}</h4>
                    <div class="tour-description">${toursData[0].description}</div>
                    <button class="select-tour-btn" data-tour-id="${toursData[0].id}" data-tour-name="${toursData[0].name}">Select This Tour</button>
                  </div>
                </div>
              </div>
              
              <div class="side-card-left">
                <img src="${toursData[toursData.length-1].image}" alt="Previous tour" class="tour-image">
              </div>
              
              <div class="side-card-right">
                <img src="${toursData[1].image}" alt="Next tour" class="tour-image">
              </div>
              
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators" id="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator completed">3</div>
                <div class="workflow-step-indicator active completed">4</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Initialize carousel with properly visible side cards
    function initializeCarousel() {
      console.log('Initializing carousel...');
      
      // Create carousel indicators
      const indicatorsContainer = document.getElementById('carousel-indicators');
      if (indicatorsContainer) {
        indicatorsContainer.innerHTML = '';
        toursData.forEach((_, index) => {
          const indicator = document.createElement('div');
          indicator.className = `carousel-indicator ${index === 0 ? 'active' : ''}`;
          indicator.dataset.index = index;
          indicator.addEventListener('click', () => {
            workflowData.currentCarouselIndex = index;
            updateCarouselView();
          });
          indicatorsContainer.appendChild(indicator);
        });
      }
      
      // Initialize the tour cards
      updateCarouselView();
      console.log('Carousel initialization complete');
    }
    
    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Track current carousel index
      workflowData.currentCarouselIndex = 0;
      
      // Get carousel navigation elements
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      const centerCard = wrapper.querySelector('#active-tour-card');
      const selectBtn = wrapper.querySelector('.select-tour-btn');
      
      // Previous tour button
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          navigateCarousel(-1);
        });
      }
      
      // Next tour button
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          navigateCarousel(1);
        });
      }
      
      // Tour selection button
      if (selectBtn) {
        selectBtn.addEventListener('click', () => {
          const tourId = selectBtn.getAttribute('data-tour-id');
          const tourName = selectBtn.getAttribute('data-tour-name');
          
          workflowData.selectedTour = tourId;
          workflowData.selectedTourName = tourName;
          
          if (centerCard) {
            centerCard.classList.add('selected');
          }
          
          console.log('Tour selected:', tourName);
        });
      }
      
      // Indicator clicks
      indicators.forEach(indicator => {
        indicator.addEventListener('click', () => {
          const index = parseInt(indicator.getAttribute('data-index'));
          if (!isNaN(index)) {
            workflowData.currentCarouselIndex = index;
            updateStaticCarousel();
          }
        });
      });
      
      // Initialize indicators
      updateIndicators();
      
      // Other buttons
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }
    
    // Navigate carousel left/right
    function navigateCarousel(direction) {
      const totalItems = toursData.length;
      let newIndex = workflowData.currentCarouselIndex + direction;
      
      // Handle wrapping around at edges
      if (newIndex < 0) {
        newIndex = totalItems - 1;
      } else if (newIndex >= totalItems) {
        newIndex = 0;
      }
      
      workflowData.currentCarouselIndex = newIndex;
      updateStaticCarousel();
    }
    
    // Update the carousel based on the current index
    function updateStaticCarousel() {
      const currentIndex = workflowData.currentCarouselIndex;
      const prevIndex = (currentIndex > 0) ? currentIndex - 1 : toursData.length - 1;
      const nextIndex = (currentIndex < toursData.length - 1) ? currentIndex + 1 : 0;
      
      const currentTour = toursData[currentIndex];
      const prevTour = toursData[prevIndex];
      const nextTour = toursData[nextIndex];
      
      // Update center card
      const centerCard = wrapper.querySelector('#active-tour-card');
      if (centerCard) {
        // Check if this tour is already selected
        if (currentTour.id === workflowData.selectedTour) {
          centerCard.classList.add('selected');
        } else {
          centerCard.classList.remove('selected');
        }
        
        // Update content
        centerCard.innerHTML = `
          <div class="tour-card">
            <div class="tour-image-container">
              <img src="${currentTour.image}" alt="${currentTour.name}" class="tour-image">
            </div>
            <div class="tour-info">
              <h4>${currentTour.name}</h4>
              <div class="tour-description">${currentTour.description}</div>
              <button class="select-tour-btn" data-tour-id="${currentTour.id}" data-tour-name="${currentTour.name}">Select This Tour</button>
            </div>
          </div>
        `;
        
        // Re-attach event listener to the select button
        const selectBtn = centerCard.querySelector('.select-tour-btn');
        if (selectBtn) {
          selectBtn.addEventListener('click', () => {
            const tourId = selectBtn.getAttribute('data-tour-id');
            const tourName = selectBtn.getAttribute('data-tour-name');
            
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourName;
            
            centerCard.classList.add('selected');
          });
        }
      }
      
      // Update side cards
      const leftCard = wrapper.querySelector('.side-card-left');
      const rightCard = wrapper.querySelector('.side-card-right');
      
      if (leftCard) {
        leftCard.innerHTML = `<img src="${prevTour.image}" alt="${prevTour.name}" class="tour-image">`;
      }
      
      if (rightCard) {
        rightCard.innerHTML = `<img src="${nextTour.image}" alt="${nextTour.name}" class="tour-image">`;
      }
      
      // Update indicators
      updateIndicators();
    }
    
    // Update carousel indicators
    function updateIndicators() {
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      console.log('Navigating to step:', stepId);
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Re-initialize carousel if going back to tour step
        if (stepId === 'step-tour') {
          console.log('Returning to tour step');
          // No need to do anything as carousel is static
        }
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      } else {
        console.error('Target step not found:', stepId);
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
        setupAutocomplete();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        };
        document.head.appendChild(script);
      });
  },
};

// YRS: DirectionsWorkflowExtension VERSION 14 - Claude Sonnet 3.7 (13 March 2025)

export const DirectionsWorkflowExtension14 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow14' || trace.payload?.name === 'ext_directionsWorkflow14',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '650', // Increased height to make room for buttons
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper
    wrapper.style.position = 'relative'; // For absolute positioning inside

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Circle Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Cultural Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_DukeStatue.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          position: relative;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
          position: relative;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #ddd;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):after {
          content: "";
          display: inline-block;
          position: absolute;
          width: 8px;
          height: 2px;
          background-color: #ddd;
          margin-left: 30px;
        }
        
        .workflow-step-indicator.completed:not(:last-child):after {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - Fixed, Static Approach */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px auto 50px;
          height: 360px; /* Fixed height to ensure visibility */
        }
        
        /* Main centered card */
        .center-card {
          position: absolute;
          width: 280px; /* Fixed width */
          max-width: 90%;
          height: 360px; /* Fixed height */
          left: 50%;
          top: 0;
          transform: translateX(-50%);
          z-index: 3;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          background-color: white;
          border: 1px solid #e0e0e0;
          transition: all 0.4s ease;
        }
        
        /* Side cards */
        .side-card-left,
        .side-card-right {
          position: absolute;
          width: 200px;
          height: 300px;
          border-radius: 12px;
          background-color: white;
          opacity: 0.65;
          overflow: hidden;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          z-index: 1;
          border: 1px solid #e0e0e0;
          top: 30px;
          transition: all 0.4s ease, opacity 0.4s ease;
        }
        
        .side-card-left {
          left: 20px;
        }
        
        .side-card-right {
          right: 20px;
        }
        
        .side-card-left.hidden,
        .side-card-right.hidden {
          opacity: 0;
          visibility: hidden;
        }
        
        .tour-card {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .side-card-left .tour-image,
        .side-card-right .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-card {
          display: flex;
          flex-direction: column;
          height: 100%;
          border: 2px solid transparent;
          border-radius: 12px;
          overflow: hidden;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image-container {
          width: 100%;
          height: 200px; /* Reduce image height */
          overflow: hidden;
          position: relative;
        }
        
        .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        #carousel-loading {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100%;
          width: 100%;
          color: #666;
          font-size: 16px;
        }
        
        .tour-info {
          padding: 12px 15px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }
        
        .tour-info h4 {
          margin: 0 0 8px;
          font-size: 18px;
          color: #333;
        }
        
        .tour-description {
          font-size: 14px;
          color: #555;
          margin-bottom: 16px;
          flex: 1;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel Arrows - with show/hide logic */
        .carousel-arrow {
          position: absolute;
          top: 40%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.3s ease;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow.hidden {
          display: none;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        /* Carousel indicators */
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 15px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
          cursor: pointer;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          width: 100%;
          position: absolute;
          bottom: 20px;
          left: 0;
          padding: 0 20px;
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
          min-width: 100px;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <!-- Pre-rendered static carousel structure -->
            <div class="tour-carousel-container">
              <div class="carousel-arrow prev hidden">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <div class="center-card" id="active-tour-card">
                <div class="tour-card">
                  <div class="tour-image-container">
                    <img src="${toursData[0].image}" alt="${toursData[0].name}" class="tour-image">
                  </div>
                  <div class="tour-info">
                    <h4>${toursData[0].name}</h4>
                    <div class="tour-description">${toursData[0].description}</div>
                    <button class="select-tour-btn" data-tour-id="${toursData[0].id}" data-tour-name="${toursData[0].name}">Select This Tour</button>
                  </div>
                </div>
              </div>
              
              <div class="side-card-left hidden">
                <!-- Left side card is hidden on first slide -->
              </div>
              
              <div class="side-card-right">
                <img src="${toursData[1].image}" alt="Next tour" class="tour-image">
              </div>
              
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators" id="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator completed">3</div>
                <div class="workflow-step-indicator active completed">4</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Initialize carousel with properly visible side cards
    function initializeCarousel() {
      console.log('Initializing carousel...');
      
      // Create carousel indicators
      const indicatorsContainer = document.getElementById('carousel-indicators');
      if (indicatorsContainer) {
        indicatorsContainer.innerHTML = '';
        toursData.forEach((_, index) => {
          const indicator = document.createElement('div');
          indicator.className = `carousel-indicator ${index === 0 ? 'active' : ''}`;
          indicator.dataset.index = index;
          indicator.addEventListener('click', () => {
            workflowData.currentCarouselIndex = index;
            updateCarouselView();
          });
          indicatorsContainer.appendChild(indicator);
        });
      }
      
      // Initialize the tour cards
      updateCarouselView();
      console.log('Carousel initialization complete');
    }
    
    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Track current carousel index
      workflowData.currentCarouselIndex = 0;
      
      // Get carousel navigation elements
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      const centerCard = wrapper.querySelector('#active-tour-card');
      const selectBtn = wrapper.querySelector('.select-tour-btn');
      
      // Previous tour button
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          navigateCarousel(-1);
        });
      }
      
      // Next tour button
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          navigateCarousel(1);
        });
      }
      
      // Tour selection button
      if (selectBtn) {
        selectBtn.addEventListener('click', () => {
          const tourId = selectBtn.getAttribute('data-tour-id');
          const tourName = selectBtn.getAttribute('data-tour-name');
          
          workflowData.selectedTour = tourId;
          workflowData.selectedTourName = tourName;
          
          if (centerCard) {
            centerCard.classList.add('selected');
          }
          
          console.log('Tour selected:', tourName);
        });
      }
      
      // Indicator clicks
      indicators.forEach(indicator => {
        indicator.addEventListener('click', () => {
          const index = parseInt(indicator.getAttribute('data-index'));
          if (!isNaN(index)) {
            workflowData.currentCarouselIndex = index;
            updateStaticCarousel();
          }
        });
      });
      
      // Initialize indicators
      updateIndicators();
      
      // Other buttons
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }
    
    // Navigate carousel left/right
    function navigateCarousel(direction) {
      const totalItems = toursData.length;
      let newIndex = workflowData.currentCarouselIndex + direction;
      
      // Check if the new index is within bounds
      if (newIndex < 0 || newIndex >= totalItems) {
        return; // Don't navigate past the ends
      }
      
      workflowData.currentCarouselIndex = newIndex;
      updateStaticCarousel();
    }
    
    // Update the carousel based on the current index
    function updateStaticCarousel() {
      const currentIndex = workflowData.currentCarouselIndex;
      const prevIndex = (currentIndex > 0) ? currentIndex - 1 : null;
      const nextIndex = (currentIndex < toursData.length - 1) ? currentIndex + 1 : null;
      
      const currentTour = toursData[currentIndex];
      const prevTour = prevIndex !== null ? toursData[prevIndex] : null;
      const nextTour = nextIndex !== null ? toursData[nextIndex] : null;
      
      // Update center card
      const centerCard = wrapper.querySelector('#active-tour-card');
      if (centerCard) {
        // Check if this tour is already selected
        if (currentTour.id === workflowData.selectedTour) {
          centerCard.classList.add('selected');
        } else {
          centerCard.classList.remove('selected');
        }
        
        // Update content with smooth animation
        centerCard.style.opacity = '0';
        setTimeout(() => {
          centerCard.innerHTML = `
            <div class="tour-card">
              <div class="tour-image-container">
                <img src="${currentTour.image}" alt="${currentTour.name}" class="tour-image">
              </div>
              <div class="tour-info">
                <h4>${currentTour.name}</h4>
                <div class="tour-description">${currentTour.description}</div>
                <button class="select-tour-btn" data-tour-id="${currentTour.id}" data-tour-name="${currentTour.name}">Select This Tour</button>
              </div>
            </div>
          `;
          
          // Fade back in
          centerCard.style.opacity = '1';
          
          // Re-attach event listener to the select button
          const selectBtn = centerCard.querySelector('.select-tour-btn');
          if (selectBtn) {
            selectBtn.addEventListener('click', () => {
              const tourId = selectBtn.getAttribute('data-tour-id');
              const tourName = selectBtn.getAttribute('data-tour-name');
              
              workflowData.selectedTour = tourId;
              workflowData.selectedTourName = tourName;
              
              centerCard.classList.add('selected');
            });
          }
        }, 200);
      }
      
      // Update left arrow - hide if at first slide
      const leftArrow = wrapper.querySelector('.carousel-arrow.prev');
      if (leftArrow) {
        if (currentIndex === 0) {
          leftArrow.classList.add('hidden');
        } else {
          leftArrow.classList.remove('hidden');
        }
      }
      
      // Update right arrow - hide if at last slide
      const rightArrow = wrapper.querySelector('.carousel-arrow.next');
      if (rightArrow) {
        if (currentIndex === toursData.length - 1) {
          rightArrow.classList.add('hidden');
        } else {
          rightArrow.classList.remove('hidden');
        }
      }
      
      // Update side cards
      const leftCard = wrapper.querySelector('.side-card-left');
      const rightCard = wrapper.querySelector('.side-card-right');
      
      // Left card - hide if at first slide
      if (leftCard) {
        if (prevTour) {
          leftCard.innerHTML = `<img src="${prevTour.image}" alt="${prevTour.name}" class="tour-image">`;
          leftCard.classList.remove('hidden');
        } else {
          leftCard.classList.add('hidden');
        }
      }
      
      // Right card - hide if at last slide
      if (rightCard) {
        if (nextTour) {
          rightCard.innerHTML = `<img src="${nextTour.image}" alt="${nextTour.name}" class="tour-image">`;
          rightCard.classList.remove('hidden');
        } else {
          rightCard.classList.add('hidden');
        }
      }
      
      // Update indicators
      updateIndicators();
    }
    
    // Update carousel indicators
    function updateIndicators() {
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      console.log('Navigating to step:', stepId);
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Re-initialize carousel if going back to tour step
        if (stepId === 'step-tour') {
          console.log('Returning to tour step');
          // No need to do anything as carousel is static
        }
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      } else {
        console.error('Target step not found:', stepId);
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupEventListeners();
        setupAutocomplete();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Still set up event listeners even if Maps API fails to load
        setupEventListeners();
        
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        };
        document.head.appendChild(script);
      });
  },
};

// YRS: VERSION 15 (WORKS!!!) (13 March 2025)

export const DirectionsWorkflowExtension15 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow15' || trace.payload?.name === 'ext_directionsWorkflow15',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '650', // Increased height to make room for buttons
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper
    wrapper.style.position = 'relative'; // For absolute positioning inside

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input fields
      const accommodationInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      console.log('Address input found:', !!addressInput);
      
      // Check if DOM elements exist
      if (!accommodationInput && !addressInput) {
        console.error('Required inputs not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on accommodation field
      if (accommodationInput) {
        console.log('Creating accommodation autocomplete');
        try {
          const accommodationOptions = {
            types: ['establishment'],  // Only use one type - don't mix types
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'name', 'place_id']
          };
          
          const autocompleteAccommodation = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
          
          // When a place is selected
          autocompleteAccommodation.addListener('place_changed', function() {
            const place = autocompleteAccommodation.getPlace();
            
            if (!place.geometry) {
              console.error('No place details available for accommodation selection');
              return;
            }
            
            // Fill address field with selected place's address
            if (addressInput) {
              let streetNumber = '';
              let route = '';
              
              // If place has address_components, extract street address
              if (place.address_components) {
                for (const component of place.address_components) {
                  const type = component.types[0];
                  if (type === 'street_number') {
                    streetNumber = component.long_name;
                  } else if (type === 'route') {
                    route = component.long_name;
                  }
                }
              }
              
              // Set address value
              if (streetNumber && route) {
                addressInput.value = `${streetNumber} ${route}`;
              } else if (route) {
                addressInput.value = route;
              } else {
                // Fall back to formatted address
                const formattedAddress = place.formatted_address || '';
                const commaIndex = formattedAddress.indexOf(',');
                if (commaIndex > 0) {
                  addressInput.value = formattedAddress.substring(0, commaIndex);
                } else {
                  addressInput.value = formattedAddress;
                }
              }
            }
          });
          
          console.log('Accommodation autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing accommodation autocomplete:', error);
        }
      }
      
      // Initialize autocomplete for address field (as a separate instance)
      if (addressInput) {
        console.log('Creating address autocomplete');
        try {
          const addressOptions = {
            types: ['address'],  // Only use one type
            componentRestrictions: {country: 'us'},
            fields: ['formatted_address', 'geometry', 'place_id']
          };
          
          new google.maps.places.Autocomplete(addressInput, addressOptions);
          console.log('Address autocomplete successfully initialized');
        } catch (error) {
          console.error('Error initializing address autocomplete:', error);
        }
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          position: relative;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
          position: relative;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #ddd;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):after {
          content: "";
          display: inline-block;
          position: absolute;
          width: 8px;
          height: 2px;
          background-color: #ddd;
          margin-left: 30px;
        }
        
        .workflow-step-indicator.completed:not(:last-child):after {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - Smooth sliding with fixed card positions */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px auto 50px;
          height: 360px; /* Fixed height to ensure visibility */
          overflow: visible;
        }
        
        /* Carousel track for smooth sliding */
        .carousel-track {
          display: flex;
          position: absolute;
          left: 0;
          right: 0;
          transition: transform 0.4s ease;
          width: 100%;
          height: 100%;
        }
        
        /* Main card styling */
        .tour-card {
          position: absolute;
          width: 280px;
          height: 360px;
          border-radius: 12px;
          overflow: hidden;
          transition: all 0.4s ease;
          transform-origin: center center;
          box-shadow: 0 4px 10px rgba(0,0,0,0.1);
          border: 2px solid transparent;
          background-color: white;
        }
        
        /* Center card */
        .tour-card.center {
          left: 50%;
          transform: translateX(-50%) scale(1);
          opacity: 1;
          z-index: 3;
        }
        
        /* Left card */
        .tour-card.left {
          left: 50%;
          transform: translateX(calc(-50% - 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Right card */
        .tour-card.right {
          left: 50%;
          transform: translateX(calc(-50% + 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Hide cards that are outside visible range */
        .tour-card.off-left {
          left: 50%;
          transform: translateX(calc(-50% - 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.off-right {
          left: 50%;
          transform: translateX(calc(-50% + 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image-container {
          width: 100%;
          height: 200px; /* Height for image */
          overflow: hidden;
          position: relative;
        }
        
        .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px 15px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }
        
        .tour-info h4 {
          margin: 0 0 8px;
          font-size: 18px;
          color: #333;
        }
        
        .tour-description {
          font-size: 14px;
          color: #555;
          margin-bottom: 16px;
          flex: 1;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel Arrows - with show/hide logic */
        .carousel-arrow {
          position: absolute;
          top: 40%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.3s ease;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow.hidden {
          display: none;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        /* Carousel indicators */
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 15px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
          cursor: pointer;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        /* Map Containers */
        .map-container, .route-map-container {
          margin-top: 15px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          width: 100%;
          position: absolute;
          bottom: 20px;
          left: 0;
          padding: 0 20px;
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
          min-width: 100px;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <!-- Carousel with smooth sliding transitions -->
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev hidden">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track with cards -->
              <div class="carousel-track" id="carousel-track">
                <!-- Cards will be dynamically generated here -->
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators" id="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- Step 2: Address Input -->
          <div class="workflow-step" id="step-address">
            <h3>Enter Your Accommodation</h3>
            <p>Please enter the address where you're staying:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group">
                <label for="accommodation-name">Accommodation Name (optional)</label>
                <input type="text" id="accommodation-name" class="form-control" placeholder="Hotel name or Airbnb">
              </div>
              
              <div class="form-group">
                <label for="address">Street Address*</label>
                <input type="text" id="address" class="form-control" placeholder="e.g. 2005 Kalia Rd" required>
              </div>
              
              <div class="form-group">
                <label for="city">City*</label>
                <input type="text" id="city" class="form-control" value="Honolulu" required>
              </div>
            </form>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
            </div>
          </div>
          
          <!-- Step 3: Searching Animation -->
          <div class="workflow-step" id="step-searching">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Searching for location...</div>
            </div>
          </div>
          
          <!-- Step 4: Location Confirmation -->
          <div class="workflow-step" id="step-location-confirm">
            <h3>Confirm Your Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
                <div class="workflow-step-indicator">4</div>
              </div>
            </div>
            
            <div class="map-container" id="location-map">
              <!-- Map will be inserted here by JavaScript -->
            </div>
            <div class="map-fallback" id="location-map-fallback">
              <p>Unable to display map.</p>
              <p id="fallback-address"></p>
            </div>
            
            <p class="confirmation-text">Is this the correct location?</p>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
              <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 5: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 6: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator completed">3</div>
                <div class="workflow-step-indicator active completed">4</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 7: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="form-group">
              <label for="transport-mode">Transportation Mode:</label>
              <select id="transport-mode" class="form-control">
                <option value="walking" selected>Walking</option>
                <option value="bicycling">Bicycling</option>
                <option value="driving">Driving</option>
                <option value="transit">Public Transit</option>
              </select>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <p class="walk-time" id="route-time">Calculating travel time...</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0 // Track current carousel position
    };

    // Function to create and position carousel cards
    function createCarouselCards() {
      const carouselTrack = wrapper.querySelector('#carousel-track');
      if (!carouselTrack) return;
      
      // Clear existing content
      carouselTrack.innerHTML = '';
      
      // Create all tour cards with proper positioning classes
      toursData.forEach((tour, index) => {
        const card = document.createElement('div');
        
        // Determine position class based on index relative to current index
        let positionClass = '';
        if (index === workflowData.currentCarouselIndex) {
          positionClass = 'center';
        } else if (index === workflowData.currentCarouselIndex - 1) {
          positionClass = 'left';
        } else if (index === workflowData.currentCarouselIndex + 1) {
          positionClass = 'right';
        } else if (index < workflowData.currentCarouselIndex) {
          positionClass = 'off-left';
        } else {
          positionClass = 'off-right';
        }
        
        card.className = `tour-card ${positionClass}`;
        card.dataset.tourId = tour.id;
        card.dataset.tourName = tour.name;
        card.dataset.index = index;
        
        // Add selected class if this is the selected tour
        if (tour.id === workflowData.selectedTour) {
          card.classList.add('selected');
        }
        
        card.innerHTML = `
          <div class="tour-image-container">
            <img src="${tour.image}" alt="${tour.name}" class="tour-image">
          </div>
          <div class="tour-info">
            <h4>${tour.name}</h4>
            <div class="tour-description">${tour.description}</div>
            <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
          </div>
        `;
        
        carouselTrack.appendChild(card);
      });
      
      // Add event listeners to all select buttons
      const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
      selectButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourName = e.target.dataset.tourName;
          
          // Clear previous selections
          const cards = carouselTrack.querySelectorAll('.tour-card');
          cards.forEach(card => card.classList.remove('selected'));
          
          // Mark the parent card as selected
          const parentCard = e.target.closest('.tour-card');
          if (parentCard) {
            parentCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourName;
          }
        });
      });
    }

    // Function to update carousel display
    function updateCarousel() {
      // Update card positions based on current index
      const cards = wrapper.querySelectorAll('.tour-card');
      
      cards.forEach((card, index) => {
        // Remove all position classes
        card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
        
        // Add appropriate position class
        if (index === workflowData.currentCarouselIndex) {
          card.classList.add('center');
        } else if (index === workflowData.currentCarouselIndex - 1) {
          card.classList.add('left');
        } else if (index === workflowData.currentCarouselIndex + 1) {
          card.classList.add('right');
        } else if (index < workflowData.currentCarouselIndex) {
          card.classList.add('off-left');
        } else {
          card.classList.add('off-right');
        }
      });
      
      // Update indicators
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
      });
      
      // Update arrow visibility
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      
      if (prevArrow) {
        prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
      }
      
      if (nextArrow) {
        nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
      }
    }

    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Create initial carousel cards
      createCarouselCards();
      
      // Get carousel navigation elements
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const editAddressBtn = wrapper.querySelector('#edit-address-btn');
      const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');

      // Button event listeners
      nextBtn.addEventListener('click', () => {
        if (workflowData.selectedTour) {
          goToStep('step-address');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        } else {
          alert('Please select a tour first.');
        }
      });

      cancelBtn.addEventListener('click', () => {
        cancelWorkflow();
      });

      backToTourBtn.addEventListener('click', () => {
        goToStep('step-tour');
      });

      findPickupBtn.addEventListener('click', () => {
        searchLocation();
      });

      editAddressBtn.addEventListener('click', () => {
        goToStep('step-address');
        setTimeout(() => {
          setupAutocomplete();
        }, 500);
      });

      confirmLocationBtn.addEventListener('click', () => {
        findPickupPoint();
      });

      backToConfirmBtn.addEventListener('click', () => {
        goToStep('step-location-confirm');
      });

      doneBtn.addEventListener('click', () => {
        completeWorkflow();
      });

      showRouteBtn.addEventListener('click', () => {
        showRouteMap();
      });

      backToPickupBtn.addEventListener('click', () => {
        goToStep('step-pickup-info');
      });

      routeDoneBtn.addEventListener('click', () => {
        completeWorkflow();
      });
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      console.log('Navigating to step:', stepId);
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address') {
          console.log('Re-initializing autocomplete on step change to address input');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
          }, 300);
        }
      } else {
        console.error('Target step not found:', stepId);
      }
    }

    // Function to search for a location using the Google Places API
    function searchLocation() {
      const accommodationNameInput = wrapper.querySelector('#accommodation-name');
      const addressInput = wrapper.querySelector('#address');
      const cityInput = wrapper.querySelector('#city');

      const accommodationName = accommodationNameInput ? accommodationNameInput.value : '';
      const address = addressInput ? addressInput.value : '';
      const city = cityInput ? cityInput.value : 'Honolulu';

      if (!address) {
        alert('Please enter a street address');
        return;
      }

      // Show loading indicator
      goToStep('step-searching');

      // Format the full address for the API call
      const fullAddress = accommodationName ? 
        `${accommodationName}, ${address}, ${city}` : 
        `${address}, ${city}`;

      // Try first using the new Places API
      geocodeAddress(fullAddress);
    }

    // Geocode an address using the Geocoding API (more reliable than Places API)
    function geocodeAddress(fullAddress) {
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Format and save location data
            const locationData = {
              address: result.formatted_address,
              placeId: result.place_id,
              lat: result.geometry.location.lat,
              lng: result.geometry.location.lng
            };
            
            workflowData.userLocation = locationData;
            
            // Create and embed the map using place ID
            const mapContainer = wrapper.querySelector('#location-map');
            const mapFallback = wrapper.querySelector('#location-map-fallback');
            
            if (mapContainer) {
              try {
                // Use place ID for more accurate mapping
                const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                
                mapContainer.innerHTML = `
                  <iframe
                    width="100%"
                    height="100%"
                    frameborder="0"
                    style="border:0"
                    src="${mapUrl}"
                    allowfullscreen
                    onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                    onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                  ></iframe>
                `;
                
                // Fallback in case iframe doesn't load
                if (mapFallback) {
                  const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                  if (fallbackAddressEl) {
                    fallbackAddressEl.textContent = locationData.address;
                  }
                }
              } catch (error) {
                console.error('Error embedding map:', error);
                if (mapContainer) mapContainer.style.display = 'none';
                if (mapFallback) mapFallback.style.display = 'block';
              }
            }
            
            // Move to the confirmation step
            goToStep('step-location-confirm');
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            goToStep('step-address');
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          goToStep('step-address');
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
              onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');
      const routeTime = wrapper.querySelector('#route-time');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Different speed estimates for different modes (km/h)
      const speeds = {
        walking: 4,        // 4 km/h average walking speed
        bicycling: 15,     // 15 km/h casual biking
        driving: 40,       // 40 km/h urban driving with traffic
        transit: 20        // 20 km/h average transit speed including wait times
      };
      
      const speedKmPerHour = speeds[mode] || speeds.walking;
      const timeInHours = distance / speedKmPerHour;
      const timeMinutes = Math.round(timeInHours * 60);
      
      const modeDisplay = {
        walking: 'Walking',
        bicycling: 'Biking',
        driving: 'Driving',
        transit: 'Transit'
      };
      
      if (routeTime) {
        routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
      }

      // Go to the route step
      goToStep('step-route');
      
      // Add event listener for mode change - if not already added
      const transportModeElement = wrapper.querySelector('#transport-mode');
      if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
        transportModeElement.addEventListener('change', function() {
          showRouteMap(); // Refresh the route with the new mode
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

        // Setup event listeners immediately before API loading
        setupEventListeners();

        // Initialize the workflow with robust handling
        loadGoogleMapsScript()
          .then(() => {
            console.log('Google Maps API loaded successfully');
            setupAutocomplete();
          })
          .catch(error => {
            console.error('Failed to load Google Maps API:', error);
            // Add direct script tag as a desperate fallback (no callback)
            console.log('Adding direct script tag as fallback after API load failure');
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
            script.onload = () => {
              console.log('Fallback Google Maps API loaded');
              setTimeout(() => {
                setupAutocomplete();
              }, 500);
            };
            document.head.appendChild(script);
          });
      },
    };

    // YRS: VERSION 16 (13 March 2025)

    export const DirectionsWorkflowExtension16 = {
      name: 'DirectionsWorkflow',
      type: 'response',
      match: ({ trace }) =>
        trace.type === 'ext_directionsWorkflow16' || trace.payload?.name === 'ext_directionsWorkflow16',
      render: ({ trace, element }) => {
        // Extract properties from the payload
        const { 
          apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
          pickupPoints = [], // This will come from your data
          workflowTitle = 'Find Your Pickup Location',
          height = '650', // Increased height to make room for buttons
          padding = '15px',
          delay = 0,
          backgroundColor = '#ffffff',
          maxWidth = '500px', // Set consistent max-width
          // Branding colors
          primaryColor = '#587C74',
          secondaryColor = '#3B534E',
          // Border options
          borderWidth = '2px',
          borderColor = '#587C74',
          borderStyle = 'solid',
          borderRadius = '12px',
          // Shadow and effects
          shadowColor = 'rgba(88, 124, 116, 0.2)',
          shadowSize = '8px',
          // Animation
          animateIn = true,
          // Default location bias
          defaultLat = 21.315603,
          defaultLng = -157.858093,
          defaultRadius = 30000.0
        } = trace.payload || {};
    
        // Default pickup points if none are provided
        const defaultPickupPoints = [
          { 
            name: "Aloha Tower trolley stop", 
            lat: 21.30693198561091, 
            lon: -157.8663891824468, 
            instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
            time: "6:45 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
            mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
          },
          { 
            name: "Ala Moana Hotel - curbside on Mahukona Street", 
            lat: 21.290298342118497, 
            lon: -157.84001436219415, 
            instructions: "Meet us near the curbside at Mahukona St", 
            time: "6:50 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
            mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
          },
          { 
            name: "Hilton Hawaiian Village - Grand Islander bus depot", 
            lat: 21.282800616178037, 
            lon: -157.83548235215594, 
            instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
            time: "7:00 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
            mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
          }
        ];
    
        // Clean element first
        element.innerHTML = '';
    
        // Create a container for the workflow with fixed width
        const container = document.createElement('div');
        container.style.width = '100%';
        container.style.display = 'flex';
        container.style.justifyContent = 'center';
        container.style.alignItems = 'center';
        container.style.backgroundColor = 'transparent';
        container.style.margin = '0';
        container.style.padding = '0';
        
        // Create the main wrapper with FIXED WIDTH
        const wrapper = document.createElement('div');
        wrapper.className = 'directions-workflow-wrapper';
        
        // Apply styling with fixed pixel width
        const fixedWidth = '460px'; // Fixed pixel width for all steps
        wrapper.style.width = fixedWidth;
        wrapper.style.minWidth = fixedWidth;
        wrapper.style.maxWidth = fixedWidth;
        wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
        wrapper.style.borderRadius = borderRadius;
        wrapper.style.overflow = 'hidden';
        wrapper.style.backgroundColor = backgroundColor;
        wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
        wrapper.style.height = height + 'px';
        wrapper.style.display = 'flex';
        wrapper.style.flexDirection = 'column';
        wrapper.style.margin = '0 auto'; // Center the wrapper
        wrapper.style.position = 'relative'; // For absolute positioning inside
    
        // Add animation if enabled
        if (animateIn) {
          wrapper.style.opacity = '0';
          wrapper.style.transform = 'translateY(20px)';
          wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        }
    
        // Tours data - 5 fictional Hawaiian tours
        const toursData = [
          {
            id: 'aloha-circle',
            name: 'Aloha Island Adventure',
            description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
          },
          {
            id: 'waimea-valley',
            name: 'Waimea Valley Experience',
            description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
          },
          {
            id: 'volcano-discovery',
            name: 'Volcano Discovery Journey',
            description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
          },
          {
            id: 'polynesian-heritage',
            name: 'Polynesian Heritage Tour',
            description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
          },
          {
            id: 'paradise-snorkel',
            name: 'Paradise Snorkel Safari',
            description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
          }
        ];
    
        // Fixed Duke Paoa Kahanamoku Statue location
        const FIXED_PICKUP = {
          name: "Duke Paoa Kahanamoku Statue",
          lat: 21.277054,
          lon: -157.826810,
          instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
          time: "8:00 AM",
          image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
          mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
        };
    
        // Updated function to load Google Maps API with Places library using bootstrap loader
        const loadGoogleMapsScript = () => {
          return new Promise((resolve, reject) => {
            // Check if API is already loaded
            if (window.google && window.google.maps && window.google.maps.places) {
              console.log('Google Maps API already loaded');
              resolve();
              return;
            }
            
            // Define callback function that will be called by Google Maps API
            window.initGoogleMaps = function() {
              console.log('Google Maps API loaded successfully via callback');
              resolve();
            };
            
            // Set a timeout to catch loading failures
            const timeoutId = setTimeout(() => {
              console.error('Google Maps API loading timed out');
              reject(new Error('Google Maps API loading timed out'));
            }, 10000);
            
            // Create the bootstrap loader script
            const script = document.createElement('script');
            script.innerHTML = `
              (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
                key: "${apiKey}",
                v: "alpha" // Use alpha channel for Places API (Preview)
              });
            `;
            
            script.onload = function() {
              clearTimeout(timeoutId);
              console.log('Google Maps bootstrap script loaded');
              
              // Try to load the places library immediately
              setTimeout(async () => {
                try {
                  if (window.google && window.google.maps) {
                    await window.google.maps.importLibrary("places");
                    clearTimeout(timeoutId);
                    console.log('Places library loaded via importLibrary');
                    resolve();
                  }
                } catch (err) {
                  console.warn('Initial importLibrary attempt failed:', err);
                  // Don't reject here, the callback might still work
                }
              }, 500);
            };
            
            script.onerror = function(error) {
              clearTimeout(timeoutId);
              console.error('Error loading Google Maps bootstrap script:', error);
              reject(new Error('Failed to load Google Maps API'));
            };
            
            document.head.appendChild(script);
          });
        };
        
        // Improved function to initialize Google Places Autocomplete with better error handling
        function setupAutocomplete() {
          console.log('Setting up autocomplete...');
          
          // Check if Google Maps API is loaded
          if (!window.google || !window.google.maps || !window.google.maps.places) {
            console.error('Google Maps API not fully loaded, cannot set up autocomplete');
            return;
          }
          
          // Get input field - now we only have one field
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          
          // Debug info
          console.log('Accommodation input found:', !!accommodationInput);
          
          // Check if DOM element exists
          if (!accommodationInput) {
            console.error('Required input not found for autocomplete');
            return;
          }
          
          // Initialize autocomplete on the accommodation field
          console.log('Creating accommodation autocomplete');
          try {
            const accommodationOptions = {
              // Allow both establishments and addresses
              types: [], // No type restrictions to allow both
              componentRestrictions: {country: 'us'},
              // Add location bias for Honolulu
              bounds: new google.maps.LatLngBounds(
                new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
                new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
              ),
              strictBounds: false, // Allow results outside the bounds
              fields: ['formatted_address', 'geometry', 'name', 'place_id']
            };
            
            const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
            
            // When a place is selected
            autocomplete.addListener('place_changed', function() {
              const place = autocomplete.getPlace();
              
              if (!place.geometry) {
                console.error('No place details available for selection');
                return;
              }
              
              // The place data is already captured in the input field
              console.log('Place selected:', place.name);
            });
            
            console.log('Accommodation autocomplete successfully initialized');
          } catch (error) {
            console.error('Error initializing accommodation autocomplete:', error);
          }
        }
    
        // Basic styling and tour selection HTML
        wrapper.innerHTML = `
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
            
            *, *::before, *::after {
              box-sizing: border-box;
            }
            
            .directions-workflow-container * {
              box-sizing: border-box;
              font-family: 'Inter', sans-serif;
            }
            
            .directions-workflow-container {
              display: flex;
              flex-direction: column;
              height: 100%;
              color: #333;
              width: 100%;
              max-width: 100%;
              min-width: 100%;
              position: relative;
            }
            
            .workflow-header {
              background-color: ${primaryColor};
              color: white;
              padding: 16px;
              text-align: center;
              font-weight: 600;
              width: 100%;
            }
            
            .workflow-header h2 {
              margin: 0;
              font-size: 18px;
            }
            
            .workflow-content {
              flex: 1;
              overflow-y: auto;
              position: relative;
              width: 100%;
            }
            
            .workflow-step {
              height: 100%;
              width: 100%;
              max-width: 100%;
              padding: 20px;
              display: none;
              animation: fadeIn 0.3s ease-in-out;
              box-sizing: border-box;
              overflow: hidden;
              position: relative;
            }
            
            .workflow-step.active {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: flex-start;
            }
            
            @keyframes fadeIn {
              from { opacity: 0; }
              to { opacity: 1; }
            }
            
            /* Progress Steps - Positioned in top right */
            .progress-container {
              position: absolute;
              top: 8px;
              right: 10px;
              z-index: 5;
            }
            
            .progress-steps {
              display: flex;
              align-items: center;
              justify-content: flex-end;
              gap: 4px;
            }
            
            .workflow-step-indicator {
              width: 28px;
              height: 28px;
              border-radius: 50%;
              background-color: #ddd;
              display: flex;
              align-items: center;
              justify-content: center;
              color: #555;
              font-weight: 600;
              font-size: 14px;
              margin: 0 2px;
            }
            
            .workflow-step-indicator.active {
              background-color: ${primaryColor};
              color: white;
            }
            
            .workflow-step-indicator.completed {
              background-color: ${primaryColor};
              color: white;
            }
            
            /* Connector lines between step indicators */
            .workflow-step-indicator:not(:last-child):after {
              content: "";
              display: inline-block;
              position: absolute;
              width: 8px;
              height: 2px;
              background-color: #ddd;
              margin-left: 30px;
            }
            
            .workflow-step-indicator.completed:not(:last-child):after {
              background-color: ${primaryColor};
            }
            
            /* Tour Carousel - Smooth sliding with fixed card positions */
            .tour-carousel-container {
              width: 100%;
              position: relative;
              margin: 20px auto 50px;
              height: 360px; /* Fixed height to ensure visibility */
              overflow: visible;
            }
            
            /* Carousel track for smooth sliding */
            .carousel-track {
              display: flex;
              position: absolute;
              left: 0;
              right: 0;
              transition: transform 0.4s ease;
              width: 100%;
              height: 100%;
            }
            
            /* Main card styling */
            .tour-card {
              position: absolute;
              width: 280px;
              height: 360px;
              border-radius: 12px;
              overflow: hidden;
              transition: all 0.4s ease;
              transform-origin: center center;
              box-shadow: 0 4px 10px rgba(0,0,0,0.1);
              border: 2px solid transparent;
              background-color: white;
            }
            
            /* Center card */
            .tour-card.center {
              left: 50%;
              transform: translateX(-50%) scale(1);
              opacity: 1;
              z-index: 3;
            }
            
            /* Left card */
            .tour-card.left {
              left: 50%;
              transform: translateX(calc(-50% - 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Right card */
            .tour-card.right {
              left: 50%;
              transform: translateX(calc(-50% + 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Hide cards that are outside visible range */
            .tour-card.off-left {
              left: 50%;
              transform: translateX(calc(-50% - 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.off-right {
              left: 50%;
              transform: translateX(calc(-50% + 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.selected {
              border: 2px solid ${primaryColor};
            }
            
            .tour-image-container {
              width: 100%;
              height: 200px; /* Height for image */
              overflow: hidden;
              position: relative;
            }
            
            .tour-image {
              width: 100%;
              height: 100%;
              object-fit: cover;
            }
            
            .tour-info {
              padding: 12px 15px;
              flex: 1;
              display: flex;
              flex-direction: column;
            }
            
            .tour-info h4 {
              margin: 0 0 8px;
              font-size: 18px;
              color: #333;
            }
            
            .tour-description {
              font-size: 14px;
              color: #555;
              margin-bottom: 16px;
              flex: 1;
            }
            
            .select-tour-btn {
              display: block;
              width: 100%;
              padding: 10px;
              background-color: ${primaryColor};
              color: white;
              border: none;
              border-radius: 6px;
              font-weight: 500;
              cursor: pointer;
              transition: background-color 0.2s;
            }
            
            .select-tour-btn:hover {
              background-color: ${secondaryColor};
            }
            
            /* Carousel Arrows - with show/hide logic */
            .carousel-arrow {
              position: absolute;
              top: 40%;
              transform: translateY(-50%);
              width: 36px;
              height: 36px;
              background-color: white;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              z-index: 10;
              box-shadow: 0 2px 6px rgba(0,0,0,0.2);
              transition: all 0.3s ease;
            }
            
            .carousel-arrow:hover {
              background-color: #f5f5f5;
              box-shadow: 0 4px 8px rgba(0,0,0,0.25);
              transform: translateY(-50%) scale(1.1);
            }
            
            .carousel-arrow.prev {
              left: 5px;
            }
            
            .carousel-arrow.next {
              right: 5px;
            }
            
            .carousel-arrow.hidden {
              display: none;
            }
            
            .carousel-arrow svg {
              width: 24px;
              height: 24px;
              fill: #555;
            }
            
            /* Carousel indicators */
            .carousel-indicators {
              display: flex;
              justify-content: center;
              margin-top: 15px;
            }
            
            .carousel-indicator {
              width: 8px;
              height: 8px;
              border-radius: 50%;
              background-color: #ddd;
              margin: 0 4px;
              transition: all 0.2s;
              cursor: pointer;
            }
            
            .carousel-indicator.active {
              background-color: ${primaryColor};
              transform: scale(1.2);
            }
            
            /* Address Form */
            .address-form {
              margin-top: 10px;
              width: 100%;
            }
            
            .form-group {
              margin-bottom: 16px;
              width: 100%;
            }
            
            .form-group label {
              display: block;
              margin-bottom: 6px;
              font-weight: 500;
              font-size: 14px;
            }
            
            .form-control {
              width: 100%;
              padding: 12px;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              font-size: 15px;
              transition: border-color 0.2s;
              box-sizing: border-box;
            }
            
            .form-control:focus {
              outline: none;
              border-color: ${primaryColor};
            }
    
            /* Fix for autocomplete dropdown */
            .pac-container {
              z-index: 10000 !important;
              box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
              border-radius: 8px;
              border: 1px solid #eaeaea;
              margin-top: 4px;
              font-family: 'Inter', sans-serif;
            }
            
            .pac-item {
              padding: 8px 10px;
              cursor: pointer;
              font-family: 'Inter', sans-serif !important;
            }
            
            .pac-item:hover {
              background-color: #f5f5f5;
            }
            
            .pac-icon {
              margin-right: 8px;
            }
            
            .pac-item-query {
              font-size: 14px;
              font-weight: 500;
            }
            
            /* Loading Animation */
            .loading-container {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              height: 100%;
              text-align: center;
              width: 100%;
            }
            
            .loading-spinner {
              width: 50px;
              height: 50px;
              border: 5px solid rgba(88, 124, 116, 0.2);
              border-radius: 50%;
              border-top: 5px solid ${primaryColor};
              animation: spin 1s linear infinite;
              margin-bottom: 20px;
            }
            
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
            
            .loading-text {
              font-size: 18px;
              font-weight: 500;
              margin-top: 15px;
            }
            
            /* Map Containers */
            .map-container, .route-map-container {
              margin-top: 15px;
              border-radius: 12px;
              overflow: hidden;
              border: 2px solid ${primaryColor};
              width: 100%;
              position: relative;
              aspect-ratio: 4/3; /* Maintain aspect ratio */
            }
            
            .map-container iframe, .route-map-container iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .confirmation-text {
              margin: 15px 0;
              text-align: center;
              font-weight: 500;
              width: 100%;
            }
            
            /* Pickup Card */
            .pickup-card {
              border-radius: 12px;
              overflow: hidden;
              margin-top: 15px;
              box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
              border: 2px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .pickup-image {
              width: 100%;
              height: 180px; /* Fixed height for pickup images */
              object-fit: cover;
            }
            
            .pickup-info {
              padding: 15px;
            }
            
            .pickup-title {
              font-size: 18px;
              font-weight: 600;
              margin-bottom: 8px;
              color: ${primaryColor};
            }
            
            .pickup-address {
              font-size: 15px;
              margin-bottom: 10px;
            }
            
            .pickup-instructions {
              font-size: 14px;
              color: #555;
              border-left: 3px solid ${primaryColor};
              padding-left: 10px;
              margin-top: 10px;
            }
            
            /* Route Details */
            .route-details {
              margin-top: 15px;
              padding: 12px;
              background-color: #f8f9fa;
              border-radius: 8px;
              font-size: 14px;
              border-left: 3px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .route-details p {
              margin: 5px 0;
            }
            
            .route-details .walk-time {
              font-weight: 600;
              color: ${primaryColor};
            }
            
            /* Buttons */
            .btn-container {
              display: flex;
              justify-content: space-between;
              width: 100%;
              position: absolute;
              bottom: 20px;
              left: 0;
              padding: 0 20px;
            }
            
            .btn {
              padding: 12px 24px;
              border-radius: 8px;
              font-weight: 500;
              cursor: pointer;
              border: none;
              font-size: 15px;
              transition: all 0.2s ease;
              min-width: 100px;
            }
            
            .btn-primary {
              background-color: ${primaryColor};
              color: white;
            }
            
            .btn-primary:hover {
              background-color: ${secondaryColor};
            }
            
            .btn-secondary {
              background-color: #f1f3f5;
              color: #495057;
            }
            
            .btn-secondary:hover {
              background-color: #e9ecef;
            }
            
            .btn-route {
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
              width: 100%;
              background-color: ${primaryColor};
              color: white;
              margin-top: 15px;
            }
            
            .btn-route:hover {
              background-color: ${secondaryColor};
            }
    
            /* Map fallback */
            .map-fallback {
              display: none;
              padding: 20px;
              text-align: center;
              background-color: #f8f9fa;
              border-radius: 8px;
              height: 100%;
              width: 100%;
              box-sizing: border-box;
            }
            
            /* Make all steps have consistent width */
            h3, p, form, div.progress-container,
            div.pickup-card, div.route-details, button.btn-route,
            div.map-container, div.route-map-container, div.map-fallback {
              width: 100%;
              max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
            }
            
            /* Fix overflow issues with internal content */
            img, iframe {
              max-width: 100%;
              border: 0;
            }
          </style>
          
          <div class="directions-workflow-container">
            <div class="workflow-header">
              <h2>${workflowTitle}</h2>
            </div>
            
            <div class="workflow-content">
              <!-- Step 1: Tour Selection with Carousel -->
              <div class="workflow-step active" id="step-tour">
                <h3>Select Your Tour</h3>
                <p>Please select the tour you'll be joining:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator active completed">1</div>
                    <div class="workflow-step-indicator">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <!-- Carousel with smooth sliding transitions -->
                <div class="tour-carousel-container">
                  <!-- Left arrow -->
                  <div class="carousel-arrow prev hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                    </svg>
                  </div>
                  
                  <!-- Carousel track with cards -->
                  <div class="carousel-track" id="carousel-track">
                    <!-- Cards will be dynamically generated here -->
                  </div>
                  
                  <!-- Right arrow -->
                  <div class="carousel-arrow next">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                    </svg>
                  </div>
                </div>
                
                <!-- Indicators -->
                <div class="carousel-indicators" id="carousel-indicators">
                  ${toursData.map((_, index) => `
                    <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                  `).join('')}
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
                  <button class="btn btn-primary" id="next-btn">Next</button>
                </div>
              </div>
              
              <!-- Step 2: Address Input - SIMPLIFIED TO ONE FIELD -->
              <div class="workflow-step" id="step-address">
                <h3>Enter Your Accommodation</h3>
                <p>Please enter the address where you're staying:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator active completed">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <form class="address-form" id="address-form">
                  <div class="form-group">
                    <label for="accommodation-input">Accommodation Name or Address*</label>
                    <input type="text" id="accommodation-input" class="form-control" placeholder="Hotel name or full address" required>
                  </div>
                </form>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
                  <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
                </div>
              </div>
              
              <!-- Step 3: Searching Animation -->
              <div class="workflow-step" id="step-searching">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Searching for location...</div>
                </div>
              </div>
              
              <!-- Step 4: Location Confirmation -->
              <div class="workflow-step" id="step-location-confirm">
                <h3>Confirm Your Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator active completed">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <div class="map-container" id="location-map">
                  <!-- Map will be inserted here by JavaScript -->
                </div>
                <div class="map-fallback" id="location-map-fallback">
                  <p>Unable to display map.</p>
                  <p id="fallback-address"></p>
                </div>
                
                <p class="confirmation-text">Is this the correct location?</p>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
                  <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
                </div>
              </div>
              
              <!-- Step 5: Finding Pickup Animation -->
              <div class="workflow-step" id="step-finding-pickup">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Finding nearest pickup point...</div>
                </div>
              </div>
              
              <!-- Step 6: Pickup Point Info -->
              <div class="workflow-step" id="step-pickup-info">
                <h3>Your Pickup Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator completed">3</div>
                    <div class="workflow-step-indicator active completed">4</div>
                  </div>
                </div>
                
                <div class="pickup-card">
                  <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
                  <div class="pickup-info">
                    <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                    <p class="pickup-address" id="pickup-address"></p>
                    <div class="pickup-instructions" id="pickup-instructions">
                      <p id="pickup-time"></p>
                      <p id="pickup-details"></p>
                    </div>
                  </div>
                </div>
                
                <button class="btn btn-route" id="show-route-btn">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  Show Route
                </button>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
                  <button class="btn btn-primary" id="done-btn">Done</button>
                </div>
              </div>
              
              <!-- Step 7: Route Map with Transportation Mode Selection -->
              <div class="workflow-step" id="step-route">
                <h3>Getting to Your Pickup Point</h3>
                
                <div class="form-group">
                  <label for="transport-mode">Transportation Mode:</label>
                  <select id="transport-mode" class="form-control">
                    <option value="walking" selected>Walking</option>
                    <option value="bicycling">Bicycling</option>
                    <option value="driving">Driving</option>
                    <option value="transit">Public Transit</option>
                  </select>
                </div>
                
                <div class="route-map-container" id="route-map">
                  <!-- Route map will be inserted here -->
                </div>
                <div class="map-fallback" id="route-map-fallback">
                  <p>Unable to display route map.</p>
                  <div id="fallback-route-details"></div>
                </div>
                
                <div class="route-details">
                  <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
                  <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
                  <p class="walk-time" id="route-time">Calculating travel time...</p>
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
                  <button class="btn btn-primary" id="route-done-btn">Done</button>
                </div>
              </div>
            </div>
          </div>
        `;
        
        // Add the wrapper to the container
        container.appendChild(wrapper);
        element.appendChild(container);
    
        // Make sure the wrapper becomes visible and scroll is enabled
        if (animateIn) {
          setTimeout(() => {
            wrapper.style.opacity = '1';
            wrapper.style.transform = 'translateY(0)';
          }, 100);
        }
    
        // Initialize workflow with scoped variables
        const workflowData = {
          selectedTour: "",
          selectedTourName: "",
          userLocation: {
            address: "",
            placeId: "", 
            lat: 0,
            lng: 0
          },
          nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
          apiKey: apiKey,
          currentCarouselIndex: 0 // Track current carousel position
        };
    
        // Function to create and position carousel cards
        function createCarouselCards() {
          const carouselTrack = wrapper.querySelector('#carousel-track');
          if (!carouselTrack) return;
          
          // Clear existing content
          carouselTrack.innerHTML = '';
          
          // Create all tour cards with proper positioning classes
          toursData.forEach((tour, index) => {
            const card = document.createElement('div');
            
            // Determine position class based on index relative to current index
            let positionClass = '';
            if (index === workflowData.currentCarouselIndex) {
              positionClass = 'center';
            } else if (index === workflowData.currentCarouselIndex - 1) {
              positionClass = 'left';
            } else if (index === workflowData.currentCarouselIndex + 1) {
              positionClass = 'right';
            } else if (index < workflowData.currentCarouselIndex) {
              positionClass = 'off-left';
            } else {
              positionClass = 'off-right';
            }
            
            card.className = `tour-card ${positionClass}`;
            card.dataset.tourId = tour.id;
            card.dataset.tourName = tour.name;
            card.dataset.index = index;
            
            // Add selected class if this is the selected tour
            if (tour.id === workflowData.selectedTour) {
              card.classList.add('selected');
            }
            
            card.innerHTML = `
              <div class="tour-image-container">
                <img src="${tour.image}" alt="${tour.name}" class="tour-image">
              </div>
              <div class="tour-info">
                <h4>${tour.name}</h4>
                <div class="tour-description">${tour.description}</div>
                <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
              </div>
            `;
            
            carouselTrack.appendChild(card);
          });
          
          // Add event listeners to all select buttons
          const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
          selectButtons.forEach(button => {
            button.addEventListener('click', (e) => {
              const tourId = e.target.dataset.tourId;
              const tourName = e.target.dataset.tourName;
              
              // Clear previous selections
              const cards = carouselTrack.querySelectorAll('.tour-card');
              cards.forEach(card => card.classList.remove('selected'));
              
              // Mark the parent card as selected
              const parentCard = e.target.closest('.tour-card');
              if (parentCard) {
                parentCard.classList.add('selected');
                workflowData.selectedTour = tourId;
                workflowData.selectedTourName = tourName;
              }
            });
          });
        }
    
        // Function to update carousel display
        function updateCarousel() {
          // Update card positions based on current index
          const cards = wrapper.querySelectorAll('.tour-card');
          
          cards.forEach((card, index) => {
            // Remove all position classes
            card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
            
            // Add appropriate position class
            if (index === workflowData.currentCarouselIndex) {
              card.classList.add('center');
            } else if (index === workflowData.currentCarouselIndex - 1) {
              card.classList.add('left');
            } else if (index === workflowData.currentCarouselIndex + 1) {
              card.classList.add('right');
            } else if (index < workflowData.currentCarouselIndex) {
              card.classList.add('off-left');
            } else {
              card.classList.add('off-right');
            }
          });
          
          // Update indicators
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
          });
          
          // Update arrow visibility
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          
          if (prevArrow) {
            prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
          }
          
          if (nextArrow) {
            nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
          }
        }
    
        // Add event listeners and initialize carousel
        function setupEventListeners() {
          // Create initial carousel cards
          createCarouselCards();
          
          // Get carousel navigation elements
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          
          // Previous slide
          if (prevArrow) {
            prevArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex > 0) {
                workflowData.currentCarouselIndex--;
                updateCarousel();
              }
            });
          }
          
          // Next slide
          if (nextArrow) {
            nextArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex < toursData.length - 1) {
                workflowData.currentCarouselIndex++;
                updateCarousel();
              }
            });
          }
          
          // Indicator clicks
          indicators.forEach((indicator) => {
            indicator.addEventListener('click', () => {
              workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
              updateCarousel();
            });
          });
          
          // Get all other DOM elements we need
          const nextBtn = wrapper.querySelector('#next-btn');
          const cancelBtn = wrapper.querySelector('#cancel-btn');
          const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
          const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
          const editAddressBtn = wrapper.querySelector('#edit-address-btn');
          const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
          const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
          const doneBtn = wrapper.querySelector('#done-btn');
          const showRouteBtn = wrapper.querySelector('#show-route-btn');
          const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
          const routeDoneBtn = wrapper.querySelector('#route-done-btn');
    
          // Button event listeners
          nextBtn.addEventListener('click', () => {
            if (workflowData.selectedTour) {
              goToStep('step-address');
              setTimeout(() => {
                setupAutocomplete();
              }, 500);
            } else {
              alert('Please select a tour first.');
            }
          });
    
          cancelBtn.addEventListener('click', () => {
            cancelWorkflow();
          });
    
          backToTourBtn.addEventListener('click', () => {
            goToStep('step-tour');
          });
    
          findPickupBtn.addEventListener('click', () => {
            searchLocation();
          });
    
          editAddressBtn.addEventListener('click', () => {
            goToStep('step-address');
            setTimeout(() => {
              setupAutocomplete();
            }, 500);
          });
    
          confirmLocationBtn.addEventListener('click', () => {
            findPickupPoint();
          });
    
          backToConfirmBtn.addEventListener('click', () => {
            goToStep('step-location-confirm');
          });
    
          doneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
    
          showRouteBtn.addEventListener('click', () => {
            showRouteMap();
          });
    
          backToPickupBtn.addEventListener('click', () => {
            goToStep('step-pickup-info');
          });
    
          routeDoneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
        }
    
        // Helper function to navigate between steps
        function goToStep(stepId) {
          console.log('Navigating to step:', stepId);
          const steps = wrapper.querySelectorAll('.workflow-step');
          steps.forEach(step => {
            step.classList.remove('active');
          });
          const targetStep = wrapper.querySelector(`#${stepId}`);
          if (targetStep) {
            targetStep.classList.add('active');
            
            // Re-initialize autocomplete if we're going to the address step
            if (stepId === 'step-address') {
              console.log('Re-initializing autocomplete on step change to address input');
              // Wait a moment for the DOM to update
              setTimeout(() => {
                setupAutocomplete();
              }, 300);
            }
          } else {
            console.error('Target step not found:', stepId);
          }
        }
    
        // Function to search for a location using the Google Places API
        function searchLocation() {
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          const accommodationValue = accommodationInput ? accommodationInput.value : '';
          const city = 'Honolulu'; // Always use Honolulu as the city
    
          if (!accommodationValue) {
            alert('Please enter your accommodation name or address');
            return;
          }
    
          // Show loading indicator
          goToStep('step-searching');
    
          // Format the full address for the API call
          const fullAddress = `${accommodationValue}, ${city}, Hawaii`;
    
          // Use Geocoding API
          geocodeAddress(fullAddress);
        }
    
        // Geocode an address using the Geocoding API (more reliable than Places API)
        function geocodeAddress(fullAddress) {
          const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
          
          fetch(geocodingUrl)
            .then(response => response.json())
            .then(data => {
              if (data.status === 'OK' && data.results && data.results.length > 0) {
                const result = data.results[0];
                
                // Format and save location data
                const locationData = {
                  address: result.formatted_address,
                  placeId: result.place_id,
                  lat: result.geometry.location.lat,
                  lng: result.geometry.location.lng
                };
                
                workflowData.userLocation = locationData;
                
                // Create and embed the map using place ID
                const mapContainer = wrapper.querySelector('#location-map');
                const mapFallback = wrapper.querySelector('#location-map-fallback');
                
                if (mapContainer) {
                  try {
                    // Use place ID for more accurate mapping
                    const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                    
                    mapContainer.innerHTML = `
                      <iframe
                        width="100%"
                        height="100%"
                        frameborder="0"
                        style="border:0"
                        src="${mapUrl}"
                        allowfullscreen
                        onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                        onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                      ></iframe>
                    `;
                    
                    // Fallback in case iframe doesn't load
                    if (mapFallback) {
                      const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                      if (fallbackAddressEl) {
                        fallbackAddressEl.textContent = locationData.address;
                      }
                    }
                  } catch (error) {
                    console.error('Error embedding map:', error);
                    if (mapContainer) mapContainer.style.display = 'none';
                    if (mapFallback) mapFallback.style.display = 'block';
                  }
                }
                
                // Move to the confirmation step
                goToStep('step-location-confirm');
              } else {
                console.error('Geocoding API error or no results:', data.status);
                alert('Unable to find the location. Please try again with more specific address details.');
                goToStep('step-address');
              }
            })
            .catch(error => {
              console.error('Error using Geocoding API:', error);
              alert('Unable to find the location. Please check your internet connection and try again.');
              goToStep('step-address');
            });
        }
    
        // Haversine formula to calculate distance between coordinates
        function calculateDistance(lat1, lon1, lat2, lon2) {
          function toRadians(degrees) {
            return degrees * (Math.PI / 180);
          }
    
          const R = 6371; // Radius of the Earth in kilometers
          const dLat = toRadians(lat2 - lat1);
          const dLon = toRadians(lon2 - lon1);
          const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          const distance = R * c; // Distance in kilometers
          return distance;
        }
    
        // Function to find the nearest pickup point - now always returns the fixed pickup
        function findPickupPoint() {
          goToStep('step-finding-pickup');
    
          setTimeout(() => {
            // Always use the fixed pickup location
            workflowData.nearestPickup = FIXED_PICKUP;
    
            // Update the pickup info
            const pickupImage = wrapper.querySelector('#pickup-image');
            const pickupTitle = wrapper.querySelector('#pickup-title');
            const pickupAddress = wrapper.querySelector('#pickup-address');
            const pickupTime = wrapper.querySelector('#pickup-time');
            const pickupDetails = wrapper.querySelector('#pickup-details');
    
            if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
            if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
            if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
            if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
            if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;
    
            // Move to the pickup info step
            goToStep('step-pickup-info');
          }, 2000);
        }
    
        // Function to show the route map with transportation mode
        function showRouteMap() {
          // Get selected transportation mode
          const transportModeSelect = wrapper.querySelector('#transport-mode');
          const mode = transportModeSelect ? transportModeSelect.value : 'walking';
          
          // Format the origin and destination coordinates
          const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
          const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
          
          // Get the route map container
          const routeMapContainer = wrapper.querySelector('#route-map');
          const routeMapFallback = wrapper.querySelector('#route-map-fallback');
          
          if (routeMapContainer) {
            try {
              // Create an iframe with directions using the selected mode
              const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
              
              routeMapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${directionsUrl}"
                  allowfullscreen
                  onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
                  onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (routeMapFallback) {
                const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
                if (fallbackRouteDetails) {
                  fallbackRouteDetails.innerHTML = `
                    <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
                  `;
                }
              }
            } catch (error) {
              console.error('Error embedding route map:', error);
              if (routeMapContainer) routeMapContainer.style.display = 'none';
              if (routeMapFallback) routeMapFallback.style.display = 'block';
            }
          }
    
          // Update route details
          const routeFrom = wrapper.querySelector('#route-from');
          const routeTo = wrapper.querySelector('#route-to');
          const routeTime = wrapper.querySelector('#route-time');
    
          if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
          if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;
    
          // Calculate travel time based on mode
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            workflowData.nearestPickup.lat,
            workflowData.nearestPickup.lon
          );
          
          // Different speed estimates for different modes (km/h)
          const speeds = {
            walking: 4,        // 4 km/h average walking speed
            bicycling: 15,     // 15 km/h casual biking
            driving: 40,       // 40 km/h urban driving with traffic
            transit: 20        // 20 km/h average transit speed including wait times
          };
          
          const speedKmPerHour = speeds[mode] || speeds.walking;
          const timeInHours = distance / speedKmPerHour;
          const timeMinutes = Math.round(timeInHours * 60);
          
          const modeDisplay = {
            walking: 'Walking',
            bicycling: 'Biking',
            driving: 'Driving',
            transit: 'Transit'
          };
          
          if (routeTime) {
            routeTime.textContent = `${modeDisplay[mode] || 'Travel'} time: ~${timeMinutes} minutes (${distance.toFixed(1)} km)`;
          }
    
          // Go to the route step
          goToStep('step-route');
          
          // Add event listener for mode change - if not already added
          const transportModeElement = wrapper.querySelector('#transport-mode');
          if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
            transportModeElement.addEventListener('change', function() {
              showRouteMap(); // Refresh the route with the new mode
            });
            transportModeElement.dataset.listenerAdded = 'true';
          }
        }
    
        // Function to handle workflow cancellation
        function cancelWorkflow() {
          // Signal to Voiceflow that the workflow is cancelled
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-cancel'
              }
            });
          }
        }
    
        // Function to handle workflow completion
        function completeWorkflow() {
          // Prepare data to send back to Voiceflow
          const completionData = {
            selectedTour: workflowData.selectedTourName,
            userAddress: workflowData.userLocation.address,
            pickupPoint: workflowData.nearestPickup.name,
            pickupTime: workflowData.nearestPickup.time,
            pickupInstructions: workflowData.nearestPickup.instructions,
            userLat: workflowData.userLocation.lat,
            userLon: workflowData.userLocation.lng,
            pickupLat: workflowData.nearestPickup.lat,
            pickupLon: workflowData.nearestPickup.lon
          };
    
          // Signal to Voiceflow that the workflow is complete with the collected data
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-complete',
                data: completionData
              }
            });
          }
        }
    
            // Setup event listeners immediately before API loading
            setupEventListeners();
    
            // Initialize the workflow with robust handling
            loadGoogleMapsScript()
              .then(() => {
                console.log('Google Maps API loaded successfully');
                setupAutocomplete();
              })
              .catch(error => {
                console.error('Failed to load Google Maps API:', error);
                // Add direct script tag as a desperate fallback (no callback)
                console.log('Adding direct script tag as fallback after API load failure');
                const script = document.createElement('script');
                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
                script.onload = () => {
                  console.log('Fallback Google Maps API loaded');
                  setTimeout(() => {
                    setupAutocomplete();
                  }, 500);
                };
                document.head.appendChild(script);
              });
          },
        };

    // YRS: VERSION 17 (13 March 2025)

    export const DirectionsWorkflowExtension17 = {
      name: 'DirectionsWorkflow',
      type: 'response',
      match: ({ trace }) =>
        trace.type === 'ext_directionsWorkflow17' || trace.payload?.name === 'ext_directionsWorkflow17',
      render: ({ trace, element }) => {
        // Extract properties from the payload
        const { 
          apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
          pickupPoints = [], // This will come from your data
          workflowTitle = 'Find Your Pickup Location',
          height = '700', // Increased height to give more space for buttons
          padding = '15px',
          delay = 0,
          backgroundColor = '#ffffff',
          maxWidth = '500px', // Set consistent max-width
          // Branding colors
          primaryColor = '#587C74',
          secondaryColor = '#3B534E',
          // Border options
          borderWidth = '2px',
          borderColor = '#587C74',
          borderStyle = 'solid',
          borderRadius = '12px',
          // Shadow and effects
          shadowColor = 'rgba(88, 124, 116, 0.2)',
          shadowSize = '8px',
          // Animation
          animateIn = true,
          // Default location bias
          defaultLat = 21.315603,
          defaultLng = -157.858093,
          defaultRadius = 30000.0
        } = trace.payload || {};
    
        // Default pickup points if none are provided
        const defaultPickupPoints = [
          { 
            name: "Aloha Tower trolley stop", 
            lat: 21.30693198561091, 
            lon: -157.8663891824468, 
            instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
            time: "6:45 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
            mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
          },
          { 
            name: "Ala Moana Hotel - curbside on Mahukona Street", 
            lat: 21.290298342118497, 
            lon: -157.84001436219415, 
            instructions: "Meet us near the curbside at Mahukona St", 
            time: "6:50 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
            mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
          },
          { 
            name: "Hilton Hawaiian Village - Grand Islander bus depot", 
            lat: 21.282800616178037, 
            lon: -157.83548235215594, 
            instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
            time: "7:00 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
            mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
          }
        ];
    
        // Clean element first
        element.innerHTML = '';
    
        // Create a container for the workflow with fixed width
        const container = document.createElement('div');
        container.style.width = '100%';
        container.style.display = 'flex';
        container.style.justifyContent = 'center';
        container.style.alignItems = 'center';
        container.style.backgroundColor = 'transparent';
        container.style.margin = '0';
        container.style.padding = '0';
        
        // Create the main wrapper with FIXED WIDTH
        const wrapper = document.createElement('div');
        wrapper.className = 'directions-workflow-wrapper';
        
        // Apply styling with fixed pixel width
        const fixedWidth = '460px'; // Fixed pixel width for all steps
        wrapper.style.width = fixedWidth;
        wrapper.style.minWidth = fixedWidth;
        wrapper.style.maxWidth = fixedWidth;
        wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
        wrapper.style.borderRadius = borderRadius;
        wrapper.style.overflow = 'hidden';
        wrapper.style.backgroundColor = backgroundColor;
        wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
        wrapper.style.height = height + 'px';
        wrapper.style.display = 'flex';
        wrapper.style.flexDirection = 'column';
        wrapper.style.margin = '0 auto'; // Center the wrapper
        wrapper.style.position = 'relative'; // For absolute positioning inside
    
        // Add animation if enabled
        if (animateIn) {
          wrapper.style.opacity = '0';
          wrapper.style.transform = 'translateY(20px)';
          wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        }
    
        // Tours data - 5 fictional Hawaiian tours
        const toursData = [
          {
            id: 'aloha-circle',
            name: 'Aloha Island Adventure',
            description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
          },
          {
            id: 'waimea-valley',
            name: 'Waimea Valley Experience',
            description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
          },
          {
            id: 'volcano-discovery',
            name: 'Volcano Discovery Journey',
            description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
          },
          {
            id: 'polynesian-heritage',
            name: 'Polynesian Heritage Tour',
            description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
          },
          {
            id: 'paradise-snorkel',
            name: 'Paradise Snorkel Safari',
            description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
          }
        ];
    
        // Fixed Duke Paoa Kahanamoku Statue location
        const FIXED_PICKUP = {
          name: "Duke Paoa Kahanamoku Statue",
          lat: 21.277054,
          lon: -157.826810,
          instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
          time: "8:00 AM",
          image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
          mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
        };
    
        // Updated function to load Google Maps API with Places library using bootstrap loader
        const loadGoogleMapsScript = () => {
          return new Promise((resolve, reject) => {
            // Check if API is already loaded
            if (window.google && window.google.maps && window.google.maps.places) {
              console.log('Google Maps API already loaded');
              resolve();
              return;
            }
            
            // Define callback function that will be called by Google Maps API
            window.initGoogleMaps = function() {
              console.log('Google Maps API loaded successfully via callback');
              resolve();
            };
            
            // Set a timeout to catch loading failures
            const timeoutId = setTimeout(() => {
              console.error('Google Maps API loading timed out');
              reject(new Error('Google Maps API loading timed out'));
            }, 10000);
            
            // Create the bootstrap loader script
            const script = document.createElement('script');
            script.innerHTML = `
              (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
                key: "${apiKey}",
                v: "alpha" // Use alpha channel for Places API (Preview)
              });
            `;
            
            script.onload = function() {
              clearTimeout(timeoutId);
              console.log('Google Maps bootstrap script loaded');
              
              // Try to load the places library immediately
              setTimeout(async () => {
                try {
                  if (window.google && window.google.maps) {
                    await window.google.maps.importLibrary("places");
                    clearTimeout(timeoutId);
                    console.log('Places library loaded via importLibrary');
                    resolve();
                  }
                } catch (err) {
                  console.warn('Initial importLibrary attempt failed:', err);
                  // Don't reject here, the callback might still work
                }
              }, 500);
            };
            
            script.onerror = function(error) {
              clearTimeout(timeoutId);
              console.error('Error loading Google Maps bootstrap script:', error);
              reject(new Error('Failed to load Google Maps API'));
            };
            
            document.head.appendChild(script);
          });
        };
        
        // Improved function to initialize Google Places Autocomplete with better error handling
        function setupAutocomplete() {
          console.log('Setting up autocomplete...');
          
          // Check if Google Maps API is loaded
          if (!window.google || !window.google.maps || !window.google.maps.places) {
            console.error('Google Maps API not fully loaded, cannot set up autocomplete');
            return;
          }
          
          // Get input field - now we only have one field
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          
          // Debug info
          console.log('Accommodation input found:', !!accommodationInput);
          
          // Check if DOM element exists
          if (!accommodationInput) {
            console.error('Required input not found for autocomplete');
            return;
          }
          
          // Initialize autocomplete on the accommodation field
          console.log('Creating accommodation autocomplete');
          try {
            const accommodationOptions = {
              // Allow both establishments and addresses
              types: [], // No type restrictions to allow both
              componentRestrictions: {country: 'us'},
              // Add location bias for Honolulu
              bounds: new google.maps.LatLngBounds(
                new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
                new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
              ),
              strictBounds: false, // Allow results outside the bounds
              fields: ['formatted_address', 'geometry', 'name', 'place_id']
            };
            
            const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
            
            // When a place is selected
            autocomplete.addListener('place_changed', function() {
              const place = autocomplete.getPlace();
              
              if (!place.geometry) {
                console.error('No place details available for selection');
                return;
              }
              
              // The place data is already captured in the input field
              console.log('Place selected:', place.name);
            });
            
            console.log('Accommodation autocomplete successfully initialized');
          } catch (error) {
            console.error('Error initializing accommodation autocomplete:', error);
          }
        }
    
        // Basic styling and tour selection HTML
        wrapper.innerHTML = `
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
            
            *, *::before, *::after {
              box-sizing: border-box;
            }
            
            .directions-workflow-container * {
              box-sizing: border-box;
              font-family: 'Inter', sans-serif;
            }
            
            .directions-workflow-container {
              display: flex;
              flex-direction: column;
              height: 100%;
              color: #333;
              width: 100%;
              max-width: 100%;
              min-width: 100%;
              position: relative;
            }
            
            .workflow-header {
              background-color: ${primaryColor};
              color: white;
              padding: 16px;
              text-align: center;
              font-weight: 600;
              width: 100%;
            }
            
            .workflow-header h2 {
              margin: 0;
              font-size: 18px;
            }
            
            .workflow-content {
              flex: 1;
              overflow-y: auto;
              position: relative;
              width: 100%;
            }
            
            .workflow-step {
              height: 100%;
              width: 100%;
              max-width: 100%;
              padding: 20px;
              display: none;
              animation: fadeIn 0.3s ease-in-out;
              box-sizing: border-box;
              overflow: hidden;
              position: relative;
            }
            
            .workflow-step.active {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: flex-start;
            }
            
            @keyframes fadeIn {
              from { opacity: 0; }
              to { opacity: 1; }
            }
            
            /* Progress Steps - Positioned in top right */
            .progress-container {
              position: absolute;
              top: 8px;
              right: 10px;
              z-index: 5;
            }
            
            .progress-steps {
              display: flex;
              align-items: center;
              justify-content: flex-end;
              gap: 4px;
            }
            
            .workflow-step-indicator {
              width: 28px;
              height: 28px;
              border-radius: 50%;
              background-color: #ddd;
              display: flex;
              align-items: center;
              justify-content: center;
              color: #555;
              font-weight: 600;
              font-size: 14px;
              margin: 0 2px;
            }
            
            .workflow-step-indicator.active {
              background-color: ${primaryColor};
              color: white;
            }
            
            .workflow-step-indicator.completed {
              background-color: ${primaryColor};
              color: white;
            }
            
            /* Connector lines between step indicators */
            .workflow-step-indicator:not(:last-child):after {
              content: "";
              display: inline-block;
              position: absolute;
              width: 8px;
              height: 2px;
              background-color: #ddd;
              margin-left: 30px;
            }
            
            .workflow-step-indicator.completed:not(:last-child):after {
              background-color: ${primaryColor};
            }
            
            /* Tour Carousel - Smooth sliding with fixed card positions */
            .tour-carousel-container {
              width: 100%;
              position: relative;
              margin: 20px auto 50px;
              height: 360px; /* Fixed height to ensure visibility */
              overflow: visible;
            }
            
            /* Carousel track for smooth sliding */
            .carousel-track {
              display: flex;
              position: absolute;
              left: 0;
              right: 0;
              transition: transform 0.4s ease;
              width: 100%;
              height: 100%;
            }
            
            /* Main card styling */
            .tour-card {
              position: absolute;
              width: 280px;
              height: 360px;
              border-radius: 12px;
              overflow: hidden;
              transition: all 0.4s ease;
              transform-origin: center center;
              box-shadow: 0 4px 10px rgba(0,0,0,0.1);
              border: 2px solid transparent;
              background-color: white;
            }
            
            /* Center card */
            .tour-card.center {
              left: 50%;
              transform: translateX(-50%) scale(1);
              opacity: 1;
              z-index: 3;
            }
            
            /* Left card */
            .tour-card.left {
              left: 50%;
              transform: translateX(calc(-50% - 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Right card */
            .tour-card.right {
              left: 50%;
              transform: translateX(calc(-50% + 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Hide cards that are outside visible range */
            .tour-card.off-left {
              left: 50%;
              transform: translateX(calc(-50% - 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.off-right {
              left: 50%;
              transform: translateX(calc(-50% + 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.selected {
              border: 2px solid ${primaryColor};
            }
            
            .tour-image-container {
              width: 100%;
              height: 200px; /* Height for image */
              overflow: hidden;
              position: relative;
            }
            
            .tour-image {
              width: 100%;
              height: 100%;
              object-fit: cover;
            }
            
            .tour-info {
              padding: 12px 15px;
              flex: 1;
              display: flex;
              flex-direction: column;
            }
            
            .tour-info h4 {
              margin: 0 0 8px;
              font-size: 18px;
              color: #333;
            }
            
            .tour-description {
              font-size: 14px;
              color: #555;
              margin-bottom: 16px;
              flex: 1;
            }
            
            .select-tour-btn {
              display: block;
              width: 100%;
              padding: 10px;
              background-color: ${primaryColor};
              color: white;
              border: none;
              border-radius: 6px;
              font-weight: 500;
              cursor: pointer;
              transition: background-color 0.2s;
            }
            
            .select-tour-btn:hover {
              background-color: ${secondaryColor};
            }
            
            /* Carousel Arrows - with show/hide logic */
            .carousel-arrow {
              position: absolute;
              top: 40%;
              transform: translateY(-50%);
              width: 36px;
              height: 36px;
              background-color: white;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              z-index: 10;
              box-shadow: 0 2px 6px rgba(0,0,0,0.2);
              transition: all 0.3s ease;
            }
            
            .carousel-arrow:hover {
              background-color: #f5f5f5;
              box-shadow: 0 4px 8px rgba(0,0,0,0.25);
              transform: translateY(-50%) scale(1.1);
            }
            
            .carousel-arrow.prev {
              left: 5px;
            }
            
            .carousel-arrow.next {
              right: 5px;
            }
            
            .carousel-arrow.hidden {
              display: none;
            }
            
            .carousel-arrow svg {
              width: 24px;
              height: 24px;
              fill: #555;
            }
            
            /* Carousel indicators */
            .carousel-indicators {
              display: flex;
              justify-content: center;
              margin-top: 15px;
            }
            
            .carousel-indicator {
              width: 8px;
              height: 8px;
              border-radius: 50%;
              background-color: #ddd;
              margin: 0 4px;
              transition: all 0.2s;
              cursor: pointer;
            }
            
            .carousel-indicator.active {
              background-color: ${primaryColor};
              transform: scale(1.2);
            }
            
            /* Address Form */
            .address-form {
              margin-top: 10px;
              width: 100%;
            }
            
            .form-group {
              margin-bottom: 16px;
              width: 100%;
            }
            
            .form-group label {
              display: block;
              margin-bottom: 6px;
              font-weight: 500;
              font-size: 14px;
            }
            
            .form-control {
              width: 100%;
              padding: 12px;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              font-size: 15px;
              transition: border-color 0.2s;
              box-sizing: border-box;
            }
            
            .form-control:focus {
              outline: none;
              border-color: ${primaryColor};
            }
    
            /* Fix for autocomplete dropdown */
            .pac-container {
              z-index: 10000 !important;
              box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
              border-radius: 8px;
              border: 1px solid #eaeaea;
              margin-top: 4px;
              font-family: 'Inter', sans-serif;
            }
            
            .pac-item {
              padding: 8px 10px;
              cursor: pointer;
              font-family: 'Inter', sans-serif !important;
            }
            
            .pac-item:hover {
              background-color: #f5f5f5;
            }
            
            .pac-icon {
              margin-right: 8px;
            }
            
            .pac-item-query {
              font-size: 14px;
              font-weight: 500;
            }
            
            /* Loading Animation */
            .loading-container {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              height: 100%;
              text-align: center;
              width: 100%;
            }
            
            .loading-spinner {
              width: 50px;
              height: 50px;
              border: 5px solid rgba(88, 124, 116, 0.2);
              border-radius: 50%;
              border-top: 5px solid ${primaryColor};
              animation: spin 1s linear infinite;
              margin-bottom: 20px;
            }
            
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
            
            .loading-text {
              font-size: 18px;
              font-weight: 500;
              margin-top: 15px;
            }
            
            /* Map Containers */
            .map-container, .route-map-container {
              margin-top: 15px;
              border-radius: 12px;
              overflow: hidden;
              border: 2px solid ${primaryColor};
              width: 100%;
              position: relative;
              aspect-ratio: 4/3; /* Maintain aspect ratio */
            }
            
            .map-container iframe, .route-map-container iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .confirmation-text {
              margin: 15px 0;
              text-align: center;
              font-weight: 500;
              width: 100%;
            }
            
            /* Pickup Card */
            .pickup-card {
              border-radius: 12px;
              overflow: hidden;
              margin-top: 15px;
              box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
              border: 2px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .pickup-image {
              width: 100%;
              height: 180px; /* Fixed height for pickup images */
              object-fit: cover;
            }
            
            .pickup-info {
              padding: 15px;
            }
            
            .pickup-title {
              font-size: 18px;
              font-weight: 600;
              margin-bottom: 8px;
              color: ${primaryColor};
            }
            
            .pickup-address {
              font-size: 15px;
              margin-bottom: 10px;
            }
            
            .pickup-instructions {
              font-size: 14px;
              color: #555;
              border-left: 3px solid ${primaryColor};
              padding-left: 10px;
              margin-top: 10px;
            }
            
            /* Route Details */
            .route-details {
              margin-top: 15px;
              padding: 12px;
              background-color: #f8f9fa;
              border-radius: 8px;
              font-size: 14px;
              border-left: 3px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .route-details p {
              margin: 5px 0;
            }
            
            .route-details .walk-time {
              font-weight: 600;
              color: ${primaryColor};
            }
            
            /* Buttons */
            .btn-container {
              display: flex;
              justify-content: space-between;
              width: 100%;
              position: absolute;
              bottom: 20px;
              left: 0;
              padding: 0 20px;
            }
            
            .btn {
              padding: 12px 24px;
              border-radius: 8px;
              font-weight: 500;
              cursor: pointer;
              border: none;
              font-size: 15px;
              transition: all 0.2s ease;
              min-width: 100px;
              margin-top: 15px;
            }
            
            .btn-primary {
              background-color: ${primaryColor};
              color: white;
            }
            
            .btn-primary:hover {
              background-color: ${secondaryColor};
            }
            
            .btn-secondary {
              background-color: #f1f3f5;
              color: #495057;
            }
            
            .btn-secondary:hover {
              background-color: #e9ecef;
            }
            
            .btn-route {
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
              width: 100%;
              background-color: ${primaryColor};
              color: white;
              margin-top: 15px;
              margin-bottom: 60px; /* Add space below the Show Route button to avoid collision with bottom buttons */
            }
            
            .btn-route:hover {
              background-color: ${secondaryColor};
            }
    
            /* Map fallback */
            .map-fallback {
              display: none;
              padding: 20px;
              text-align: center;
              background-color: #f8f9fa;
              border-radius: 8px;
              height: 100%;
              width: 100%;
              box-sizing: border-box;
            }
            
            /* Make all steps have consistent width */
            h3, p, form, div.progress-container,
            div.pickup-card, div.route-details, button.btn-route,
            div.map-container, div.route-map-container, div.map-fallback {
              width: 100%;
              max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
            }
            
            /* Fix overflow issues with internal content */
            img, iframe {
              max-width: 100%;
              border: 0;
            }
          </style>
          
          <div class="directions-workflow-container">
            <div class="workflow-header">
              <h2>${workflowTitle}</h2>
            </div>
            
            <div class="workflow-content">
              <!-- Step 1: Tour Selection with Carousel -->
              <div class="workflow-step active" id="step-tour">
                <h3>Select Your Tour</h3>
                <p>Please select the tour you'll be joining:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator active completed">1</div>
                    <div class="workflow-step-indicator">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <!-- Carousel with smooth sliding transitions -->
                <div class="tour-carousel-container">
                  <!-- Left arrow -->
                  <div class="carousel-arrow prev hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                    </svg>
                  </div>
                  
                  <!-- Carousel track with cards -->
                  <div class="carousel-track" id="carousel-track">
                    <!-- Cards will be dynamically generated here -->
                  </div>
                  
                  <!-- Right arrow -->
                  <div class="carousel-arrow next">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                    </svg>
                  </div>
                </div>
                
                <!-- Indicators -->
                <div class="carousel-indicators" id="carousel-indicators">
                  ${toursData.map((_, index) => `
                    <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                  `).join('')}
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
                  <button class="btn btn-primary" id="next-btn">Next</button>
                </div>
              </div>
              
              <!-- Step 2: Address Input - SIMPLIFIED TO ONE FIELD -->
              <div class="workflow-step" id="step-address">
                <h3>Enter Your Accommodation</h3>
                <p>Please enter the address where you're staying:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator active completed">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <form class="address-form" id="address-form">
                  <div class="form-group">
                    <label for="accommodation-input">Accommodation Name or Address*</label>
                    <input type="text" id="accommodation-input" class="form-control" placeholder="Hotel name or full address" required>
                  </div>
                </form>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
                  <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
                </div>
              </div>
              
              <!-- Step 3: Searching Animation -->
              <div class="workflow-step" id="step-searching">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Searching for location...</div>
                </div>
              </div>
              
              <!-- Step 4: Location Confirmation -->
              <div class="workflow-step" id="step-location-confirm">
                <h3>Confirm Your Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator active completed">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <div class="map-container" id="location-map">
                  <!-- Map will be inserted here by JavaScript -->
                </div>
                <div class="map-fallback" id="location-map-fallback">
                  <p>Unable to display map.</p>
                  <p id="fallback-address"></p>
                </div>
                
                <p class="confirmation-text">Is this the correct location?</p>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
                  <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
                </div>
              </div>
              
              <!-- Step 5: Finding Pickup Animation -->
              <div class="workflow-step" id="step-finding-pickup">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Finding nearest pickup point...</div>
                </div>
              </div>
              
              <!-- Step 6: Pickup Point Info -->
              <div class="workflow-step" id="step-pickup-info">
                <h3>Your Pickup Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator completed">3</div>
                    <div class="workflow-step-indicator active completed">4</div>
                  </div>
                </div>
                
                <div class="pickup-card">
                  <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
                  <div class="pickup-info">
                    <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                    <p class="pickup-address" id="pickup-address"></p>
                    <div class="pickup-instructions" id="pickup-instructions">
                      <p id="pickup-time"></p>
                      <p id="pickup-details"></p>
                    </div>
                  </div>
                </div>
                
                <button class="btn btn-route" id="show-route-btn">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  Show Route
                </button>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
                  <button class="btn btn-primary" id="done-btn">Done</button>
                </div>
              </div>
              
              <!-- Step 7: Route Map with Transportation Mode Selection -->
              <div class="workflow-step" id="step-route">
                <h3>Getting to Your Pickup Point</h3>
                
                <div class="form-group">
                  <label for="transport-mode">Transportation Mode:</label>
                  <select id="transport-mode" class="form-control">
                    <option value="walking" selected>Walking</option>
                    <option value="bicycling">Bicycling</option>
                    <option value="driving">Driving</option>
                    <option value="transit">Public Transit</option>
                  </select>
                </div>
                
                <div class="route-map-container" id="route-map">
                  <!-- Route map will be inserted here -->
                </div>
                <div class="map-fallback" id="route-map-fallback">
                  <p>Unable to display route map.</p>
                  <div id="fallback-route-details"></div>
                </div>
                
                <div class="route-details">
                  <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
                  <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
                  <!-- Removed redundant travel time text as it's visible in the map -->
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
                  <button class="btn btn-primary" id="route-done-btn">Done</button>
                </div>
              </div>
            </div>
          </div>
        `;
        
        // Add the wrapper to the container
        container.appendChild(wrapper);
        element.appendChild(container);
    
        // Make sure the wrapper becomes visible and scroll is enabled
        if (animateIn) {
          setTimeout(() => {
            wrapper.style.opacity = '1';
            wrapper.style.transform = 'translateY(0)';
          }, 100);
        }
    
        // Initialize workflow with scoped variables
        const workflowData = {
          selectedTour: "",
          selectedTourName: "",
          userLocation: {
            address: "",
            placeId: "", 
            lat: 0,
            lng: 0
          },
          nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
          apiKey: apiKey,
          currentCarouselIndex: 0 // Track current carousel position
        };
    
        // Function to create and position carousel cards
        function createCarouselCards() {
          const carouselTrack = wrapper.querySelector('#carousel-track');
          if (!carouselTrack) return;
          
          // Clear existing content
          carouselTrack.innerHTML = '';
          
          // Create all tour cards with proper positioning classes
          toursData.forEach((tour, index) => {
            const card = document.createElement('div');
            
            // Determine position class based on index relative to current index
            let positionClass = '';
            if (index === workflowData.currentCarouselIndex) {
              positionClass = 'center';
            } else if (index === workflowData.currentCarouselIndex - 1) {
              positionClass = 'left';
            } else if (index === workflowData.currentCarouselIndex + 1) {
              positionClass = 'right';
            } else if (index < workflowData.currentCarouselIndex) {
              positionClass = 'off-left';
            } else {
              positionClass = 'off-right';
            }
            
            card.className = `tour-card ${positionClass}`;
            card.dataset.tourId = tour.id;
            card.dataset.tourName = tour.name;
            card.dataset.index = index;
            
            // Add selected class if this is the selected tour
            if (tour.id === workflowData.selectedTour) {
              card.classList.add('selected');
            }
            
            card.innerHTML = `
              <div class="tour-image-container">
                <img src="${tour.image}" alt="${tour.name}" class="tour-image">
              </div>
              <div class="tour-info">
                <h4>${tour.name}</h4>
                <div class="tour-description">${tour.description}</div>
                <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
              </div>
            `;
            
            carouselTrack.appendChild(card);
          });
          
          // Add event listeners to all select buttons
          const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
          selectButtons.forEach(button => {
            button.addEventListener('click', (e) => {
              const tourId = e.target.dataset.tourId;
              const tourName = e.target.dataset.tourName;
              
              // Clear previous selections
              const cards = carouselTrack.querySelectorAll('.tour-card');
              cards.forEach(card => card.classList.remove('selected'));
              
              // Mark the parent card as selected
              const parentCard = e.target.closest('.tour-card');
              if (parentCard) {
                parentCard.classList.add('selected');
                workflowData.selectedTour = tourId;
                workflowData.selectedTourName = tourName;
              }
            });
          });
        }
    
        // Function to update carousel display
        function updateCarousel() {
          // Update card positions based on current index
          const cards = wrapper.querySelectorAll('.tour-card');
          
          cards.forEach((card, index) => {
            // Remove all position classes
            card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
            
            // Add appropriate position class
            if (index === workflowData.currentCarouselIndex) {
              card.classList.add('center');
            } else if (index === workflowData.currentCarouselIndex - 1) {
              card.classList.add('left');
            } else if (index === workflowData.currentCarouselIndex + 1) {
              card.classList.add('right');
            } else if (index < workflowData.currentCarouselIndex) {
              card.classList.add('off-left');
            } else {
              card.classList.add('off-right');
            }
          });
          
          // Update indicators
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
          });
          
          // Update arrow visibility
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          
          if (prevArrow) {
            prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
          }
          
          if (nextArrow) {
            nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
          }
        }
    
        // Add event listeners and initialize carousel
        function setupEventListeners() {
          // Create initial carousel cards
          createCarouselCards();
          
          // Get carousel navigation elements
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          
          // Previous slide
          if (prevArrow) {
            prevArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex > 0) {
                workflowData.currentCarouselIndex--;
                updateCarousel();
              }
            });
          }
          
          // Next slide
          if (nextArrow) {
            nextArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex < toursData.length - 1) {
                workflowData.currentCarouselIndex++;
                updateCarousel();
              }
            });
          }
          
          // Indicator clicks
          indicators.forEach((indicator) => {
            indicator.addEventListener('click', () => {
              workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
              updateCarousel();
            });
          });
          
          // Get all other DOM elements we need
          const nextBtn = wrapper.querySelector('#next-btn');
          const cancelBtn = wrapper.querySelector('#cancel-btn');
          const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
          const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
          const editAddressBtn = wrapper.querySelector('#edit-address-btn');
          const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
          const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
          const doneBtn = wrapper.querySelector('#done-btn');
          const showRouteBtn = wrapper.querySelector('#show-route-btn');
          const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
          const routeDoneBtn = wrapper.querySelector('#route-done-btn');
    
          // Button event listeners
          nextBtn.addEventListener('click', () => {
            if (workflowData.selectedTour) {
              goToStep('step-address');
              setTimeout(() => {
                setupAutocomplete();
              }, 500);
            } else {
              alert('Please select a tour first.');
            }
          });
    
          cancelBtn.addEventListener('click', () => {
            cancelWorkflow();
          });
    
          backToTourBtn.addEventListener('click', () => {
            goToStep('step-tour');
          });
    
          findPickupBtn.addEventListener('click', () => {
            searchLocation();
          });
    
          editAddressBtn.addEventListener('click', () => {
            goToStep('step-address');
            setTimeout(() => {
              setupAutocomplete();
            }, 500);
          });
    
          confirmLocationBtn.addEventListener('click', () => {
            findPickupPoint();
          });
    
          backToConfirmBtn.addEventListener('click', () => {
            goToStep('step-location-confirm');
          });
    
          doneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
    
          showRouteBtn.addEventListener('click', () => {
            showRouteMap();
          });
    
          backToPickupBtn.addEventListener('click', () => {
            goToStep('step-pickup-info');
          });
    
          routeDoneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
        }
    
        // Helper function to navigate between steps
        function goToStep(stepId) {
          console.log('Navigating to step:', stepId);
          const steps = wrapper.querySelectorAll('.workflow-step');
          steps.forEach(step => {
            step.classList.remove('active');
          });
          const targetStep = wrapper.querySelector(`#${stepId}`);
          if (targetStep) {
            targetStep.classList.add('active');
            
            // Re-initialize autocomplete if we're going to the address step
            if (stepId === 'step-address') {
              console.log('Re-initializing autocomplete on step change to address input');
              // Wait a moment for the DOM to update
              setTimeout(() => {
                setupAutocomplete();
              }, 300);
            }
          } else {
            console.error('Target step not found:', stepId);
          }
        }
    
        // Function to search for a location using the Google Places API
        function searchLocation() {
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          const accommodationValue = accommodationInput ? accommodationInput.value : '';
          const city = 'Honolulu'; // Always use Honolulu as the city
    
          if (!accommodationValue) {
            alert('Please enter your accommodation name or address');
            return;
          }
    
          // Show loading indicator
          goToStep('step-searching');
    
          // Format the full address for the API call
          const fullAddress = `${accommodationValue}, ${city}, Hawaii`;
    
          // Use Geocoding API
          geocodeAddress(fullAddress);
        }
    
        // Geocode an address using the Geocoding API (more reliable than Places API)
        function geocodeAddress(fullAddress) {
          const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
          
          fetch(geocodingUrl)
            .then(response => response.json())
            .then(data => {
              if (data.status === 'OK' && data.results && data.results.length > 0) {
                const result = data.results[0];
                
                // Format and save location data
                const locationData = {
                  address: result.formatted_address,
                  placeId: result.place_id,
                  lat: result.geometry.location.lat,
                  lng: result.geometry.location.lng
                };
                
                workflowData.userLocation = locationData;
                
                // Create and embed the map using place ID
                const mapContainer = wrapper.querySelector('#location-map');
                const mapFallback = wrapper.querySelector('#location-map-fallback');
                
                if (mapContainer) {
                  try {
                    // Use place ID for more accurate mapping
                    const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                    
                    mapContainer.innerHTML = `
                      <iframe
                        width="100%"
                        height="100%"
                        frameborder="0"
                        style="border:0"
                        src="${mapUrl}"
                        allowfullscreen
                        onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                        onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                      ></iframe>
                    `;
                    
                    // Fallback in case iframe doesn't load
                    if (mapFallback) {
                      const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                      if (fallbackAddressEl) {
                        fallbackAddressEl.textContent = locationData.address;
                      }
                    }
                  } catch (error) {
                    console.error('Error embedding map:', error);
                    if (mapContainer) mapContainer.style.display = 'none';
                    if (mapFallback) mapFallback.style.display = 'block';
                  }
                }
                
                // Move to the confirmation step
                goToStep('step-location-confirm');
              } else {
                console.error('Geocoding API error or no results:', data.status);
                alert('Unable to find the location. Please try again with more specific address details.');
                goToStep('step-address');
              }
            })
            .catch(error => {
              console.error('Error using Geocoding API:', error);
              alert('Unable to find the location. Please check your internet connection and try again.');
              goToStep('step-address');
            });
        }
    
        // Haversine formula to calculate distance between coordinates
        function calculateDistance(lat1, lon1, lat2, lon2) {
          function toRadians(degrees) {
            return degrees * (Math.PI / 180);
          }
    
          const R = 6371; // Radius of the Earth in kilometers
          const dLat = toRadians(lat2 - lat1);
          const dLon = toRadians(lon2 - lon1);
          const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          const distance = R * c; // Distance in kilometers
          return distance;
        }
    
        // Function to find the nearest pickup point - now always returns the fixed pickup
        function findPickupPoint() {
          goToStep('step-finding-pickup');
    
          setTimeout(() => {
            // Always use the fixed pickup location
            workflowData.nearestPickup = FIXED_PICKUP;
    
            // Update the pickup info
            const pickupImage = wrapper.querySelector('#pickup-image');
            const pickupTitle = wrapper.querySelector('#pickup-title');
            const pickupAddress = wrapper.querySelector('#pickup-address');
            const pickupTime = wrapper.querySelector('#pickup-time');
            const pickupDetails = wrapper.querySelector('#pickup-details');
    
            if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
            if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
            if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
            if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
            if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;
    
            // Move to the pickup info step
            goToStep('step-pickup-info');
          }, 2000);
        }
    
        // Function to show the route map with transportation mode
        function showRouteMap() {
          // Get selected transportation mode
          const transportModeSelect = wrapper.querySelector('#transport-mode');
          const mode = transportModeSelect ? transportModeSelect.value : 'walking';
          
          // Format the origin and destination coordinates
          const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
          const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
          
          // Get the route map container
          const routeMapContainer = wrapper.querySelector('#route-map');
          const routeMapFallback = wrapper.querySelector('#route-map-fallback');
          
          if (routeMapContainer) {
            try {
              // Create an iframe with directions using the selected mode
              const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
              
              routeMapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${directionsUrl}"
                  allowfullscreen
                  onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
                  onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (routeMapFallback) {
                const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
                if (fallbackRouteDetails) {
                  fallbackRouteDetails.innerHTML = `
                    <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
                  `;
                }
              }
            } catch (error) {
              console.error('Error embedding route map:', error);
              if (routeMapContainer) routeMapContainer.style.display = 'none';
              if (routeMapFallback) routeMapFallback.style.display = 'block';
            }
          }
    
          // Update route details
          const routeFrom = wrapper.querySelector('#route-from');
          const routeTo = wrapper.querySelector('#route-to');
          const routeTime = wrapper.querySelector('#route-time');
    
          if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
          if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;
    
          // Calculate travel time based on mode
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            workflowData.nearestPickup.lat,
            workflowData.nearestPickup.lon
          );
          
          // Different speed estimates for different modes (km/h)
          const speeds = {
            walking: 4,        // 4 km/h average walking speed
            bicycling: 15,     // 15 km/h casual biking
            driving: 40,       // 40 km/h urban driving with traffic
            transit: 20        // 20 km/h average transit speed including wait times
          };
          
          const speedKmPerHour = speeds[mode] || speeds.walking;
          const timeInHours = distance / speedKmPerHour;
          const timeMinutes = Math.round(timeInHours * 60);
          
          const modeDisplay = {
            walking: 'Walking',
            bicycling: 'Biking',
            driving: 'Driving',
            transit: 'Transit'
          };
          
          // Removed setting route time text as it's redundant with the map display
    
          // Go to the route step
          goToStep('step-route');
          
          // Add event listener for mode change - if not already added
          const transportModeElement = wrapper.querySelector('#transport-mode');
          if (transportModeElement && !transportModeElement.dataset.listenerAdded) {
            transportModeElement.addEventListener('change', function() {
              showRouteMap(); // Refresh the route with the new mode
            });
            transportModeElement.dataset.listenerAdded = 'true';
          }
        }
    
        // Function to handle workflow cancellation
        function cancelWorkflow() {
          // Signal to Voiceflow that the workflow is cancelled
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-cancel'
              }
            });
          }
        }
    
        // Function to handle workflow completion
        function completeWorkflow() {
          // Prepare data to send back to Voiceflow
          const completionData = {
            selectedTour: workflowData.selectedTourName,
            userAddress: workflowData.userLocation.address,
            pickupPoint: workflowData.nearestPickup.name,
            pickupTime: workflowData.nearestPickup.time,
            pickupInstructions: workflowData.nearestPickup.instructions,
            userLat: workflowData.userLocation.lat,
            userLon: workflowData.userLocation.lng,
            pickupLat: workflowData.nearestPickup.lat,
            pickupLon: workflowData.nearestPickup.lon
          };
    
          // Signal to Voiceflow that the workflow is complete with the collected data
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-complete',
                data: completionData
              }
            });
          }
        }
    
            // Setup event listeners immediately before API loading
            setupEventListeners();
    
            // Initialize the workflow with robust handling
            loadGoogleMapsScript()
              .then(() => {
                console.log('Google Maps API loaded successfully');
                setupAutocomplete();
              })
              .catch(error => {
                console.error('Failed to load Google Maps API:', error);
                // Add direct script tag as a desperate fallback (no callback)
                console.log('Adding direct script tag as fallback after API load failure');
                const script = document.createElement('script');
                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
                script.onload = () => {
                  console.log('Fallback Google Maps API loaded');
                  setTimeout(() => {
                    setupAutocomplete();
                  }, 500);
                };
                document.head.appendChild(script);
              });
          },
        };

    // YRS: VERSION 18 (13 March 2025)

    export const DirectionsWorkflowExtension18 = {
      name: 'DirectionsWorkflow',
      type: 'response',
      match: ({ trace }) =>
        trace.type === 'ext_directionsWorkflow18' || trace.payload?.name === 'ext_directionsWorkflow18',
      render: ({ trace, element }) => {
        // Extract properties from the payload
        const { 
          apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
          pickupPoints = [], // This will come from your data
          workflowTitle = 'Find Your Pickup Location',
          height = '700', // Increased height to give more space for buttons
          padding = '15px',
          delay = 0,
          backgroundColor = '#ffffff',
          maxWidth = '500px', // Set consistent max-width
          // Branding colors
          primaryColor = '#587C74',
          secondaryColor = '#3B534E',
          // Border options
          borderWidth = '2px',
          borderColor = '#587C74',
          borderStyle = 'solid',
          borderRadius = '12px',
          // Shadow and effects
          shadowColor = 'rgba(88, 124, 116, 0.2)',
          shadowSize = '8px',
          // Animation
          animateIn = true,
          // Default location bias
          defaultLat = 21.315603,
          defaultLng = -157.858093,
          defaultRadius = 30000.0
        } = trace.payload || {};
    
        // Default pickup points if none are provided
        const defaultPickupPoints = [
          { 
            name: "Aloha Tower trolley stop", 
            lat: 21.30693198561091, 
            lon: -157.8663891824468, 
            instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
            time: "6:45 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
            mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
          },
          { 
            name: "Ala Moana Hotel - curbside on Mahukona Street", 
            lat: 21.290298342118497, 
            lon: -157.84001436219415, 
            instructions: "Meet us near the curbside at Mahukona St", 
            time: "6:50 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
            mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
          },
          { 
            name: "Hilton Hawaiian Village - Grand Islander bus depot", 
            lat: 21.282800616178037, 
            lon: -157.83548235215594, 
            instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
            time: "7:00 AM", 
            image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
            mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
          }
        ];
    
        // Clean element first
        element.innerHTML = '';
    
        // Create a container for the workflow with fixed width
        const container = document.createElement('div');
        container.style.width = '100%';
        container.style.display = 'flex';
        container.style.justifyContent = 'center';
        container.style.alignItems = 'center';
        container.style.backgroundColor = 'transparent';
        container.style.margin = '0';
        container.style.padding = '0';
        
        // Create the main wrapper with FIXED WIDTH
        const wrapper = document.createElement('div');
        wrapper.className = 'directions-workflow-wrapper';
        
        // Apply styling with fixed pixel width
        const fixedWidth = '460px'; // Fixed pixel width for all steps
        wrapper.style.width = fixedWidth;
        wrapper.style.minWidth = fixedWidth;
        wrapper.style.maxWidth = fixedWidth;
        wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
        wrapper.style.borderRadius = borderRadius;
        wrapper.style.overflow = 'hidden';
        wrapper.style.backgroundColor = backgroundColor;
        wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
        wrapper.style.height = height + 'px';
        wrapper.style.display = 'flex';
        wrapper.style.flexDirection = 'column';
        wrapper.style.margin = '0 auto'; // Center the wrapper
        wrapper.style.position = 'relative'; // For absolute positioning inside
    
        // Add animation if enabled
        if (animateIn) {
          wrapper.style.opacity = '0';
          wrapper.style.transform = 'translateY(20px)';
          wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        }
    
        // Tours data - 5 fictional Hawaiian tours
        const toursData = [
          {
            id: 'aloha-circle',
            name: 'Aloha Island Adventure',
            description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
          },
          {
            id: 'waimea-valley',
            name: 'Waimea Valley Experience',
            description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
          },
          {
            id: 'volcano-discovery',
            name: 'Volcano Discovery Journey',
            description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
          },
          {
            id: 'polynesian-heritage',
            name: 'Polynesian Heritage Tour',
            description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
          },
          {
            id: 'paradise-snorkel',
            name: 'Paradise Snorkel Safari',
            description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
            image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
          }
        ];
    
        // Fixed Duke Paoa Kahanamoku Statue location
        const FIXED_PICKUP = {
          name: "Duke Paoa Kahanamoku Statue",
          lat: 21.277054,
          lon: -157.826810,
          instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
          time: "8:00 AM",
          image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
          mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
        };
    
        // Updated function to load Google Maps API with Places library using bootstrap loader
        const loadGoogleMapsScript = () => {
          return new Promise((resolve, reject) => {
            // Check if API is already loaded
            if (window.google && window.google.maps && window.google.maps.places) {
              console.log('Google Maps API already loaded');
              resolve();
              return;
            }
            
            // Define callback function that will be called by Google Maps API
            window.initGoogleMaps = function() {
              console.log('Google Maps API loaded successfully via callback');
              resolve();
            };
            
            // Set a timeout to catch loading failures
            const timeoutId = setTimeout(() => {
              console.error('Google Maps API loading timed out');
              reject(new Error('Google Maps API loading timed out'));
            }, 10000);
            
            // Create the bootstrap loader script
            const script = document.createElement('script');
            script.innerHTML = `
              (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
                key: "${apiKey}",
                v: "alpha" // Use alpha channel for Places API (Preview)
              });
            `;
            
            script.onload = function() {
              clearTimeout(timeoutId);
              console.log('Google Maps bootstrap script loaded');
              
              // Try to load the places library immediately
              setTimeout(async () => {
                try {
                  if (window.google && window.google.maps) {
                    await window.google.maps.importLibrary("places");
                    clearTimeout(timeoutId);
                    console.log('Places library loaded via importLibrary');
                    resolve();
                  }
                } catch (err) {
                  console.warn('Initial importLibrary attempt failed:', err);
                  // Don't reject here, the callback might still work
                }
              }, 500);
            };
            
            script.onerror = function(error) {
              clearTimeout(timeoutId);
              console.error('Error loading Google Maps bootstrap script:', error);
              reject(new Error('Failed to load Google Maps API'));
            };
            
            document.head.appendChild(script);
          });
        };
        
              // Initialize the mode icon when showing the route step
          const routeStepBtn = wrapper.querySelector('#show-route-btn');
          if (routeStepBtn) {
            routeStepBtn.addEventListener('click', function() {
              // Set the initial icon after a short delay to ensure DOM is ready
              setTimeout(() => {
                const modeSelect = wrapper.querySelector('#transport-mode');
                if (modeSelect) {
                  updateTransportModeIcon(modeSelect.value);
                }
              }, 200);
            });
          }
          
          // Improved function to initialize Google Places Autocomplete with better error handling
        function setupAutocomplete() {
          console.log('Setting up autocomplete...');
          
          // Check if Google Maps API is loaded
          if (!window.google || !window.google.maps || !window.google.maps.places) {
            console.error('Google Maps API not fully loaded, cannot set up autocomplete');
            return;
          }
          
          // Get input field - now we only have one field
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          
          // Debug info
          console.log('Accommodation input found:', !!accommodationInput);
          
          // Check if DOM element exists
          if (!accommodationInput) {
            console.error('Required input not found for autocomplete');
            return;
          }
          
          // Initialize autocomplete on the accommodation field
          console.log('Creating accommodation autocomplete');
          try {
            const accommodationOptions = {
              // Allow both establishments and addresses
              types: [], // No type restrictions to allow both
              componentRestrictions: {country: 'us'},
              // Add location bias for Honolulu
              bounds: new google.maps.LatLngBounds(
                new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
                new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
              ),
              strictBounds: false, // Allow results outside the bounds
              fields: ['formatted_address', 'geometry', 'name', 'place_id']
            };
            
            const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
            
            // When a place is selected
            autocomplete.addListener('place_changed', function() {
              const place = autocomplete.getPlace();
              
              if (!place.geometry) {
                console.error('No place details available for selection');
                return;
              }
              
              // The place data is already captured in the input field
              console.log('Place selected:', place.name);
            });
            
            console.log('Accommodation autocomplete successfully initialized');
          } catch (error) {
            console.error('Error initializing accommodation autocomplete:', error);
          }
        }
    
        // Basic styling and tour selection HTML
        wrapper.innerHTML = `
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
            
            *, *::before, *::after {
              box-sizing: border-box;
            }
            
            .directions-workflow-container * {
              box-sizing: border-box;
              font-family: 'Inter', sans-serif;
            }
            
            .directions-workflow-container {
              display: flex;
              flex-direction: column;
              height: 100%;
              color: #333;
              width: 100%;
              max-width: 100%;
              min-width: 100%;
              position: relative;
            }
            
            .workflow-header {
              background-color: ${primaryColor};
              color: white;
              padding: 16px;
              text-align: center;
              font-weight: 600;
              width: 100%;
            }
            
            .workflow-header h2 {
              margin: 0;
              font-size: 18px;
            }
            
            .workflow-content {
              flex: 1;
              overflow-y: auto;
              position: relative;
              width: 100%;
            }
            
            .workflow-step {
              height: 100%;
              width: 100%;
              max-width: 100%;
              padding: 20px;
              display: none;
              animation: fadeIn 0.3s ease-in-out;
              box-sizing: border-box;
              overflow: hidden;
              position: relative;
            }
            
            .workflow-step.active {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: flex-start;
            }
            
            @keyframes fadeIn {
              from { opacity: 0; }
              to { opacity: 1; }
            }
            
            /* Progress Steps - Positioned in top right */
            .progress-container {
              position: absolute;
              top: 8px;
              right: 10px;
              z-index: 5;
            }
            
            .progress-steps {
              display: flex;
              align-items: center;
              justify-content: flex-end;
              gap: 4px;
            }
            
            .workflow-step-indicator {
              width: 28px;
              height: 28px;
              border-radius: 50%;
              background-color: #ddd;
              display: flex;
              align-items: center;
              justify-content: center;
              color: #555;
              font-weight: 600;
              font-size: 14px;
              margin: 0 2px;
            }
            
            .workflow-step-indicator.active {
              background-color: ${primaryColor};
              color: white;
            }
            
            .workflow-step-indicator.completed {
              background-color: ${primaryColor};
              color: white;
            }
            
            /* Connector lines between step indicators */
            .workflow-step-indicator:not(:last-child):after {
              content: "";
              display: inline-block;
              position: absolute;
              width: 8px;
              height: 2px;
              background-color: #ddd;
              margin-left: 30px;
            }
            
            .workflow-step-indicator.completed:not(:last-child):after {
              background-color: ${primaryColor};
            }
            
            /* Tour Carousel - Smooth sliding with fixed card positions */
            .tour-carousel-container {
              width: 100%;
              position: relative;
              margin: 20px auto 50px;
              height: 360px; /* Fixed height to ensure visibility */
              overflow: visible;
            }
            
            /* Carousel track for smooth sliding */
            .carousel-track {
              display: flex;
              position: absolute;
              left: 0;
              right: 0;
              transition: transform 0.4s ease;
              width: 100%;
              height: 100%;
            }
            
            /* Main card styling */
            .tour-card {
              position: absolute;
              width: 280px;
              height: 360px;
              border-radius: 12px;
              overflow: hidden;
              transition: all 0.4s ease;
              transform-origin: center center;
              box-shadow: 0 4px 10px rgba(0,0,0,0.1);
              border: 2px solid transparent;
              background-color: white;
            }
            
            /* Center card */
            .tour-card.center {
              left: 50%;
              transform: translateX(-50%) scale(1);
              opacity: 1;
              z-index: 3;
            }
            
            /* Left card */
            .tour-card.left {
              left: 50%;
              transform: translateX(calc(-50% - 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Right card */
            .tour-card.right {
              left: 50%;
              transform: translateX(calc(-50% + 200px)) scale(0.8);
              opacity: 0.6;
              z-index: 1;
            }
            
            /* Hide cards that are outside visible range */
            .tour-card.off-left {
              left: 50%;
              transform: translateX(calc(-50% - 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.off-right {
              left: 50%;
              transform: translateX(calc(-50% + 400px)) scale(0.6);
              opacity: 0;
              z-index: 0;
            }
            
            .tour-card.selected {
              border: 2px solid ${primaryColor};
            }
            
            .tour-image-container {
              width: 100%;
              height: 200px; /* Height for image */
              overflow: hidden;
              position: relative;
            }
            
            .tour-image {
              width: 100%;
              height: 100%;
              object-fit: cover;
            }
            
            .tour-info {
              padding: 12px 15px;
              flex: 1;
              display: flex;
              flex-direction: column;
            }
            
            .tour-info h4 {
              margin: 0 0 8px;
              font-size: 18px;
              color: #333;
            }
            
            .tour-description {
              font-size: 14px;
              color: #555;
              margin-bottom: 16px;
              flex: 1;
            }
            
            .select-tour-btn {
              display: block;
              width: 100%;
              padding: 10px;
              background-color: ${primaryColor};
              color: white;
              border: none;
              border-radius: 6px;
              font-weight: 500;
              cursor: pointer;
              transition: background-color 0.2s;
            }
            
            .select-tour-btn:hover {
              background-color: ${secondaryColor};
            }
            
            /* Carousel Arrows - with show/hide logic */
            .carousel-arrow {
              position: absolute;
              top: 40%;
              transform: translateY(-50%);
              width: 36px;
              height: 36px;
              background-color: white;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              z-index: 10;
              box-shadow: 0 2px 6px rgba(0,0,0,0.2);
              transition: all 0.3s ease;
            }
            
            .carousel-arrow:hover {
              background-color: #f5f5f5;
              box-shadow: 0 4px 8px rgba(0,0,0,0.25);
              transform: translateY(-50%) scale(1.1);
            }
            
            .carousel-arrow.prev {
              left: 5px;
            }
            
            .carousel-arrow.next {
              right: 5px;
            }
            
            .carousel-arrow.hidden {
              display: none;
            }
            
            .carousel-arrow svg {
              width: 24px;
              height: 24px;
              fill: #555;
            }
            
            /* Carousel indicators */
            .carousel-indicators {
              display: flex;
              justify-content: center;
              margin-top: 15px;
            }
            
            .carousel-indicator {
              width: 8px;
              height: 8px;
              border-radius: 50%;
              background-color: #ddd;
              margin: 0 4px;
              transition: all 0.2s;
              cursor: pointer;
            }
            
            .carousel-indicator.active {
              background-color: ${primaryColor};
              transform: scale(1.2);
            }
            
            /* Address Form */
            .address-form {
              margin-top: 10px;
              width: 100%;
            }
            
            .form-group {
              margin-bottom: 16px;
              width: 100%;
            }
            
            .form-group label {
              display: block;
              margin-bottom: 6px;
              font-weight: 500;
              font-size: 14px;
            }
            
            .form-control {
              width: 100%;
              padding: 12px;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              font-size: 15px;
              transition: border-color 0.2s;
              box-sizing: border-box;
            }
            
            .form-control:focus {
              outline: none;
              border-color: ${primaryColor};
            }
            
            /* Material Icons Styling */
            .material-symbols-outlined {
              font-variation-settings:
              'FILL' 0,
              'wght' 400,
              'GRAD' 0,
              'opsz' 24;
              vertical-align: middle;
              margin-right: 8px;
            }
            
            /* Transport Mode Icon Display */
            .transport-mode-container {
              display: flex;
              align-items: center;
              margin-bottom: 15px;
            }
            
            .transport-mode-icon {
              background-color: ${primaryColor};
              color: white;
              width: 42px;
              height: 42px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin-right: 12px;
            }
            
            .transport-mode-icon img {
              width: 24px;
              height: 24px;
              display: block;
              filter: brightness(0) invert(1); /* Make SVG white */
            }
    
            /* Fix for autocomplete dropdown */
            .pac-container {
              z-index: 10000 !important;
              box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
              border-radius: 8px;
              border: 1px solid #eaeaea;
              margin-top: 4px;
              font-family: 'Inter', sans-serif;
            }
            
            .pac-item {
              padding: 8px 10px;
              cursor: pointer;
              font-family: 'Inter', sans-serif !important;
            }
            
            .pac-item:hover {
              background-color: #f5f5f5;
            }
            
            .pac-icon {
              margin-right: 8px;
            }
            
            .pac-item-query {
              font-size: 14px;
              font-weight: 500;
            }
            
            /* Loading Animation */
            .loading-container {
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              height: 100%;
              text-align: center;
              width: 100%;
            }
            
            .loading-spinner {
              width: 50px;
              height: 50px;
              border: 5px solid rgba(88, 124, 116, 0.2);
              border-radius: 50%;
              border-top: 5px solid ${primaryColor};
              animation: spin 1s linear infinite;
              margin-bottom: 20px;
            }
            
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
            
            .loading-text {
              font-size: 18px;
              font-weight: 500;
              margin-top: 15px;
            }
            
            /* Map Containers */
            .map-container, .route-map-container {
              margin-top: 15px;
              border-radius: 12px;
              overflow: hidden;
              border: 2px solid ${primaryColor};
              width: 100%;
              position: relative;
              aspect-ratio: 4/3; /* Maintain aspect ratio */
            }
            
            .map-container iframe, .route-map-container iframe {
              width: 100%;
              height: 100%;
              border: none;
            }
            
            .confirmation-text {
              margin: 15px 0;
              text-align: center;
              font-weight: 500;
              width: 100%;
            }
            
            /* Pickup Card */
            .pickup-card {
              border-radius: 12px;
              overflow: hidden;
              margin-top: 15px;
              box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
              border: 2px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .pickup-image {
              width: 100%;
              height: 180px; /* Fixed height for pickup images */
              object-fit: cover;
            }
            
            .pickup-info {
              padding: 15px;
            }
            
            .pickup-title {
              font-size: 18px;
              font-weight: 600;
              margin-bottom: 8px;
              color: ${primaryColor};
            }
            
            .pickup-address {
              font-size: 15px;
              margin-bottom: 10px;
            }
            
            .pickup-instructions {
              font-size: 14px;
              color: #555;
              border-left: 3px solid ${primaryColor};
              padding-left: 10px;
              margin-top: 10px;
            }
            
            /* Route Details */
            .route-details {
              margin-top: 15px;
              padding: 12px;
              background-color: #f8f9fa;
              border-radius: 8px;
              font-size: 14px;
              border-left: 3px solid ${primaryColor};
              width: 100%;
              box-sizing: border-box;
            }
            
            .route-details p {
              margin: 5px 0;
            }
            
            .route-details .walk-time {
              font-weight: 600;
              color: ${primaryColor};
            }
            
            /* Buttons */
            .btn-container {
              display: flex;
              justify-content: space-between;
              width: 100%;
              position: absolute;
              bottom: 20px;
              left: 0;
              padding: 0 20px;
            }
            
            .btn {
              padding: 12px 24px;
              border-radius: 8px;
              font-weight: 500;
              cursor: pointer;
              border: none;
              font-size: 15px;
              transition: all 0.2s ease;
              min-width: 100px;
              margin-top: 15px;
            }
            
            .btn-primary {
              background-color: ${primaryColor};
              color: white;
            }
            
            .btn-primary:hover {
              background-color: ${secondaryColor};
            }
            
            .btn-secondary {
              background-color: #f1f3f5;
              color: #495057;
            }
            
            .btn-secondary:hover {
              background-color: #e9ecef;
            }
            
            .btn-route {
              display: flex;
              align-items: center;
              justify-content: center;
              gap: 8px;
              width: 100%;
              background-color: ${primaryColor};
              color: white;
              margin-top: 15px;
              margin-bottom: 60px; /* Add space below the Show Route button to avoid collision with bottom buttons */
            }
            
            .btn-route:hover {
              background-color: ${secondaryColor};
            }
    
            /* Map fallback */
            .map-fallback {
              display: none;
              padding: 20px;
              text-align: center;
              background-color: #f8f9fa;
              border-radius: 8px;
              height: 100%;
              width: 100%;
              box-sizing: border-box;
            }
            
            /* Make all steps have consistent width */
            h3, p, form, div.progress-container,
            div.pickup-card, div.route-details, button.btn-route,
            div.map-container, div.route-map-container, div.map-fallback {
              width: 100%;
              max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
            }
            
            /* Fix overflow issues with internal content */
            img, iframe {
              max-width: 100%;
              border: 0;
            }
          </style>
          
          <div class="directions-workflow-container">
            <div class="workflow-header">
              <h2>${workflowTitle}</h2>
            </div>
            
            <div class="workflow-content">
              <!-- Step 1: Tour Selection with Carousel -->
              <div class="workflow-step active" id="step-tour">
                <h3>Select Your Tour</h3>
                <p>Please select the tour you'll be joining:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator active completed">1</div>
                    <div class="workflow-step-indicator">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <!-- Carousel with smooth sliding transitions -->
                <div class="tour-carousel-container">
                  <!-- Left arrow -->
                  <div class="carousel-arrow prev hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                    </svg>
                  </div>
                  
                  <!-- Carousel track with cards -->
                  <div class="carousel-track" id="carousel-track">
                    <!-- Cards will be dynamically generated here -->
                  </div>
                  
                  <!-- Right arrow -->
                  <div class="carousel-arrow next">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                    </svg>
                  </div>
                </div>
                
                <!-- Indicators -->
                <div class="carousel-indicators" id="carousel-indicators">
                  ${toursData.map((_, index) => `
                    <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                  `).join('')}
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
                  <button class="btn btn-primary" id="next-btn">Next</button>
                </div>
              </div>
              
              <!-- Step 2: Address Input - SIMPLIFIED TO ONE FIELD -->
              <div class="workflow-step" id="step-address">
                <h3>Enter Your Accommodation</h3>
                <p>Please enter the address where you're staying:</p>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator active completed">2</div>
                    <div class="workflow-step-indicator">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <form class="address-form" id="address-form">
                  <div class="form-group">
                    <label for="accommodation-input">Accommodation Name or Address*</label>
                    <input type="text" id="accommodation-input" class="form-control" placeholder="Hotel name or full address" required>
                  </div>
                </form>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
                  <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
                </div>
              </div>
              
              <!-- Step 3: Searching Animation -->
              <div class="workflow-step" id="step-searching">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Searching for location...</div>
                </div>
              </div>
              
              <!-- Step 4: Location Confirmation -->
              <div class="workflow-step" id="step-location-confirm">
                <h3>Confirm Your Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator active completed">3</div>
                    <div class="workflow-step-indicator">4</div>
                  </div>
                </div>
                
                <div class="map-container" id="location-map">
                  <!-- Map will be inserted here by JavaScript -->
                </div>
                <div class="map-fallback" id="location-map-fallback">
                  <p>Unable to display map.</p>
                  <p id="fallback-address"></p>
                </div>
                
                <p class="confirmation-text">Is this the correct location?</p>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
                  <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
                </div>
              </div>
              
              <!-- Step 5: Finding Pickup Animation -->
              <div class="workflow-step" id="step-finding-pickup">
                <div class="loading-container">
                  <div class="loading-spinner"></div>
                  <div class="loading-text">Finding nearest pickup point...</div>
                </div>
              </div>
              
              <!-- Step 6: Pickup Point Info -->
              <div class="workflow-step" id="step-pickup-info">
                <h3>Your Pickup Location</h3>
                
                <div class="progress-container">
                  <div class="progress-steps">
                    <div class="workflow-step-indicator completed">1</div>
                    <div class="workflow-step-indicator completed">2</div>
                    <div class="workflow-step-indicator completed">3</div>
                    <div class="workflow-step-indicator active completed">4</div>
                  </div>
                </div>
                
                <div class="pickup-card">
                  <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
                  <div class="pickup-info">
                    <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                    <p class="pickup-address" id="pickup-address"></p>
                    <div class="pickup-instructions" id="pickup-instructions">
                      <p id="pickup-time"></p>
                      <p id="pickup-details"></p>
                    </div>
                  </div>
                </div>
                
                <button class="btn btn-route" id="show-route-btn">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  Show Route
                </button>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
                  <button class="btn btn-primary" id="done-btn">Done</button>
                </div>
              </div>
              
              <!-- Step 7: Route Map with Transportation Mode Selection -->
              <div class="workflow-step" id="step-route">
                <h3>Getting to Your Pickup Point</h3>
                
                <div class="transport-mode-container">
                  <div class="transport-mode-icon" id="transport-mode-icon">
                    <img src="https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg" alt="Walking" id="transport-mode-img">
                  </div>
                  <div class="form-group" style="flex: 1;">
                    <label for="transport-mode">Transportation Mode:</label>
                    <select id="transport-mode" class="form-control">
                      <option value="walking" selected>Walking</option>
                      <option value="bicycling">Bicycling</option>
                      <option value="driving">Driving</option>
                      <option value="transit">Public Transit</option>
                    </select>
                  </div>
                </div>
                
                <div class="route-map-container" id="route-map">
                  <!-- Route map will be inserted here -->
                </div>
                <div class="map-fallback" id="route-map-fallback">
                  <p>Unable to display route map.</p>
                  <div id="fallback-route-details"></div>
                </div>
                
                <div class="route-details">
                  <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
                  <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
                  <!-- Removed redundant travel time text as it's visible in the map -->
                </div>
                
                <div class="btn-container">
                  <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
                  <button class="btn btn-primary" id="route-done-btn">Done</button>
                </div>
              </div>
            </div>
          </div>
        `;
        
        // Add the wrapper to the container
        container.appendChild(wrapper);
        element.appendChild(container);
    
        // Make sure the wrapper becomes visible and scroll is enabled
        if (animateIn) {
          setTimeout(() => {
            wrapper.style.opacity = '1';
            wrapper.style.transform = 'translateY(0)';
          }, 100);
        }
    
        // Initialize workflow with scoped variables
        const workflowData = {
          selectedTour: "",
          selectedTourName: "",
          userLocation: {
            address: "",
            placeId: "", 
            lat: 0,
            lng: 0
          },
          nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
          apiKey: apiKey,
          currentCarouselIndex: 0 // Track current carousel position
        };
    
        // Function to create and position carousel cards
        function createCarouselCards() {
          const carouselTrack = wrapper.querySelector('#carousel-track');
          if (!carouselTrack) return;
          
          // Clear existing content
          carouselTrack.innerHTML = '';
          
          // Create all tour cards with proper positioning classes
          toursData.forEach((tour, index) => {
            const card = document.createElement('div');
            
            // Determine position class based on index relative to current index
            let positionClass = '';
            if (index === workflowData.currentCarouselIndex) {
              positionClass = 'center';
            } else if (index === workflowData.currentCarouselIndex - 1) {
              positionClass = 'left';
            } else if (index === workflowData.currentCarouselIndex + 1) {
              positionClass = 'right';
            } else if (index < workflowData.currentCarouselIndex) {
              positionClass = 'off-left';
            } else {
              positionClass = 'off-right';
            }
            
            card.className = `tour-card ${positionClass}`;
            card.dataset.tourId = tour.id;
            card.dataset.tourName = tour.name;
            card.dataset.index = index;
            
            // Add selected class if this is the selected tour
            if (tour.id === workflowData.selectedTour) {
              card.classList.add('selected');
            }
            
            card.innerHTML = `
              <div class="tour-image-container">
                <img src="${tour.image}" alt="${tour.name}" class="tour-image">
              </div>
              <div class="tour-info">
                <h4>${tour.name}</h4>
                <div class="tour-description">${tour.description}</div>
                <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
              </div>
            `;
            
            carouselTrack.appendChild(card);
          });
          
          // Add event listeners to all select buttons
          const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
          selectButtons.forEach(button => {
            button.addEventListener('click', (e) => {
              const tourId = e.target.dataset.tourId;
              const tourName = e.target.dataset.tourName;
              
              // Clear previous selections
              const cards = carouselTrack.querySelectorAll('.tour-card');
              cards.forEach(card => card.classList.remove('selected'));
              
              // Mark the parent card as selected
              const parentCard = e.target.closest('.tour-card');
              if (parentCard) {
                parentCard.classList.add('selected');
                workflowData.selectedTour = tourId;
                workflowData.selectedTourName = tourName;
              }
            });
          });
        }
    
        // Function to update carousel display
        function updateCarousel() {
          // Update card positions based on current index
          const cards = wrapper.querySelectorAll('.tour-card');
          
          cards.forEach((card, index) => {
            // Remove all position classes
            card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
            
            // Add appropriate position class
            if (index === workflowData.currentCarouselIndex) {
              card.classList.add('center');
            } else if (index === workflowData.currentCarouselIndex - 1) {
              card.classList.add('left');
            } else if (index === workflowData.currentCarouselIndex + 1) {
              card.classList.add('right');
            } else if (index < workflowData.currentCarouselIndex) {
              card.classList.add('off-left');
            } else {
              card.classList.add('off-right');
            }
          });
          
          // Update indicators
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
          });
          
          // Update arrow visibility
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          
          if (prevArrow) {
            prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
          }
          
          if (nextArrow) {
            nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
          }
        }
    
        // Function to update the transport mode icon
        function updateTransportModeIcon(mode) {
          const iconImg = wrapper.querySelector('#transport-mode-img');
          if (!iconImg) return;
          
          // SVG paths from the repository
          const iconPaths = {
            walking: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg',
            bicycling: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bike%20Directions%20Icon.svg',
            driving: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Car%20Directions%20Icon.svg',
            transit: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bus%20Icon.svg'
          };
          
          // Set the appropriate icon based on the mode
          const iconPath = iconPaths[mode] || iconPaths.walking;
          iconImg.src = iconPath;
          iconImg.alt = mode.charAt(0).toUpperCase() + mode.slice(1);
        }
        
        // Add event listeners and initialize carousel
        function setupEventListeners() {
          // Create initial carousel cards
          createCarouselCards();
          
          // Get carousel navigation elements
          const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
          const nextArrow = wrapper.querySelector('.carousel-arrow.next');
          const indicators = wrapper.querySelectorAll('.carousel-indicator');
          
          // Previous slide
          if (prevArrow) {
            prevArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex > 0) {
                workflowData.currentCarouselIndex--;
                updateCarousel();
              }
            });
          }
          
          // Next slide
          if (nextArrow) {
            nextArrow.addEventListener('click', () => {
              if (workflowData.currentCarouselIndex < toursData.length - 1) {
                workflowData.currentCarouselIndex++;
                updateCarousel();
              }
            });
          }
          
          // Indicator clicks
          indicators.forEach((indicator) => {
            indicator.addEventListener('click', () => {
              workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
              updateCarousel();
            });
          });
          
          // Get all other DOM elements we need
          const nextBtn = wrapper.querySelector('#next-btn');
          const cancelBtn = wrapper.querySelector('#cancel-btn');
          const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
          const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
          const editAddressBtn = wrapper.querySelector('#edit-address-btn');
          const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
          const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
          const doneBtn = wrapper.querySelector('#done-btn');
          const showRouteBtn = wrapper.querySelector('#show-route-btn');
          const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
          const routeDoneBtn = wrapper.querySelector('#route-done-btn');
    
          // Button event listeners
          nextBtn.addEventListener('click', () => {
            if (workflowData.selectedTour) {
              goToStep('step-address');
              setTimeout(() => {
                setupAutocomplete();
              }, 500);
            } else {
              alert('Please select a tour first.');
            }
          });
    
          cancelBtn.addEventListener('click', () => {
            cancelWorkflow();
          });
    
          backToTourBtn.addEventListener('click', () => {
            goToStep('step-tour');
          });
    
          findPickupBtn.addEventListener('click', () => {
            searchLocation();
          });
    
          editAddressBtn.addEventListener('click', () => {
            goToStep('step-address');
            setTimeout(() => {
              setupAutocomplete();
            }, 500);
          });
    
          confirmLocationBtn.addEventListener('click', () => {
            findPickupPoint();
          });
    
          backToConfirmBtn.addEventListener('click', () => {
            goToStep('step-location-confirm');
          });
    
          doneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
    
          showRouteBtn.addEventListener('click', () => {
            showRouteMap();
          });
    
          backToPickupBtn.addEventListener('click', () => {
            goToStep('step-pickup-info');
          });
    
          routeDoneBtn.addEventListener('click', () => {
            completeWorkflow();
          });
        }
    
        // Helper function to navigate between steps
        function goToStep(stepId) {
          console.log('Navigating to step:', stepId);
          const steps = wrapper.querySelectorAll('.workflow-step');
          steps.forEach(step => {
            step.classList.remove('active');
          });
          const targetStep = wrapper.querySelector(`#${stepId}`);
          if (targetStep) {
            targetStep.classList.add('active');
            
            // Re-initialize autocomplete if we're going to the address step
            if (stepId === 'step-address') {
              console.log('Re-initializing autocomplete on step change to address input');
              // Wait a moment for the DOM to update
              setTimeout(() => {
                setupAutocomplete();
              }, 300);
            }
          } else {
            console.error('Target step not found:', stepId);
          }
        }
    
        // Function to search for a location using the Google Places API
        function searchLocation() {
          const accommodationInput = wrapper.querySelector('#accommodation-input');
          const accommodationValue = accommodationInput ? accommodationInput.value : '';
          const city = 'Honolulu'; // Always use Honolulu as the city
    
          if (!accommodationValue) {
            alert('Please enter your accommodation name or address');
            return;
          }
    
          // Show loading indicator
          goToStep('step-searching');
    
          // Format the full address for the API call
          const fullAddress = `${accommodationValue}, ${city}, Hawaii`;
    
          // Use Geocoding API
          geocodeAddress(fullAddress);
        }
    
        // Geocode an address using the Geocoding API (more reliable than Places API)
        function geocodeAddress(fullAddress) {
          const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
          
          fetch(geocodingUrl)
            .then(response => response.json())
            .then(data => {
              if (data.status === 'OK' && data.results && data.results.length > 0) {
                const result = data.results[0];
                
                // Format and save location data
                const locationData = {
                  address: result.formatted_address,
                  placeId: result.place_id,
                  lat: result.geometry.location.lat,
                  lng: result.geometry.location.lng
                };
                
                workflowData.userLocation = locationData;
                
                // Create and embed the map using place ID
                const mapContainer = wrapper.querySelector('#location-map');
                const mapFallback = wrapper.querySelector('#location-map-fallback');
                
                if (mapContainer) {
                  try {
                    // Use place ID for more accurate mapping
                    const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                    
                    mapContainer.innerHTML = `
                      <iframe
                        width="100%"
                        height="100%"
                        frameborder="0"
                        style="border:0"
                        src="${mapUrl}"
                        allowfullscreen
                        onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                        onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                      ></iframe>
                    `;
                    
                    // Fallback in case iframe doesn't load
                    if (mapFallback) {
                      const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                      if (fallbackAddressEl) {
                        fallbackAddressEl.textContent = locationData.address;
                      }
                    }
                  } catch (error) {
                    console.error('Error embedding map:', error);
                    if (mapContainer) mapContainer.style.display = 'none';
                    if (mapFallback) mapFallback.style.display = 'block';
                  }
                }
                
                // Move to the confirmation step
                goToStep('step-location-confirm');
              } else {
                console.error('Geocoding API error or no results:', data.status);
                alert('Unable to find the location. Please try again with more specific address details.');
                goToStep('step-address');
              }
            })
            .catch(error => {
              console.error('Error using Geocoding API:', error);
              alert('Unable to find the location. Please check your internet connection and try again.');
              goToStep('step-address');
            });
        }
    
        // Haversine formula to calculate distance between coordinates
        function calculateDistance(lat1, lon1, lat2, lon2) {
          function toRadians(degrees) {
            return degrees * (Math.PI / 180);
          }
    
          const R = 6371; // Radius of the Earth in kilometers
          const dLat = toRadians(lat2 - lat1);
          const dLon = toRadians(lon2 - lon1);
          const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
          const distance = R * c; // Distance in kilometers
          return distance;
        }
    
        // Function to find the nearest pickup point - now always returns the fixed pickup
        function findPickupPoint() {
          goToStep('step-finding-pickup');
    
          setTimeout(() => {
            // Always use the fixed pickup location
            workflowData.nearestPickup = FIXED_PICKUP;
    
            // Update the pickup info
            const pickupImage = wrapper.querySelector('#pickup-image');
            const pickupTitle = wrapper.querySelector('#pickup-title');
            const pickupAddress = wrapper.querySelector('#pickup-address');
            const pickupTime = wrapper.querySelector('#pickup-time');
            const pickupDetails = wrapper.querySelector('#pickup-details');
    
            if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
            if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
            if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
            if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
            if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;
    
            // Move to the pickup info step
            goToStep('step-pickup-info');
          }, 2000);
        }
    
        // Function to show the route map with transportation mode
        function showRouteMap() {
          // Get selected transportation mode
          const transportModeSelect = wrapper.querySelector('#transport-mode');
          const mode = transportModeSelect ? transportModeSelect.value : 'walking';
          
          // Format the origin and destination coordinates
          const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
          const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
          
          // Get the route map container
          const routeMapContainer = wrapper.querySelector('#route-map');
          const routeMapFallback = wrapper.querySelector('#route-map-fallback');
          
          if (routeMapContainer) {
            try {
              // Create an iframe with directions using the selected mode
              const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
              
              routeMapContainer.innerHTML = `
                <iframe
                  width="100%"
                  height="100%"
                  frameborder="0"
                  style="border:0"
                  src="${directionsUrl}"
                  allowfullscreen
                  onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
                  onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
                ></iframe>
              `;
              
              // Fallback in case iframe doesn't load
              if (routeMapFallback) {
                const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
                if (fallbackRouteDetails) {
                  fallbackRouteDetails.innerHTML = `
                    <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
                  `;
                }
              }
            } catch (error) {
              console.error('Error embedding route map:', error);
              if (routeMapContainer) routeMapContainer.style.display = 'none';
              if (routeMapFallback) routeMapFallback.style.display = 'block';
            }
          }
    
          // Update route details
          const routeFrom = wrapper.querySelector('#route-from');
          const routeTo = wrapper.querySelector('#route-to');
          const routeTime = wrapper.querySelector('#route-time');
    
          if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
          if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;
    
          // Calculate travel time based on mode
          const distance = calculateDistance(
            workflowData.userLocation.lat,
            workflowData.userLocation.lng,
            workflowData.nearestPickup.lat,
            workflowData.nearestPickup.lon
          );
          
          // Different speed estimates for different modes (km/h)
          const speeds = {
            walking: 4,        // 4 km/h average walking speed
            bicycling: 15,     // 15 km/h casual biking
            driving: 40,       // 40 km/h urban driving with traffic
            transit: 20        // 20 km/h average transit speed including wait times
          };
          
          const speedKmPerHour = speeds[mode] || speeds.walking;
          const timeInHours = distance / speedKmPerHour;
          const timeMinutes = Math.round(timeInHours * 60);
          
          const modeDisplay = {
            walking: 'Walking',
            bicycling: 'Biking',
            driving: 'Driving',
            transit: 'Transit'
          };
          
          // Removed setting route time text as it's redundant with the map display
    
          // Go to the route step
          goToStep('step-route');
          
          // Set up the transport mode icon update functionality
          const transportModeElement = wrapper.querySelector('#transport-mode');
          const transportModeIcon = wrapper.querySelector('#transport-mode-icon');
          
          if (transportModeElement && transportModeIcon && !transportModeElement.dataset.listenerAdded) {
            // Update icon when mode changes
            transportModeElement.addEventListener('change', function() {
              // Update the icon based on selected mode
              updateTransportModeIcon(this.value);
              // Refresh the route with the new mode
              showRouteMap();
            });
            transportModeElement.dataset.listenerAdded = 'true';
          }
        }
    
        // Function to handle workflow cancellation
        function cancelWorkflow() {
          // Signal to Voiceflow that the workflow is cancelled
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-cancel'
              }
            });
          }
        }
    
        // Function to handle workflow completion
        function completeWorkflow() {
          // Prepare data to send back to Voiceflow
          const completionData = {
            selectedTour: workflowData.selectedTourName,
            userAddress: workflowData.userLocation.address,
            pickupPoint: workflowData.nearestPickup.name,
            pickupTime: workflowData.nearestPickup.time,
            pickupInstructions: workflowData.nearestPickup.instructions,
            userLat: workflowData.userLocation.lat,
            userLon: workflowData.userLocation.lng,
            pickupLat: workflowData.nearestPickup.lat,
            pickupLon: workflowData.nearestPickup.lon
          };
    
          // Signal to Voiceflow that the workflow is complete with the collected data
          if (window.voiceflow && window.voiceflow.chat) {
            window.voiceflow.chat.interact({
              type: 'request',
              payload: {
                type: 'directions-complete',
                data: completionData
              }
            });
          }
        }
    
            // Setup event listeners immediately before API loading
            setupEventListeners();
    
            // Initialize the workflow with robust handling
            loadGoogleMapsScript()
              .then(() => {
                console.log('Google Maps API loaded successfully');
                setupAutocomplete();
              })
              .catch(error => {
                console.error('Failed to load Google Maps API:', error);
                // Add direct script tag as a desperate fallback (no callback)
                console.log('Adding direct script tag as fallback after API load failure');
                const script = document.createElement('script');
                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
                script.onload = () => {
                  console.log('Fallback Google Maps API loaded');
                  setTimeout(() => {
                    setupAutocomplete();
                  }, 500);
                };
                document.head.appendChild(script);
              });
          },
        };


            // YRS: VERSION 19 (13 March 2025)
            export const DirectionsWorkflowExtension19 = {
              name: 'DirectionsWorkflow',
              type: 'response',
              match: ({ trace }) =>
                trace.type === 'ext_directionsWorkflow19' || trace.payload?.name === 'ext_directionsWorkflow19',
              render: ({ trace, element }) => {
                // Extract properties from the payload
                const { 
                  apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
                  pickupPoints = [], // This will come from your data
                  workflowTitle = 'Find Your Pickup Location',
                  height = '700', // Increased height to give more space for buttons
                  padding = '15px',
                  delay = 0,
                  backgroundColor = '#ffffff',
                  maxWidth = '500px', // Set consistent max-width
                  // Branding colors
                  primaryColor = '#587C74',
                  secondaryColor = '#3B534E',
                  // Border options
                  borderWidth = '2px',
                  borderColor = '#587C74',
                  borderStyle = 'solid',
                  borderRadius = '12px',
                  // Shadow and effects
                  shadowColor = 'rgba(88, 124, 116, 0.2)',
                  shadowSize = '8px',
                  // Animation
                  animateIn = true,
                  // Default location bias
                  defaultLat = 21.315603,
                  defaultLng = -157.858093,
                  defaultRadius = 30000.0
                } = trace.payload || {};
            
                // Default pickup points if none are provided
                const defaultPickupPoints = [
                  { 
                    name: "Aloha Tower trolley stop", 
                    lat: 21.30693198561091, 
                    lon: -157.8663891824468, 
                    instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
                    time: "6:45 AM", 
                    image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
                    mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
                  },
                  { 
                    name: "Ala Moana Hotel - curbside on Mahukona Street", 
                    lat: 21.290298342118497, 
                    lon: -157.84001436219415, 
                    instructions: "Meet us near the curbside at Mahukona St", 
                    time: "6:50 AM", 
                    image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
                    mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
                  },
                  { 
                    name: "Hilton Hawaiian Village - Grand Islander bus depot", 
                    lat: 21.282800616178037, 
                    lon: -157.83548235215594, 
                    instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
                    time: "7:00 AM", 
                    image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
                    mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
                  }
                ];
            
                // Clean element first
                element.innerHTML = '';
            
                // Create a container for the workflow with fixed width
                const container = document.createElement('div');
                container.style.width = '100%';
                container.style.display = 'flex';
                container.style.justifyContent = 'center';
                container.style.alignItems = 'center';
                container.style.backgroundColor = 'transparent';
                container.style.margin = '0';
                container.style.padding = '0';
                
                // Create the main wrapper with FIXED WIDTH
                const wrapper = document.createElement('div');
                wrapper.className = 'directions-workflow-wrapper';
                
                // Apply styling with fixed pixel width
                const fixedWidth = '460px'; // Fixed pixel width for all steps
                wrapper.style.width = fixedWidth;
                wrapper.style.minWidth = fixedWidth;
                wrapper.style.maxWidth = fixedWidth;
                wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
                wrapper.style.borderRadius = borderRadius;
                wrapper.style.overflow = 'hidden';
                wrapper.style.backgroundColor = backgroundColor;
                wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
                wrapper.style.height = height + 'px';
                wrapper.style.display = 'flex';
                wrapper.style.flexDirection = 'column';
                wrapper.style.margin = '0 auto'; // Center the wrapper
                wrapper.style.position = 'relative'; // For absolute positioning inside
            
                // Add animation if enabled
                if (animateIn) {
                  wrapper.style.opacity = '0';
                  wrapper.style.transform = 'translateY(20px)';
                  wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                }
            
                // Tours data - 5 fictional Hawaiian tours
                const toursData = [
                  {
                    id: 'aloha-circle',
                    name: 'Aloha Island Adventure',
                    description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
                    image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
                  },
                  {
                    id: 'waimea-valley',
                    name: 'Waimea Valley Experience',
                    description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
                    image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
                  },
                  {
                    id: 'volcano-discovery',
                    name: 'Volcano Discovery Journey',
                    description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
                    image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
                  },
                  {
                    id: 'polynesian-heritage',
                    name: 'Polynesian Heritage Tour',
                    description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
                    image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
                  },
                  {
                    id: 'paradise-snorkel',
                    name: 'Paradise Snorkel Safari',
                    description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
                    image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
                  }
                ];
            
                // Fixed Duke Paoa Kahanamoku Statue location
                const FIXED_PICKUP = {
                  name: "Duke Paoa Kahanamoku Statue",
                  lat: 21.277054,
                  lon: -157.826810,
                  instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
                  time: "8:00 AM",
                  image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
                  mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
                };
            
                // Updated function to load Google Maps API with Places library using bootstrap loader
                const loadGoogleMapsScript = () => {
                  return new Promise((resolve, reject) => {
                    // Check if API is already loaded
                    if (window.google && window.google.maps && window.google.maps.places) {
                      console.log('Google Maps API already loaded');
                      resolve();
                      return;
                    }
                    
                    // Define callback function that will be called by Google Maps API
                    window.initGoogleMaps = function() {
                      console.log('Google Maps API loaded successfully via callback');
                      resolve();
                    };
                    
                    // Set a timeout to catch loading failures
                    const timeoutId = setTimeout(() => {
                      console.error('Google Maps API loading timed out');
                      reject(new Error('Google Maps API loading timed out'));
                    }, 10000);
                    
                    // Create the bootstrap loader script
                    const script = document.createElement('script');
                    script.innerHTML = `
                      (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
                        key: "${apiKey}",
                        v: "alpha" // Use alpha channel for Places API (Preview)
                      });
                    `;
                    
                    script.onload = function() {
                      clearTimeout(timeoutId);
                      console.log('Google Maps bootstrap script loaded');
                      
                      // Try to load the places library immediately
                      setTimeout(async () => {
                        try {
                          if (window.google && window.google.maps) {
                            await window.google.maps.importLibrary("places");
                            clearTimeout(timeoutId);
                            console.log('Places library loaded via importLibrary');
                            resolve();
                          }
                        } catch (err) {
                          console.warn('Initial importLibrary attempt failed:', err);
                          // Don't reject here, the callback might still work
                        }
                      }, 500);
                    };
                    
                    script.onerror = function(error) {
                      clearTimeout(timeoutId);
                      console.error('Error loading Google Maps bootstrap script:', error);
                      reject(new Error('Failed to load Google Maps API'));
                    };
                    
                    document.head.appendChild(script);
                  });
                };
                
                      // Initialize the mode icon when showing the route step
                  const routeStepBtn = wrapper.querySelector('#show-route-btn');
                  if (routeStepBtn) {
                    routeStepBtn.addEventListener('click', function() {
                      // Set the initial icon after a short delay to ensure DOM is ready
                      setTimeout(() => {
                        const modeSelect = wrapper.querySelector('#transport-mode');
                        if (modeSelect) {
                          updateTransportModeIcon(modeSelect.value);
                        }
                      }, 200);
                    });
                  }
                  
                  // Improved function to initialize Google Places Autocomplete with better error handling
                function setupAutocomplete() {
                  console.log('Setting up autocomplete...');
                  
                  // Check if Google Maps API is loaded
                  if (!window.google || !window.google.maps || !window.google.maps.places) {
                    console.error('Google Maps API not fully loaded, cannot set up autocomplete');
                    return;
                  }
                  
                  // Get input field - now we only have one field
                  const accommodationInput = wrapper.querySelector('#accommodation-input');
                  
                  // Debug info
                  console.log('Accommodation input found:', !!accommodationInput);
                  
                  // Check if DOM element exists
                  if (!accommodationInput) {
                    console.error('Required input not found for autocomplete');
                    return;
                  }
                  
                  // Initialize autocomplete on the accommodation field
                  console.log('Creating accommodation autocomplete');
                  try {
                    const accommodationOptions = {
                      // Allow both establishments and addresses
                      types: [], // No type restrictions to allow both
                      componentRestrictions: {country: 'us'},
                      // Add location bias for Honolulu
                      bounds: new google.maps.LatLngBounds(
                        new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
                        new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
                      ),
                      strictBounds: false, // Allow results outside the bounds
                      fields: ['formatted_address', 'geometry', 'name', 'place_id']
                    };
                    
                    const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
                    
                    // When a place is selected
                    autocomplete.addListener('place_changed', function() {
                      const place = autocomplete.getPlace();
                      
                      if (!place.geometry) {
                        console.error('No place details available for selection');
                        return;
                      }
                      
                      // The place data is already captured in the input field
                      console.log('Place selected:', place.name);
                    });
                    
                    console.log('Accommodation autocomplete successfully initialized');
                  } catch (error) {
                    console.error('Error initializing accommodation autocomplete:', error);
                  }
                }
            
                // Basic styling and tour selection HTML
                wrapper.innerHTML = `
                  <style>
                    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
                    
                    *, *::before, *::after {
                      box-sizing: border-box;
                    }
                    
                    .directions-workflow-container * {
                      box-sizing: border-box;
                      font-family: 'Inter', sans-serif;
                    }
                    
                    .directions-workflow-container {
                      display: flex;
                      flex-direction: column;
                      height: 100%;
                      color: #333;
                      width: 100%;
                      max-width: 100%;
                      min-width: 100%;
                      position: relative;
                    }
                    
                    .workflow-header {
                      background-color: ${primaryColor};
                      color: white;
                      padding: 16px;
                      text-align: center;
                      font-weight: 600;
                      width: 100%;
                    }
                    
                    .workflow-header h2 {
                      margin: 0;
                      font-size: 18px;
                    }
                    
                    .workflow-content {
                      flex: 1;
                      overflow-y: auto;
                      position: relative;
                      width: 100%;
                    }
                    
                    .workflow-step {
                      height: 100%;
                      width: 100%;
                      max-width: 100%;
                      padding: 20px;
                      display: none;
                      animation: fadeIn 0.3s ease-in-out;
                      box-sizing: border-box;
                      overflow: hidden;
                      position: relative;
                    }
                    
                    .workflow-step.active {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: flex-start;
                    }
                    
                    @keyframes fadeIn {
                      from { opacity: 0; }
                      to { opacity: 1; }
                    }
                    
                    /* Progress Steps - Positioned in top right */
                    .progress-container {
                      position: absolute;
                      top: 8px;
                      right: 10px;
                      z-index: 5;
                    }
                    
                    .progress-steps {
                      display: flex;
                      align-items: center;
                      justify-content: flex-end;
                      gap: 4px;
                    }
                    
                    .workflow-step-indicator {
                      width: 28px;
                      height: 28px;
                      border-radius: 50%;
                      background-color: #ddd;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      color: #555;
                      font-weight: 600;
                      font-size: 14px;
                      margin: 0 2px;
                    }
                    
                    .workflow-step-indicator.active {
                      background-color: ${primaryColor};
                      color: white;
                    }
                    
                    .workflow-step-indicator.completed {
                      background-color: ${primaryColor};
                      color: white;
                    }
                    
                    /* Connector lines between step indicators */
                    .workflow-step-indicator:not(:last-child):after {
                      content: "";
                      display: inline-block;
                      position: absolute;
                      width: 8px;
                      height: 2px;
                      background-color: #ddd;
                      margin-left: 30px;
                    }
                    
                    .workflow-step-indicator.completed:not(:last-child):after {
                      background-color: ${primaryColor};
                    }
                    
                    /* Tour Carousel - Smooth sliding with fixed card positions */
                    .tour-carousel-container {
                      width: 100%;
                      position: relative;
                      margin: 20px auto 50px;
                      height: 360px; /* Fixed height to ensure visibility */
                      overflow: visible;
                    }
                    
                    /* Carousel track for smooth sliding */
                    .carousel-track {
                      display: flex;
                      position: absolute;
                      left: 0;
                      right: 0;
                      transition: transform 0.4s ease;
                      width: 100%;
                      height: 100%;
                    }
                    
                    /* Main card styling */
                    .tour-card {
                      position: absolute;
                      width: 280px;
                      height: 360px;
                      border-radius: 12px;
                      overflow: hidden;
                      transition: all 0.4s ease;
                      transform-origin: center center;
                      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
                      border: 2px solid transparent;
                      background-color: white;
                    }
                    
                    /* Center card */
                    .tour-card.center {
                      left: 50%;
                      transform: translateX(-50%) scale(1);
                      opacity: 1;
                      z-index: 3;
                    }
                    
                    /* Left card */
                    .tour-card.left {
                      left: 50%;
                      transform: translateX(calc(-50% - 200px)) scale(0.8);
                      opacity: 0.6;
                      z-index: 1;
                    }
                    
                    /* Right card */
                    .tour-card.right {
                      left: 50%;
                      transform: translateX(calc(-50% + 200px)) scale(0.8);
                      opacity: 0.6;
                      z-index: 1;
                    }
                    
                    /* Hide cards that are outside visible range */
                    .tour-card.off-left {
                      left: 50%;
                      transform: translateX(calc(-50% - 400px)) scale(0.6);
                      opacity: 0;
                      z-index: 0;
                    }
                    
                    .tour-card.off-right {
                      left: 50%;
                      transform: translateX(calc(-50% + 400px)) scale(0.6);
                      opacity: 0;
                      z-index: 0;
                    }
                    
                    .tour-card.selected {
                      border: 2px solid ${primaryColor};
                    }
                    
                    .tour-image-container {
                      width: 100%;
                      height: 200px; /* Height for image */
                      overflow: hidden;
                      position: relative;
                    }
                    
                    .tour-image {
                      width: 100%;
                      height: 100%;
                      object-fit: cover;
                    }
                    
                    .tour-info {
                      padding: 12px 15px;
                      flex: 1;
                      display: flex;
                      flex-direction: column;
                    }
                    
                    .tour-info h4 {
                      margin: 0 0 8px;
                      font-size: 18px;
                      color: #333;
                    }
                    
                    .tour-description {
                      font-size: 14px;
                      color: #555;
                      margin-bottom: 16px;
                      flex: 1;
                    }
                    
                    .select-tour-btn {
                      display: block;
                      width: 100%;
                      padding: 10px;
                      background-color: ${primaryColor};
                      color: white;
                      border: none;
                      border-radius: 6px;
                      font-weight: 500;
                      cursor: pointer;
                      transition: background-color 0.2s;
                    }
                    
                    .select-tour-btn:hover {
                      background-color: ${secondaryColor};
                    }
                    
                    /* Carousel Arrows - with show/hide logic */
                    .carousel-arrow {
                      position: absolute;
                      top: 40%;
                      transform: translateY(-50%);
                      width: 36px;
                      height: 36px;
                      background-color: white;
                      border-radius: 50%;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      cursor: pointer;
                      z-index: 10;
                      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
                      transition: all 0.3s ease;
                    }
                    
                    .carousel-arrow:hover {
                      background-color: #f5f5f5;
                      box-shadow: 0 4px 8px rgba(0,0,0,0.25);
                      transform: translateY(-50%) scale(1.1);
                    }
                    
                    .carousel-arrow.prev {
                      left: 5px;
                    }
                    
                    .carousel-arrow.next {
                      right: 5px;
                    }
                    
                    .carousel-arrow.hidden {
                      display: none;
                    }
                    
                    .carousel-arrow svg {
                      width: 24px;
                      height: 24px;
                      fill: #555;
                    }
                    
                    /* Carousel indicators */
                    .carousel-indicators {
                      display: flex;
                      justify-content: center;
                      margin-top: 15px;
                    }
                    
                    .carousel-indicator {
                      width: 8px;
                      height: 8px;
                      border-radius: 50%;
                      background-color: #ddd;
                      margin: 0 4px;
                      transition: all 0.2s;
                      cursor: pointer;
                    }
                    
                    .carousel-indicator.active {
                      background-color: ${primaryColor};
                      transform: scale(1.2);
                    }
                    
                    /* Address Form */
                    .address-form {
                      margin-top: 10px;
                      width: 100%;
                    }
                    
                    .form-group {
                      margin-bottom: 16px;
                      width: 100%;
                    }
                    
                    .form-group label {
                      display: block;
                      margin-bottom: 6px;
                      font-weight: 500;
                      font-size: 14px;
                    }
                    
                    .form-control {
                      width: 100%;
                      padding: 12px;
                      border: 1px solid #e0e0e0;
                      border-radius: 8px;
                      font-size: 15px;
                      transition: border-color 0.2s;
                      box-sizing: border-box;
                    }
                    
                    .form-control:focus {
                      outline: none;
                      border-color: ${primaryColor};
                    }
                    
                    /* Material Icons Styling */
                    .material-symbols-outlined {
                      font-variation-settings:
                      'FILL' 0,
                      'wght' 400,
                      'GRAD' 0,
                      'opsz' 24;
                      vertical-align: middle;
                      margin-right: 8px;
                    }
                    
                    /* Transport Mode Icon Display */
                    .transport-mode-container {
                      display: flex;
                      align-items: center;
                      margin-bottom: 15px;
                    }
                    
                    .transport-mode-icon {
                      background-color: ${primaryColor};
                      color: white;
                      width: 36px;
                      height: 36px;
                      border-radius: 50%;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      margin-right: 12px;
                    }
                    
                    .transport-mode-icon img {
                      width: 20px;
                      height: 20px;
                      display: block;
                      filter: brightness(0) invert(1); /* Make SVG white */
                    }
            
                    /* Fix for autocomplete dropdown */
                    .pac-container {
                      z-index: 10000 !important;
                      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
                      border-radius: 8px;
                      border: 1px solid #eaeaea;
                      margin-top: 4px;
                      font-family: 'Inter', sans-serif;
                    }
                    
                    .pac-item {
                      padding: 8px 10px;
                      cursor: pointer;
                      font-family: 'Inter', sans-serif !important;
                    }
                    
                    .pac-item:hover {
                      background-color: #f5f5f5;
                    }
                    
                    .pac-icon {
                      margin-right: 8px;
                    }
                    
                    .pac-item-query {
                      font-size: 14px;
                      font-weight: 500;
                    }
                    
                    /* Loading Animation */
                    .loading-container {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      text-align: center;
                      width: 100%;
                    }
                    
                    .loading-spinner {
                      width: 50px;
                      height: 50px;
                      border: 5px solid rgba(88, 124, 116, 0.2);
                      border-radius: 50%;
                      border-top: 5px solid ${primaryColor};
                      animation: spin 1s linear infinite;
                      margin-bottom: 20px;
                    }
                    
                    @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                    }
                    
                    .loading-text {
                      font-size: 18px;
                      font-weight: 500;
                      margin-top: 15px;
                    }
                    
                    .route-map-container, .map-container {
                      margin-top: 10px;
                      border-radius: 12px;
                      overflow: hidden;
                      border: 2px solid ${primaryColor};
                      width: 100%;
                      position: relative;
                      aspect-ratio: 4/3; /* Maintain aspect ratio */
                    }
                    
                    .map-container iframe, .route-map-container iframe {
                      width: 100%;
                      height: 100%;
                      border: none;
                    }
                    
                    .confirmation-text {
                      margin: 15px 0;
                      text-align: center;
                      font-weight: 500;
                      width: 100%;
                    }
                    
                    /* Pickup Card */
                    .pickup-card {
                      border-radius: 12px;
                      overflow: hidden;
                      margin-top: 15px;
                      box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
                      border: 2px solid ${primaryColor};
                      width: 100%;
                      box-sizing: border-box;
                    }
                    
                    .pickup-image {
                      width: 100%;
                      height: 180px; /* Fixed height for pickup images */
                      object-fit: cover;
                    }
                    
                    .pickup-info {
                      padding: 15px;
                    }
                    
                    .pickup-title {
                      font-size: 18px;
                      font-weight: 600;
                      margin-bottom: 8px;
                      color: ${primaryColor};
                    }
                    
                    .pickup-address {
                      font-size: 15px;
                      margin-bottom: 10px;
                    }
                    
                    .pickup-instructions {
                      font-size: 14px;
                      color: #555;
                      border-left: 3px solid ${primaryColor};
                      padding-left: 10px;
                      margin-top: 10px;
                    }
                    
                    /* Route Details */
                    .route-details {
                      margin-top: 15px;
                      padding: 12px;
                      background-color: #f8f9fa;
                      border-radius: 8px;
                      font-size: 14px;
                      border-left: 3px solid ${primaryColor};
                      width: 100%;
                      box-sizing: border-box;
                      margin-bottom: 70px; /* Add more space before the bottom buttons */
                    }
                    
                    .route-details p {
                      margin: 5px 0;
                    }
                    
                    .route-details .walk-time {
                      font-weight: 600;
                      color: ${primaryColor};
                    }
                    
                    /* Buttons */
                    .btn-container {
                      display: flex;
                      justify-content: space-between;
                      width: 100%;
                      position: absolute;
                      bottom: 20px;
                      left: 0;
                      padding: 0 20px;
                    }
                    
                    .btn {
                      padding: 12px 24px;
                      border-radius: 8px;
                      font-weight: 500;
                      cursor: pointer;
                      border: none;
                      font-size: 15px;
                      transition: all 0.2s ease;
                      min-width: 100px;
                      margin-top: 15px;
                    }
                    
                    .btn-primary {
                      background-color: ${primaryColor};
                      color: white;
                    }
                    
                    .btn-primary:hover {
                      background-color: ${secondaryColor};
                    }
                    
                    .btn-secondary {
                      background-color: #f1f3f5;
                      color: #495057;
                    }
                    
                    .btn-secondary:hover {
                      background-color: #e9ecef;
                    }
                    
                    .btn-route {
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      gap: 8px;
                      width: 100%;
                      background-color: ${primaryColor};
                      color: white;
                      margin-top: 15px;
                      margin-bottom: 60px; /* Add space below the Show Route button to avoid collision with bottom buttons */
                    }
                    
                    .btn-route:hover {
                      background-color: ${secondaryColor};
                    }
            
                    /* Map fallback */
                    .map-fallback {
                      display: none;
                      padding: 20px;
                      text-align: center;
                      background-color: #f8f9fa;
                      border-radius: 8px;
                      height: 100%;
                      width: 100%;
                      box-sizing: border-box;
                    }
                    
                    /* Make all steps have consistent width */
                    h3, p, form, div.progress-container,
                    div.pickup-card, div.route-details, button.btn-route,
                    div.map-container, div.route-map-container, div.map-fallback {
                      width: 100%;
                      max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
                    }
                    
                    /* Fix overflow issues with internal content */
                    img, iframe {
                      max-width: 100%;
                      border: 0;
                    }
                  </style>
                  
                  <div class="directions-workflow-container">
                    <div class="workflow-header">
                      <h2>${workflowTitle}</h2>
                    </div>
                    
                    <div class="workflow-content">
                      <!-- Step 1: Tour Selection with Carousel -->
                      <div class="workflow-step active" id="step-tour">
                        <h3>Select Your Tour</h3>
                        <p>Please select the tour you'll be joining:</p>
                        
                        <div class="progress-container">
                          <div class="progress-steps">
                            <div class="workflow-step-indicator active completed">1</div>
                            <div class="workflow-step-indicator">2</div>
                            <div class="workflow-step-indicator">3</div>
                            <div class="workflow-step-indicator">4</div>
                          </div>
                        </div>
                        
                        <!-- Carousel with smooth sliding transitions -->
                        <div class="tour-carousel-container">
                          <!-- Left arrow -->
                          <div class="carousel-arrow prev hidden">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                            </svg>
                          </div>
                          
                          <!-- Carousel track with cards -->
                          <div class="carousel-track" id="carousel-track">
                            <!-- Cards will be dynamically generated here -->
                          </div>
                          
                          <!-- Right arrow -->
                          <div class="carousel-arrow next">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                            </svg>
                          </div>
                        </div>
                        
                        <!-- Indicators -->
                        <div class="carousel-indicators" id="carousel-indicators">
                          ${toursData.map((_, index) => `
                            <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                          `).join('')}
                        </div>
                        
                        <div class="btn-container">
                          <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
                          <button class="btn btn-primary" id="next-btn">Next</button>
                        </div>
                      </div>
                      
                      <!-- Step 2: Address Input - SIMPLIFIED TO ONE FIELD -->
                      <div class="workflow-step" id="step-address">
                        <h3>Enter Your Accommodation</h3>
                        <p>Please enter the address where you're staying:</p>
                        
                        <div class="progress-container">
                          <div class="progress-steps">
                            <div class="workflow-step-indicator completed">1</div>
                            <div class="workflow-step-indicator active completed">2</div>
                            <div class="workflow-step-indicator">3</div>
                            <div class="workflow-step-indicator">4</div>
                          </div>
                        </div>
                        
                        <form class="address-form" id="address-form">
                          <div class="form-group">
                            <label for="accommodation-input">Accommodation Name or Address*</label>
                            <input type="text" id="accommodation-input" class="form-control" placeholder="Hotel name or full address" required>
                          </div>
                        </form>
                        
                        <div class="btn-container">
                          <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
                          <button class="btn btn-primary" id="find-pickup-btn">Find Pickup</button>
                        </div>
                      </div>
                      
                      <!-- Step 3: Searching Animation -->
                      <div class="workflow-step" id="step-searching">
                        <div class="loading-container">
                          <div class="loading-spinner"></div>
                          <div class="loading-text">Searching for location...</div>
                        </div>
                      </div>
                      
                      <!-- Step 4: Location Confirmation -->
                      <div class="workflow-step" id="step-location-confirm">
                        <h3>Confirm Your Location</h3>
                        
                        <div class="progress-container">
                          <div class="progress-steps">
                            <div class="workflow-step-indicator completed">1</div>
                            <div class="workflow-step-indicator completed">2</div>
                            <div class="workflow-step-indicator active completed">3</div>
                            <div class="workflow-step-indicator">4</div>
                          </div>
                        </div>
                        
                        <div class="map-container" id="location-map">
                          <!-- Map will be inserted here by JavaScript -->
                        </div>
                        <div class="map-fallback" id="location-map-fallback">
                          <p>Unable to display map.</p>
                          <p id="fallback-address"></p>
                        </div>
                        
                        <p class="confirmation-text">Is this the correct location?</p>
                        
                        <div class="btn-container">
                          <button class="btn btn-secondary" id="edit-address-btn">No, Edit</button>
                          <button class="btn btn-primary" id="confirm-location-btn">Yes, Continue</button>
                        </div>
                      </div>
                      
                      <!-- Step 5: Finding Pickup Animation -->
                      <div class="workflow-step" id="step-finding-pickup">
                        <div class="loading-container">
                          <div class="loading-spinner"></div>
                          <div class="loading-text">Finding nearest pickup point...</div>
                        </div>
                      </div>
                      
                      <!-- Step 6: Pickup Point Info -->
                      <div class="workflow-step" id="step-pickup-info">
                        <h3>Your Pickup Location</h3>
                        
                        <div class="progress-container">
                          <div class="progress-steps">
                            <div class="workflow-step-indicator completed">1</div>
                            <div class="workflow-step-indicator completed">2</div>
                            <div class="workflow-step-indicator completed">3</div>
                            <div class="workflow-step-indicator active completed">4</div>
                          </div>
                        </div>
                        
                        <div class="pickup-card">
                          <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
                          <div class="pickup-info">
                            <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                            <p class="pickup-address" id="pickup-address"></p>
                            <div class="pickup-instructions" id="pickup-instructions">
                              <p id="pickup-time"></p>
                              <p id="pickup-details"></p>
                            </div>
                          </div>
                        </div>
                        
                        <button class="btn btn-route" id="show-route-btn">
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                          </svg>
                          Show Route
                        </button>
                        
                        <div class="btn-container">
                          <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
                          <button class="btn btn-primary" id="done-btn">Done</button>
                        </div>
                      </div>
                      
                      <!-- Step 7: Route Map with Transportation Mode Selection -->
                      <div class="workflow-step" id="step-route">
                        <h3>Getting to Your Pickup Point</h3>
                        
                        <div class="transport-mode-container">
                          <div class="transport-mode-icon" id="transport-mode-icon">
                            <img src="https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg" alt="Walking" id="transport-mode-img">
                          </div>
                          <div class="form-group" style="flex: 1; margin-bottom: 0;">
                            <label for="transport-mode">Transportation Mode:</label>
                            <select id="transport-mode" class="form-control">
                              <option value="walking" selected>Walking</option>
                              <option value="bicycling">Bicycling</option>
                              <option value="driving">Driving</option>
                              <option value="transit">Public Transit</option>
                            </select>
                          </div>
                        </div>
                        
                        <div class="route-map-container" id="route-map">
                          <!-- Route map will be inserted here -->
                        </div>
                        <div class="map-fallback" id="route-map-fallback">
                          <p>Unable to display route map.</p>
                          <div id="fallback-route-details"></div>
                        </div>
                        
                        <div class="route-details">
                          <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
                          <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
                          <!-- Removed redundant travel time text as it's visible in the map -->
                        </div>
                        
                        <div class="btn-container">
                          <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
                          <button class="btn btn-primary" id="route-done-btn">Done</button>
                        </div>
                      </div>
                    </div>
                  </div>
                `;
                
                // Add the wrapper to the container
                container.appendChild(wrapper);
                element.appendChild(container);
            
                // Make sure the wrapper becomes visible and scroll is enabled
                if (animateIn) {
                  setTimeout(() => {
                    wrapper.style.opacity = '1';
                    wrapper.style.transform = 'translateY(0)';
                  }, 100);
                }
            
                // Initialize workflow with scoped variables
                const workflowData = {
                  selectedTour: "",
                  selectedTourName: "",
                  userLocation: {
                    address: "",
                    placeId: "", 
                    lat: 0,
                    lng: 0
                  },
                  nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
                  apiKey: apiKey,
                  currentCarouselIndex: 0 // Track current carousel position
                };
            
                // Function to create and position carousel cards
                function createCarouselCards() {
                  const carouselTrack = wrapper.querySelector('#carousel-track');
                  if (!carouselTrack) return;
                  
                  // Clear existing content
                  carouselTrack.innerHTML = '';
                  
                  // Create all tour cards with proper positioning classes
                  toursData.forEach((tour, index) => {
                    const card = document.createElement('div');
                    
                    // Determine position class based on index relative to current index
                    let positionClass = '';
                    if (index === workflowData.currentCarouselIndex) {
                      positionClass = 'center';
                    } else if (index === workflowData.currentCarouselIndex - 1) {
                      positionClass = 'left';
                    } else if (index === workflowData.currentCarouselIndex + 1) {
                      positionClass = 'right';
                    } else if (index < workflowData.currentCarouselIndex) {
                      positionClass = 'off-left';
                    } else {
                      positionClass = 'off-right';
                    }
                    
                    card.className = `tour-card ${positionClass}`;
                    card.dataset.tourId = tour.id;
                    card.dataset.tourName = tour.name;
                    card.dataset.index = index;
                    
                    // Add selected class if this is the selected tour
                    if (tour.id === workflowData.selectedTour) {
                      card.classList.add('selected');
                    }
                    
                    card.innerHTML = `
                      <div class="tour-image-container">
                        <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                      </div>
                      <div class="tour-info">
                        <h4>${tour.name}</h4>
                        <div class="tour-description">${tour.description}</div>
                        <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
                      </div>
                    `;
                    
                    carouselTrack.appendChild(card);
                  });
                  
                  // Add event listeners to all select buttons
                  const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
                  selectButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                      const tourId = e.target.dataset.tourId;
                      const tourName = e.target.dataset.tourName;
                      
                      // Clear previous selections
                      const cards = carouselTrack.querySelectorAll('.tour-card');
                      cards.forEach(card => card.classList.remove('selected'));
                      
                      // Mark the parent card as selected
                      const parentCard = e.target.closest('.tour-card');
                      if (parentCard) {
                        parentCard.classList.add('selected');
                        workflowData.selectedTour = tourId;
                        workflowData.selectedTourName = tourName;
                      }
                    });
                  });
                }
            
                // Function to update carousel display
                function updateCarousel() {
                  // Update card positions based on current index
                  const cards = wrapper.querySelectorAll('.tour-card');
                  
                  cards.forEach((card, index) => {
                    // Remove all position classes
                    card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
                    
                    // Add appropriate position class
                    if (index === workflowData.currentCarouselIndex) {
                      card.classList.add('center');
                    } else if (index === workflowData.currentCarouselIndex - 1) {
                      card.classList.add('left');
                    } else if (index === workflowData.currentCarouselIndex + 1) {
                      card.classList.add('right');
                    } else if (index < workflowData.currentCarouselIndex) {
                      card.classList.add('off-left');
                    } else {
                      card.classList.add('off-right');
                    }
                  });
                  
                  // Update indicators
                  const indicators = wrapper.querySelectorAll('.carousel-indicator');
                  indicators.forEach((indicator, index) => {
                    indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
                  });
                  
                  // Update arrow visibility
                  const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
                  const nextArrow = wrapper.querySelector('.carousel-arrow.next');
                  
                  if (prevArrow) {
                    prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
                  }
                  
                  if (nextArrow) {
                    nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
                  }
                }
            
                // Function to update the transport mode icon
                function updateTransportModeIcon(mode) {
                  const iconImg = wrapper.querySelector('#transport-mode-img');
                  if (!iconImg) return;
                  
                  // SVG paths from the repository
                  const iconPaths = {
                    walking: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg',
                    bicycling: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bike%20Directions%20Icon.svg',
                    driving: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Car%20Directions%20Icon.svg',
                    transit: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bus%20Icon.svg'
                  };
                  
                  // Set the appropriate icon based on the mode
                  const iconPath = iconPaths[mode] || iconPaths.walking;
                  iconImg.src = iconPath;
                  iconImg.alt = mode.charAt(0).toUpperCase() + mode.slice(1);
                }
                
                // Add event listeners and initialize carousel
                function setupEventListeners() {
                  // Create initial carousel cards
                  createCarouselCards();
                  
                  // Get carousel navigation elements
                  const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
                  const nextArrow = wrapper.querySelector('.carousel-arrow.next');
                  const indicators = wrapper.querySelectorAll('.carousel-indicator');
                  
                  // Previous slide
                  if (prevArrow) {
                    prevArrow.addEventListener('click', () => {
                      if (workflowData.currentCarouselIndex > 0) {
                        workflowData.currentCarouselIndex--;
                        updateCarousel();
                      }
                    });
                  }
                  
                  // Next slide
                  if (nextArrow) {
                    nextArrow.addEventListener('click', () => {
                      if (workflowData.currentCarouselIndex < toursData.length - 1) {
                        workflowData.currentCarouselIndex++;
                        updateCarousel();
                      }
                    });
                  }
                  
                  // Indicator clicks
                  indicators.forEach((indicator) => {
                    indicator.addEventListener('click', () => {
                      workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
                      updateCarousel();
                    });
                  });
                  
                  // Get all other DOM elements we need
                  const nextBtn = wrapper.querySelector('#next-btn');
                  const cancelBtn = wrapper.querySelector('#cancel-btn');
                  const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
                  const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
                  const editAddressBtn = wrapper.querySelector('#edit-address-btn');
                  const confirmLocationBtn = wrapper.querySelector('#confirm-location-btn');
                  const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
                  const doneBtn = wrapper.querySelector('#done-btn');
                  const showRouteBtn = wrapper.querySelector('#show-route-btn');
                  const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
                  const routeDoneBtn = wrapper.querySelector('#route-done-btn');
            
                  // Button event listeners
                  nextBtn.addEventListener('click', () => {
                    if (workflowData.selectedTour) {
                      goToStep('step-address');
                      setTimeout(() => {
                        setupAutocomplete();
                      }, 500);
                    } else {
                      alert('Please select a tour first.');
                    }
                  });
            
                  cancelBtn.addEventListener('click', () => {
                    cancelWorkflow();
                  });
            
                  backToTourBtn.addEventListener('click', () => {
                    goToStep('step-tour');
                  });
            
                  findPickupBtn.addEventListener('click', () => {
                    searchLocation();
                  });
            
                  editAddressBtn.addEventListener('click', () => {
                    goToStep('step-address');
                    setTimeout(() => {
                      setupAutocomplete();
                    }, 500);
                  });
            
                  confirmLocationBtn.addEventListener('click', () => {
                    findPickupPoint();
                  });
            
                  backToConfirmBtn.addEventListener('click', () => {
                    goToStep('step-location-confirm');
                  });
            
                  doneBtn.addEventListener('click', () => {
                    completeWorkflow();
                  });
            
                  showRouteBtn.addEventListener('click', () => {
                    showRouteMap();
                  });
            
                  backToPickupBtn.addEventListener('click', () => {
                    goToStep('step-pickup-info');
                  });
            
                  routeDoneBtn.addEventListener('click', () => {
                    completeWorkflow();
                  });
                }
            
                // Helper function to navigate between steps
                function goToStep(stepId) {
                  console.log('Navigating to step:', stepId);
                  const steps = wrapper.querySelectorAll('.workflow-step');
                  steps.forEach(step => {
                    step.classList.remove('active');
                  });
                  const targetStep = wrapper.querySelector(`#${stepId}`);
                  if (targetStep) {
                    targetStep.classList.add('active');
                    
                    // Re-initialize autocomplete if we're going to the address step
                    if (stepId === 'step-address') {
                      console.log('Re-initializing autocomplete on step change to address input');
                      // Wait a moment for the DOM to update
                      setTimeout(() => {
                        setupAutocomplete();
                      }, 300);
                    }
                  } else {
                    console.error('Target step not found:', stepId);
                  }
                }
            
                // Function to search for a location using the Google Places API
                function searchLocation() {
                  const accommodationInput = wrapper.querySelector('#accommodation-input');
                  const accommodationValue = accommodationInput ? accommodationInput.value : '';
                  const city = 'Honolulu'; // Always use Honolulu as the city
            
                  if (!accommodationValue) {
                    alert('Please enter your accommodation name or address');
                    return;
                  }
            
                  // Show loading indicator
                  goToStep('step-searching');
            
                  // Format the full address for the API call
                  const fullAddress = `${accommodationValue}, ${city}, Hawaii`;
            
                  // Use Geocoding API
                  geocodeAddress(fullAddress);
                }
            
                // Geocode an address using the Geocoding API (more reliable than Places API)
                function geocodeAddress(fullAddress) {
                  const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
                  
                  fetch(geocodingUrl)
                    .then(response => response.json())
                    .then(data => {
                      if (data.status === 'OK' && data.results && data.results.length > 0) {
                        const result = data.results[0];
                        
                        // Format and save location data
                        const locationData = {
                          address: result.formatted_address,
                          placeId: result.place_id,
                          lat: result.geometry.location.lat,
                          lng: result.geometry.location.lng
                        };
                        
                        workflowData.userLocation = locationData;
                        
                        // Create and embed the map using place ID
                        const mapContainer = wrapper.querySelector('#location-map');
                        const mapFallback = wrapper.querySelector('#location-map-fallback');
                        
                        if (mapContainer) {
                          try {
                            // Use place ID for more accurate mapping
                            const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                            
                            mapContainer.innerHTML = `
                              <iframe
                                width="100%"
                                height="100%"
                                frameborder="0"
                                style="border:0"
                                src="${mapUrl}"
                                allowfullscreen
                                onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
                                onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                              ></iframe>
                            `;
                            
                            // Fallback in case iframe doesn't load
                            if (mapFallback) {
                              const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
                              if (fallbackAddressEl) {
                                fallbackAddressEl.textContent = locationData.address;
                              }
                            }
                          } catch (error) {
                            console.error('Error embedding map:', error);
                            if (mapContainer) mapContainer.style.display = 'none';
                            if (mapFallback) mapFallback.style.display = 'block';
                          }
                        }
                        
                        // Move to the confirmation step
                        goToStep('step-location-confirm');
                      } else {
                        console.error('Geocoding API error or no results:', data.status);
                        alert('Unable to find the location. Please try again with more specific address details.');
                        goToStep('step-address');
                      }
                    })
                    .catch(error => {
                      console.error('Error using Geocoding API:', error);
                      alert('Unable to find the location. Please check your internet connection and try again.');
                      goToStep('step-address');
                    });
                }
            
                // Haversine formula to calculate distance between coordinates
                function calculateDistance(lat1, lon1, lat2, lon2) {
                  function toRadians(degrees) {
                    return degrees * (Math.PI / 180);
                  }
            
                  const R = 6371; // Radius of the Earth in kilometers
                  const dLat = toRadians(lat2 - lat1);
                  const dLon = toRadians(lon2 - lon1);
                  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                            Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                            Math.sin(dLon / 2) * Math.sin(dLon / 2);
                  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                  const distance = R * c; // Distance in kilometers
                  return distance;
                }
            
                // Function to find the nearest pickup point - now always returns the fixed pickup
                function findPickupPoint() {
                  goToStep('step-finding-pickup');
            
                  setTimeout(() => {
                    // Always use the fixed pickup location
                    workflowData.nearestPickup = FIXED_PICKUP;
            
                    // Update the pickup info
                    const pickupImage = wrapper.querySelector('#pickup-image');
                    const pickupTitle = wrapper.querySelector('#pickup-title');
                    const pickupAddress = wrapper.querySelector('#pickup-address');
                    const pickupTime = wrapper.querySelector('#pickup-time');
                    const pickupDetails = wrapper.querySelector('#pickup-details');
            
                    if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
                    if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
                    if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
                    if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
                    if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;
            
                    // Move to the pickup info step
                    goToStep('step-pickup-info');
                  }, 2000);
                }
            
                // Function to show the route map with transportation mode
                function showRouteMap() {
                  // Get selected transportation mode
                  const transportModeSelect = wrapper.querySelector('#transport-mode');
                  const mode = transportModeSelect ? transportModeSelect.value : 'walking';
                  
                  // Format the origin and destination coordinates
                  const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
                  const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
                  
                  // Get the route map container
                  const routeMapContainer = wrapper.querySelector('#route-map');
                  const routeMapFallback = wrapper.querySelector('#route-map-fallback');
                  
                  if (routeMapContainer) {
                    try {
                      // Create an iframe with directions using the selected mode
                      const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
                      
                      routeMapContainer.innerHTML = `
                        <iframe
                          width="100%"
                          height="100%"
                          frameborder="0"
                          style="border:0"
                          src="${directionsUrl}"
                          allowfullscreen
                          onload="document.getElementById('route-map').style.display='block'; document.getElementById('route-map-fallback').style.display='none';"
                          onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
                        ></iframe>
                      `;
                      
                      // Fallback in case iframe doesn't load
                      if (routeMapFallback) {
                        const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
                        if (fallbackRouteDetails) {
                          fallbackRouteDetails.innerHTML = `
                            <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
                          `;
                        }
                      }
                    } catch (error) {
                      console.error('Error embedding route map:', error);
                      if (routeMapContainer) routeMapContainer.style.display = 'none';
                      if (routeMapFallback) routeMapFallback.style.display = 'block';
                    }
                  }
            
                  // Update route details
                  const routeFrom = wrapper.querySelector('#route-from');
                  const routeTo = wrapper.querySelector('#route-to');
                  const routeTime = wrapper.querySelector('#route-time');
            
                  if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
                  if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;
            
                  // Calculate travel time based on mode
                  const distance = calculateDistance(
                    workflowData.userLocation.lat,
                    workflowData.userLocation.lng,
                    workflowData.nearestPickup.lat,
                    workflowData.nearestPickup.lon
                  );
                  
                  // Different speed estimates for different modes (km/h)
                  const speeds = {
                    walking: 4,        // 4 km/h average walking speed
                    bicycling: 15,     // 15 km/h casual biking
                    driving: 40,       // 40 km/h urban driving with traffic
                    transit: 20        // 20 km/h average transit speed including wait times
                  };
                  
                  const speedKmPerHour = speeds[mode] || speeds.walking;
                  const timeInHours = distance / speedKmPerHour;
                  const timeMinutes = Math.round(timeInHours * 60);
                  
                  const modeDisplay = {
                    walking: 'Walking',
                    bicycling: 'Biking',
                    driving: 'Driving',
                    transit: 'Transit'
                  };
                  
                  // Removed setting route time text as it's redundant with the map display
            
                  // Go to the route step
                  goToStep('step-route');
                  
                  // Set up the transport mode icon update functionality
                  const transportModeElement = wrapper.querySelector('#transport-mode');
                  const transportModeIcon = wrapper.querySelector('#transport-mode-icon');
                  
                  if (transportModeElement && transportModeIcon && !transportModeElement.dataset.listenerAdded) {
                    // Update icon when mode changes
                    transportModeElement.addEventListener('change', function() {
                      // Update the icon based on selected mode
                      updateTransportModeIcon(this.value);
                      // Refresh the route with the new mode
                      showRouteMap();
                    });
                    transportModeElement.dataset.listenerAdded = 'true';
                  }
                }
            
                // Function to handle workflow cancellation
                function cancelWorkflow() {
                  // Signal to Voiceflow that the workflow is cancelled
                  if (window.voiceflow && window.voiceflow.chat) {
                    window.voiceflow.chat.interact({
                      type: 'request',
                      payload: {
                        type: 'directions-cancel'
                      }
                    });
                  }
                }
            
                // Function to handle workflow completion
                function completeWorkflow() {
                  // Prepare data to send back to Voiceflow
                  const completionData = {
                    selectedTour: workflowData.selectedTourName,
                    userAddress: workflowData.userLocation.address,
                    pickupPoint: workflowData.nearestPickup.name,
                    pickupTime: workflowData.nearestPickup.time,
                    pickupInstructions: workflowData.nearestPickup.instructions,
                    userLat: workflowData.userLocation.lat,
                    userLon: workflowData.userLocation.lng,
                    pickupLat: workflowData.nearestPickup.lat,
                    pickupLon: workflowData.nearestPickup.lon
                  };
            
                  // Signal to Voiceflow that the workflow is complete with the collected data
                  if (window.voiceflow && window.voiceflow.chat) {
                    window.voiceflow.chat.interact({
                      type: 'request',
                      payload: {
                        type: 'directions-complete',
                        data: completionData
                      }
                    });
                  }
                }
            
                    // Setup event listeners immediately before API loading
                    setupEventListeners();
            
                    // Initialize the workflow with robust handling
                    loadGoogleMapsScript()
                      .then(() => {
                        console.log('Google Maps API loaded successfully');
                        setupAutocomplete();
                      })
                      .catch(error => {
                        console.error('Failed to load Google Maps API:', error);
                        // Add direct script tag as a desperate fallback (no callback)
                        console.log('Adding direct script tag as fallback after API load failure');
                        const script = document.createElement('script');
                        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
                        script.onload = () => {
                          console.log('Fallback Google Maps API loaded');
                          setTimeout(() => {
                            setupAutocomplete();
                          }, 500);
                        };
                        document.head.appendChild(script);
                      });
                  },
                };

                        // YRS: VERSION 20 (14 March 2025)


                        export const DirectionsWorkflowExtension20 = {
                          name: 'DirectionsWorkflow',
                          type: 'response',
                          match: ({ trace }) =>
                            trace.type === 'ext_directionsWorkflow20' || trace.payload?.name === 'ext_directionsWorkflow20',
                          render: ({ trace, element }) => {
                            // Extract properties from the payload
                            const { 
                              apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
                              pickupPoints = [], // This will come from your data
                              workflowTitle = 'Find Your Pickup Location',
                              height = '700', // Increased height to give more space for buttons
                              padding = '15px',
                              delay = 0,
                              backgroundColor = '#ffffff',
                              maxWidth = '500px', // Set consistent max-width
                              // Branding colors
                              primaryColor = '#587C74',
                              secondaryColor = '#3B534E',
                              // Border options
                              borderWidth = '2px',
                              borderColor = '#587C74',
                              borderStyle = 'solid',
                              borderRadius = '12px',
                              // Shadow and effects
                              shadowColor = 'rgba(88, 124, 116, 0.2)',
                              shadowSize = '8px',
                              // Animation
                              animateIn = true,
                              // Default location bias
                              defaultLat = 21.315603,
                              defaultLng = -157.858093,
                              defaultRadius = 30000.0
                            } = trace.payload || {};
                        
                            // Default pickup points if none are provided
                            const defaultPickupPoints = [
                              { 
                                name: "Aloha Tower trolley stop", 
                                lat: 21.30693198561091, 
                                lon: -157.8663891824468, 
                                instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
                                time: "6:45 AM", 
                                image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
                                mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
                              },
                              { 
                                name: "Ala Moana Hotel - curbside on Mahukona Street", 
                                lat: 21.290298342118497, 
                                lon: -157.84001436219415, 
                                instructions: "Meet us near the curbside at Mahukona St", 
                                time: "6:50 AM", 
                                image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
                                mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
                              },
                              { 
                                name: "Hilton Hawaiian Village - Grand Islander bus depot", 
                                lat: 21.282800616178037, 
                                lon: -157.83548235215594, 
                                instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
                                time: "7:00 AM", 
                                image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
                                mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
                              }
                            ];
                        
                            // Clean element first
                            element.innerHTML = '';
                        
                            // Create a container for the workflow with fixed width
                            const container = document.createElement('div');
                            container.style.width = '100%';
                            container.style.display = 'flex';
                            container.style.justifyContent = 'center';
                            container.style.alignItems = 'center';
                            container.style.backgroundColor = 'transparent';
                            container.style.margin = '0';
                            container.style.padding = '0';
                            
                            // Create the main wrapper with FIXED WIDTH
                            const wrapper = document.createElement('div');
                            wrapper.className = 'directions-workflow-wrapper';
                            
                            // Apply styling with fixed pixel width
                            const fixedWidth = '460px'; // Fixed pixel width for all steps
                            wrapper.style.width = fixedWidth;
                            wrapper.style.minWidth = fixedWidth;
                            wrapper.style.maxWidth = fixedWidth;
                            wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
                            wrapper.style.borderRadius = borderRadius;
                            wrapper.style.overflow = 'hidden';
                            wrapper.style.backgroundColor = backgroundColor;
                            wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
                            wrapper.style.height = height + 'px';
                            wrapper.style.display = 'flex';
                            wrapper.style.flexDirection = 'column';
                            wrapper.style.margin = '0 auto'; // Center the wrapper
                            wrapper.style.position = 'relative'; // For absolute positioning inside
                        
                            // Add animation if enabled
                            if (animateIn) {
                              wrapper.style.opacity = '0';
                              wrapper.style.transform = 'translateY(20px)';
                              wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                            }
                        
                            // Tours data - 5 fictional Hawaiian tours
                            const toursData = [
                              {
                                id: 'aloha-circle',
                                name: 'Aloha Island Adventure',
                                description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
                                image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
                              },
                              {
                                id: 'waimea-valley',
                                name: 'Waimea Valley Experience',
                                description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
                                image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
                              },
                              {
                                id: 'volcano-discovery',
                                name: 'Volcano Discovery Journey',
                                description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
                                image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
                              },
                              {
                                id: 'polynesian-heritage',
                                name: 'Polynesian Heritage Tour',
                                description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
                                image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
                              },
                              {
                                id: 'paradise-snorkel',
                                name: 'Paradise Snorkel Safari',
                                description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
                                image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
                              }
                            ];
                        
                            // Fixed Duke Paoa Kahanamoku Statue location
                            const FIXED_PICKUP = {
                              name: "Duke Paoa Kahanamoku Statue",
                              lat: 21.277054,
                              lon: -157.826810,
                              instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
                              time: "8:00 AM",
                              image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
                              mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
                            };
                        
                            // Updated function to load Google Maps API with Places library using bootstrap loader
                            const loadGoogleMapsScript = () => {
                              return new Promise((resolve, reject) => {
                                // Check if API is already loaded
                                if (window.google && window.google.maps && window.google.maps.places) {
                                  console.log('Google Maps API already loaded');
                                  resolve();
                                  return;
                                }
                                
                                // Define callback function that will be called by Google Maps API
                                window.initGoogleMaps = function() {
                                  console.log('Google Maps API loaded successfully via callback');
                                  resolve();
                                };
                                
                                // Set a timeout to catch loading failures
                                const timeoutId = setTimeout(() => {
                                  console.error('Google Maps API loading timed out');
                                  reject(new Error('Google Maps API loading timed out'));
                                }, 10000);
                                
                                // Create the bootstrap loader script
                                const script = document.createElement('script');
                                script.innerHTML = `
                                  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
                                    key: "${apiKey}",
                                    v: "alpha" // Use alpha channel for Places API (Preview)
                                  });
                                `;
                                
                                script.onload = function() {
                                  clearTimeout(timeoutId);
                                  console.log('Google Maps bootstrap script loaded');
                                  
                                  // Try to load the places library immediately
                                  setTimeout(async () => {
                                    try {
                                      if (window.google && window.google.maps) {
                                        await window.google.maps.importLibrary("places");
                                        clearTimeout(timeoutId);
                                        console.log('Places library loaded via importLibrary');
                                        resolve();
                                      }
                                    } catch (err) {
                                      console.warn('Initial importLibrary attempt failed:', err);
                                      // Don't reject here, the callback might still work
                                    }
                                  }, 500);
                                };
                                
                                script.onerror = function(error) {
                                  clearTimeout(timeoutId);
                                  console.error('Error loading Google Maps bootstrap script:', error);
                                  reject(new Error('Failed to load Google Maps API'));
                                };
                                
                                document.head.appendChild(script);
                              });
                            };
                        
                            // Helper function to initialize the mode icon when showing the route step
                            const initializeRouteStepIcon = () => {
                              const routeStepBtn = wrapper.querySelector('#show-route-btn');
                              if (routeStepBtn) {
                                routeStepBtn.addEventListener('click', function() {
                                  // Set the initial icon after a short delay to ensure DOM is ready
                                  setTimeout(() => {
                                    const modeSelect = wrapper.querySelector('#transport-mode');
                                    if (modeSelect) {
                                      updateTransportModeIcon(modeSelect.value);
                                    }
                                  }, 200);
                                });
                              }
                            }
                            
                            // Improved function to initialize Google Places Autocomplete with better error handling
                            function setupAutocomplete() {
                              console.log('Setting up autocomplete...');
                              
                              // Check if Google Maps API is loaded
                              if (!window.google || !window.google.maps || !window.google.maps.places) {
                                console.error('Google Maps API not fully loaded, cannot set up autocomplete');
                                return;
                              }
                              
                              // Get input field - now we only have one field
                              const accommodationInput = wrapper.querySelector('#accommodation-input');
                              
                              // Debug info
                              console.log('Accommodation input found:', !!accommodationInput);
                              
                              // Check if DOM element exists
                              if (!accommodationInput) {
                                console.error('Required input not found for autocomplete');
                                return;
                              }
                              
                              // Initialize autocomplete on the accommodation field
                              console.log('Creating accommodation autocomplete');
                              try {
                                const accommodationOptions = {
                                  // Allow both establishments and addresses
                                  types: [], // No type restrictions to allow both
                                  componentRestrictions: {country: 'us'},
                                  // Add location bias for Honolulu
                                  bounds: new google.maps.LatLngBounds(
                                    new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
                                    new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
                                  ),
                                  strictBounds: false, // Allow results outside the bounds
                                  fields: ['formatted_address', 'geometry', 'name', 'place_id']
                                };
                                
                                const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
                                
                                // When a place is selected
                                autocomplete.addListener('place_changed', function() {
                                  const place = autocomplete.getPlace();
                                  
                                  if (!place.geometry) {
                                    console.error('No place details available for selection');
                                    return;
                                  }
                                  
                                  // The place data is already captured in the input field
                                  console.log('Place selected:', place.name);
                                  
                                  // Automatically search for this location
                                  searchLocationOnChange();
                                });
                                
                                console.log('Accommodation autocomplete successfully initialized');
                              } catch (error) {
                                console.error('Error initializing accommodation autocomplete:', error);
                              }
                            }
                        
                            // Show initial map for Honolulu
                            function showInitialMap() {
                              const mapContainer = wrapper.querySelector('#location-map');
                              if (!mapContainer) return;
                        
                              // Show loading spinner first
                              showLoadingSpinner(mapContainer);
                              
                              // Create an iframe with an initial map of Honolulu
                              const initialMapUrl = `https://www.google.com/maps/embed/v1/view?key=${apiKey}&center=${defaultLat},${defaultLng}&zoom=13&maptype=roadmap`;
                              
                              mapContainer.innerHTML = `
                                <iframe
                                  width="100%"
                                  height="100%"
                                  frameborder="0"
                                  style="border:0"
                                  src="${initialMapUrl}"
                                  allowfullscreen
                                  onload="document.getElementById('map-loading-spinner').style.display='none'"
                                  onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                                ></iframe>
                                <div id="map-loading-spinner" class="map-loading-spinner">
                                  <div class="spinner"></div>
                                </div>
                              `;
                            }
                        
                            // Helper function to show loading spinner inside map container
                            function showLoadingSpinner(container) {
                              // Create spinner element if it doesn't exist yet
                              let spinner = container.querySelector('#map-loading-spinner');
                              if (!spinner) {
                                spinner = document.createElement('div');
                                spinner.id = 'map-loading-spinner';
                                spinner.className = 'map-loading-spinner';
                                spinner.innerHTML = '<div class="spinner"></div>';
                                container.appendChild(spinner);
                              }
                              
                              // Make sure spinner is visible
                              spinner.style.display = 'flex';
                            }
                        
                            // Basic styling and tour selection HTML
                            wrapper.innerHTML = `
                              <style>
                                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
                                
                                *, *::before, *::after {
                                  box-sizing: border-box;
                                }
                                
                                .directions-workflow-container * {
                                  box-sizing: border-box;
                                  font-family: 'Inter', sans-serif;
                                }
                                
                                .directions-workflow-container {
                                  display: flex;
                                  flex-direction: column;
                                  height: 100%;
                                  color: #333;
                                  width: 100%;
                                  max-width: 100%;
                                  min-width: 100%;
                                  position: relative;
                                }
                                
                                .workflow-header {
                                  background-color: ${primaryColor};
                                  color: white;
                                  padding: 16px;
                                  text-align: center;
                                  font-weight: 600;
                                  width: 100%;
                                }
                                
                                .workflow-header h2 {
                                  margin: 0;
                                  font-size: 18px;
                                }
                                
                                .workflow-content {
                                  flex: 1;
                                  overflow-y: auto;
                                  position: relative;
                                  width: 100%;
                                }
                                
                                .workflow-step {
                                  height: 100%;
                                  width: 100%;
                                  max-width: 100%;
                                  padding: 20px;
                                  display: none;
                                  animation: fadeIn 0.3s ease-in-out;
                                  box-sizing: border-box;
                                  overflow: hidden;
                                  position: relative;
                                }
                                
                                .workflow-step.active {
                                  display: flex;
                                  flex-direction: column;
                                  align-items: center;
                                  justify-content: flex-start;
                                }
                                
                                @keyframes fadeIn {
                                  from { opacity: 0; }
                                  to { opacity: 1; }
                                }
                                
                                /* Progress Steps - Positioned in top right */
                                .progress-container {
                                  position: absolute;
                                  top: 8px;
                                  right: 10px;
                                  z-index: 5;
                                }
                                
                                .progress-steps {
                                  display: flex;
                                  align-items: center;
                                  justify-content: flex-end;
                                  gap: 4px;
                                }
                                
                                .workflow-step-indicator {
                                  width: 28px;
                                  height: 28px;
                                  border-radius: 50%;
                                  background-color: #ddd;
                                  display: flex;
                                  align-items: center;
                                  justify-content: center;
                                  color: #555;
                                  font-weight: 600;
                                  font-size: 14px;
                                  margin: 0 2px;
                                }
                                
                                .workflow-step-indicator.active {
                                  background-color: ${primaryColor};
                                  color: white;
                                }
                                
                                .workflow-step-indicator.completed {
                                  background-color: ${primaryColor};
                                  color: white;
                                }
                                
                                /* Connector lines between step indicators */
                                .workflow-step-indicator:not(:last-child):after {
                                  content: "";
                                  display: inline-block;
                                  position: absolute;
                                  width: 8px;
                                  height: 2px;
                                  background-color: #ddd;
                                  margin-left: 30px;
                                }
                                
                                .workflow-step-indicator.completed:not(:last-child):after {
                                  background-color: ${primaryColor};
                                }
                                
                                /* Tour Carousel - Smooth sliding with fixed card positions */
                                .tour-carousel-container {
                                  width: 100%;
                                  position: relative;
                                  margin: 20px auto 50px;
                                  height: 360px; /* Fixed height to ensure visibility */
                                  overflow: visible;
                                }
                                
                                /* Carousel track for smooth sliding */
                                .carousel-track {
                                  display: flex;
                                  position: absolute;
                                  left: 0;
                                  right: 0;
                                  transition: transform 0.4s ease;
                                  width: 100%;
                                  height: 100%;
                                }
                                
                                /* Main card styling */
                                .tour-card {
                                  position: absolute;
                                  width: 280px;
                                  height: 360px;
                                  border-radius: 12px;
                                  overflow: hidden;
                                  transition: all 0.4s ease;
                                  transform-origin: center center;
                                  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
                                  border: 2px solid transparent;
                                  background-color: white;
                                }
                                
                                /* Center card */
                                .tour-card.center {
                                  left: 50%;
                                  transform: translateX(-50%) scale(1);
                                  opacity: 1;
                                  z-index: 3;
                                }
                                
                                /* Left card */
                                .tour-card.left {
                                  left: 50%;
                                  transform: translateX(calc(-50% - 200px)) scale(0.8);
                                  opacity: 0.6;
                                  z-index: 1;
                                }
                                
                                /* Right card */
                                .tour-card.right {
                                  left: 50%;
                                  transform: translateX(calc(-50% + 200px)) scale(0.8);
                                  opacity: 0.6;
                                  z-index: 1;
                                }
                                
                                /* Hide cards that are outside visible range */
                                .tour-card.off-left {
                                  left: 50%;
                                  transform: translateX(calc(-50% - 400px)) scale(0.6);
                                  opacity: 0;
                                  z-index: 0;
                                }
                                
                                .tour-card.off-right {
                                  left: 50%;
                                  transform: translateX(calc(-50% + 400px)) scale(0.6);
                                  opacity: 0;
                                  z-index: 0;
                                }
                                
                                .tour-card.selected {
                                  border: 2px solid ${primaryColor};
                                }
                                
                                .tour-image-container {
                                  width: 100%;
                                  height: 200px; /* Height for image */
                                  overflow: hidden;
                                  position: relative;
                                }
                                
                                .tour-image {
                                  width: 100%;
                                  height: 100%;
                                  object-fit: cover;
                                }
                                
                                .tour-info {
                                  padding: 12px 15px;
                                  flex: 1;
                                  display: flex;
                                  flex-direction: column;
                                }
                                
                                .tour-info h4 {
                                  margin: 0 0 8px;
                                  font-size: 18px;
                                  color: #333;
                                }
                                
                                .tour-description {
                                  font-size: 14px;
                                  color: #555;
                                  margin-bottom: 16px;
                                  flex: 1;
                                }
                                
                                .select-tour-btn {
                                  display: block;
                                  width: 100%;
                                  padding: 10px;
                                  background-color: ${primaryColor};
                                  color: white;
                                  border: none;
                                  border-radius: 6px;
                                  font-weight: 500;
                                  cursor: pointer;
                                  transition: background-color 0.2s;
                                }
                                
                                .select-tour-btn:hover {
                                  background-color: ${secondaryColor};
                                }
                                
                                /* Carousel Arrows - with show/hide logic */
                                .carousel-arrow {
                                  position: absolute;
                                  top: 40%;
                                  transform: translateY(-50%);
                                  width: 36px;
                                  height: 36px;
                                  background-color: white;
                                  border-radius: 50%;
                                  display: flex;
                                  align-items: center;
                                  justify-content: center;
                                  cursor: pointer;
                                  z-index: 10;
                                  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
                                  transition: all 0.3s ease;
                                }
                                
                                .carousel-arrow:hover {
                                  background-color: #f5f5f5;
                                  box-shadow: 0 4px 8px rgba(0,0,0,0.25);
                                  transform: translateY(-50%) scale(1.1);
                                }
                                
                                .carousel-arrow.prev {
                                  left: 5px;
                                }
                                
                                .carousel-arrow.next {
                                  right: 5px;
                                }
                                
                                .carousel-arrow.hidden {
                                  display: none;
                                }
                                
                                .carousel-arrow svg {
                                  width: 24px;
                                  height: 24px;
                                  fill: #555;
                                }
                                
                                /* Carousel indicators */
                                .carousel-indicators {
                                  display: flex;
                                  justify-content: center;
                                  margin-top: 15px;
                                }
                                
                                .carousel-indicator {
                                  width: 8px;
                                  height: 8px;
                                  border-radius: 50%;
                                  background-color: #ddd;
                                  margin: 0 4px;
                                  transition: all 0.2s;
                                  cursor: pointer;
                                }
                                
                                .carousel-indicator.active {
                                  background-color: ${primaryColor};
                                  transform: scale(1.2);
                                }
                                
                                /* Combined Address & Map Form - NEW SECTION FOR MERGED STEP */
                                .combined-address-map {
                                  margin-top: 10px;
                                  width: 100%;
                                  display: flex;
                                  flex-direction: column;
                                  gap: 15px;
                                }
                                
                                .form-group {
                                  margin-bottom: 16px;
                                  width: 100%;
                                }
                                
                                .form-group label {
                                  display: block;
                                  margin-bottom: 6px;
                                  font-weight: 500;
                                  font-size: 14px;
                                }
                                
                                .form-control {
                                  width: 100%;
                                  padding: 12px;
                                  border: 1px solid #e0e0e0;
                                  border-radius: 8px;
                                  font-size: 15px;
                                  transition: border-color 0.2s;
                                  box-sizing: border-box;
                                }
                                
                                .form-control:focus {
                                  outline: none;
                                  border-color: ${primaryColor};
                                }
                                
                                /* Material Icons Styling */
                                .material-symbols-outlined {
                                  font-variation-settings:
                                  'FILL' 0,
                                  'wght' 400,
                                  'GRAD' 0,
                                  'opsz' 24;
                                  vertical-align: middle;
                                  margin-right: 8px;
                                }
                                
                                /* Transport Mode Icon Display */
                                .transport-mode-container {
                                  display: flex;
                                  align-items: center;
                                  margin-bottom: 15px;
                                }
                                
                                .transport-mode-icon {
                                  background-color: ${primaryColor};
                                  color: white;
                                  width: 36px;
                                  height: 36px;
                                  border-radius: 50%;
                                  display: flex;
                                  align-items: center;
                                  justify-content: center;
                                  margin-right: 12px;
                                }
                                
                                .transport-mode-icon img {
                                  width: 20px;
                                  height: 20px;
                                  display: block;
                                  filter: brightness(0) invert(1); /* Make SVG white */
                                }
                        
                                /* Fix for autocomplete dropdown */
                                .pac-container {
                                  z-index: 10000 !important;
                                  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
                                  border-radius: 8px;
                                  border: 1px solid #eaeaea;
                                  margin-top: 4px;
                                  font-family: 'Inter', sans-serif;
                                }
                                
                                .pac-item {
                                  padding: 8px 10px;
                                  cursor: pointer;
                                  font-family: 'Inter', sans-serif !important;
                                }
                                
                                .pac-item:hover {
                                  background-color: #f5f5f5;
                                }
                                
                                .pac-icon {
                                  margin-right: 8px;
                                }
                                
                                .pac-item-query {
                                  font-size: 14px;
                                  font-weight: 500;
                                }
                                
                                /* Loading Animation */
                                .loading-container {
                                  display: flex;
                                  flex-direction: column;
                                  align-items: center;
                                  justify-content: center;
                                  height: 100%;
                                  text-align: center;
                                  width: 100%;
                                }
                                
                                .loading-spinner {
                                  width: 50px;
                                  height: 50px;
                                  border: 5px solid rgba(88, 124, 116, 0.2);
                                  border-radius: 50%;
                                  border-top: 5px solid ${primaryColor};
                                  animation: spin 1s linear infinite;
                                  margin-bottom: 20px;
                                }
                                
                                @keyframes spin {
                                  0% { transform: rotate(0deg); }
                                  100% { transform: rotate(360deg); }
                                }
                                
                                .loading-text {
                                  font-size: 18px;
                                  font-weight: 500;
                                  margin-top: 15px;
                                }
                                
                                .route-map-container, .map-container {
                                  margin-top: 10px;
                                  border-radius: 12px;
                                  overflow: hidden;
                                  border: 2px solid ${primaryColor};
                                  width: 100%;
                                  position: relative;
                                  aspect-ratio: 4/3; /* Maintain aspect ratio */
                                }
                                
                                .map-container iframe, .route-map-container iframe {
                                  width: 100%;
                                  height: 100%;
                                  border: none;
                                }
                                
                                .confirmation-text {
                                  margin: 15px 0;
                                  text-align: center;
                                  font-weight: 500;
                                  width: 100%;
                                }
                                
                                /* Pickup Card */
                                .pickup-card {
                                  border-radius: 12px;
                                  overflow: hidden;
                                  margin-top: 15px;
                                  box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
                                  border: 2px solid ${primaryColor};
                                  width: 100%;
                                  box-sizing: border-box;
                                }
                                
                                .pickup-image {
                                  width: 100%;
                                  height: 180px; /* Fixed height for pickup images */
                                  object-fit: cover;
                                }
                                
                                .pickup-info {
                                  padding: 15px;
                                }
                                
                                .pickup-title {
                                  font-size: 18px;
                                  font-weight: 600;
                                  margin-bottom: 8px;
                                  color: ${primaryColor};
                                }
                                
                                .pickup-address {
                                  font-size: 15px;
                                  margin-bottom: 10px;
                                }
                                
                                .pickup-instructions {
                                  font-size: 14px;
                                  color: #555;
                                  border-left: 3px solid ${primaryColor};
                                  padding-left: 10px;
                                  margin-top: 10px;
                                }
                                
                                /* Route Details */
                                .route-details {
                                  margin-top: 15px;
                                  padding: 12px;
                                  background-color: #f8f9fa;
                                  border-radius: 8px;
                                  font-size: 14px;
                                  border-left: 3px solid ${primaryColor};
                                  width: 100%;
                                  box-sizing: border-box;
                                  margin-bottom: 70px; /* Add more space before the bottom buttons */
                                }
                                
                                .route-details p {
                                  margin: 5px 0;
                                }
                                
                                .route-details .walk-time {
                                  font-weight: 600;
                                  color: ${primaryColor};
                                }
                                
                                /* Buttons */
                                .btn-container {
                                  display: flex;
                                  justify-content: space-between;
                                  width: 100%;
                                  margin-top: 15px;
                                  margin-bottom: 20px;
                                  padding: 0;
                                }
                                
                                .btn {
                                  padding: 12px 24px;
                                  border-radius: 8px;
                                  font-weight: 500;
                                  cursor: pointer;
                                  border: none;
                                  font-size: 15px;
                                  transition: all 0.2s ease;
                                  min-width: 100px;
                                }
                                
                                .btn-primary {
                                  background-color: ${primaryColor};
                                  color: white;
                                }
                                
                                .btn-primary:hover {
                                  background-color: ${secondaryColor};
                                }
                                
                                .btn-secondary {
                                  background-color: #f1f3f5;
                                  color: #495057;
                                }
                                
                                .btn-secondary:hover {
                                  background-color: #e9ecef;
                                }
                                
                                .btn-route {
                                  display: flex;
                                  align-items: center;
                                  justify-content: center;
                                  gap: 8px;
                                  width: 100%;
                                  background-color: ${primaryColor};
                                  color: white;
                                  margin-top: 15px;
                                  margin-bottom: 20px;
                                }
                                
                                .btn-route:hover {
                                  background-color: ${secondaryColor};
                                }
                        
                                /* Map fallback */
                                .map-fallback {
                                  display: none;
                                  padding: 20px;
                                  text-align: center;
                                  background-color: #f8f9fa;
                                  border-radius: 8px;
                                  height: 100%;
                                  width: 100%;
                                  box-sizing: border-box;
                                }
                                
                                /* Make all steps have consistent width */
                                h3, p, form, div.progress-container,
                                div.pickup-card, div.route-details, button.btn-route,
                                div.map-container, div.route-map-container, div.map-fallback {
                                  width: 100%;
                                  max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
                                }
                                
                                /* Fix overflow issues with internal content */
                                img, iframe {
                                  max-width: 100%;
                                  border: 0;
                                }
                                
                                /* New style for the search button */
                                .search-btn {
                                  position: absolute;
                                  right: 10px;
                                  top: 50%;
                                  transform: translateY(-50%);
                                  background: ${primaryColor};
                                  color: white;
                                  border: none;
                                  border-radius: 8px;
                                  padding: 8px 12px;
                                  cursor: pointer;
                                  display: flex;
                                  align-items: center;
                                  justify-content: center;
                                  transition: all 0.2s ease;
                                }
                                
                                .search-btn:hover {
                                  background-color: ${secondaryColor};
                                }
                                
                                .search-btn svg {
                                  width: 18px;
                                  height: 18px;
                                  fill: white;
                                  margin-right: 4px;
                                }
                                
                                /* Accommodation input container for positioning the search button */
                                .accommodation-input-container {
                                  position: relative;
                                  width: 100%;
                                }
                                
                                .accommodation-input-container input {
                                  padding-right: 80px; /* Make space for the search button */
                                }
                        
                                /* Map loading spinner */
                                .map-loading-spinner {
                                  position: absolute;
                                  top: 0;
                                  left: 0;
                                  width: 100%;
                                  height: 100%;
                                  background-color: rgba(255, 255, 255, 0.7);
                                  display: flex;
                                  justify-content: center;
                                  align-items: center;
                                  z-index: 5;
                                }
                                
                                .map-loading-spinner .spinner {
                                  width: 50px;
                                  height: 50px;
                                  border: 5px solid rgba(88, 124, 116, 0.2);
                                  border-radius: 50%;
                                  border-top: 5px solid #587C74;
                                  animation: spin 1s linear infinite;
                                }
                                
                                /* Map instructions overlay */
                                .map-instructions {
                                  position: absolute;
                                  bottom: 15px;
                                  left: 50%;
                                  transform: translateX(-50%);
                                  background-color: rgba(255, 255, 255, 0.9);
                                  padding: 8px 16px;
                                  border-radius: 20px;
                                  font-size: 13px;
                                  color: #333;
                                  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
                                  z-index: 4;
                                  text-align: center;
                                  pointer-events: none;
                                }
                                
                                /* Bottom fixed container for navigation buttons */
                                .bottom-btn-container {
                                  position: absolute;
                                  bottom: 20px;
                                  left: 0;
                                  width: 100%;
                                  display: flex;
                                  justify-content: space-between;
                                  padding: 0 20px;
                                  box-sizing: border-box;
                                  z-index: 5;
                                }
                                
                                /* Special styling for confirmation text to stand out */
                                .confirmation-text {
                                  background-color: rgba(255, 255, 255, 0.9);
                                  border-radius: 8px;
                                  padding: 8px 12px;
                                  text-align: center;
                                  font-weight: 500;
                                  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                                  margin: 15px 0;
                                }
                              </style>
                              
                              <div class="directions-workflow-container">
                                <div class="workflow-header">
                                  <h2>${workflowTitle}</h2>
                                </div>
                                
                                <div class="workflow-content">
                                  <!-- Step 1: Tour Selection with Carousel -->
                                  <div class="workflow-step active" id="step-tour">
                                    <h3>Select Your Tour</h3>
                                    <p>Please select the tour you'll be joining:</p>
                                    
                                    <div class="progress-container">
                                      <div class="progress-steps">
                                        <div class="workflow-step-indicator active completed">1</div>
                                        <div class="workflow-step-indicator">2</div>
                                        <div class="workflow-step-indicator">3</div>
                                      </div>
                                    </div>
                                    
                                    <!-- Carousel with smooth sliding transitions -->
                                    <div class="tour-carousel-container">
                                      <!-- Left arrow -->
                                      <div class="carousel-arrow prev hidden">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                          <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                                        </svg>
                                      </div>
                                      
                                      <!-- Carousel track with cards -->
                                      <div class="carousel-track" id="carousel-track">
                                        <!-- Cards will be dynamically generated here -->
                                      </div>
                                      
                                      <!-- Right arrow -->
                                      <div class="carousel-arrow next">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                          <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                                        </svg>
                                      </div>
                                    </div>
                                    
                                    <!-- Indicators -->
                                    <div class="carousel-indicators" id="carousel-indicators">
                                      ${toursData.map((_, index) => `
                                        <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
                                      `).join('')}
                                    </div>
                                    
                                    <div class="btn-container">
                                      <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
                                      <button class="btn btn-primary" id="next-btn">Next</button>
                                    </div>
                                  </div>
                                  
                                  <!-- NEW COMBINED STEP: Address Input with Map -->
                                  <div class="workflow-step" id="step-combined-address-map">
                                    <h3>Enter Your Accommodation</h3>
                                    <p>Please enter the address where you're staying:</p>
                                    
                                    <div class="progress-container">
                                      <div class="progress-steps">
                                        <div class="workflow-step-indicator completed">1</div>
                                        <div class="workflow-step-indicator active completed">2</div>
                                        <div class="workflow-step-indicator">3</div>
                                      </div>
                                    </div>
                                    
                                    <div class="combined-address-map">
                                      <div class="form-group">
                                        <label for="accommodation-input">Accommodation Name or Address*</label>
                                        <div class="accommodation-input-container">
                                          <input type="text" id="accommodation-input" class="form-control" placeholder="Hotel name or full address" required>
                                          <button id="search-location-btn" class="search-btn" type="button" aria-label="Search">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                                            </svg>
                                            Search
                                          </button>
                                        </div>
                                      </div>
                                      
                                      <!-- Map container with initial view of Honolulu -->
                                      <div class="map-container" id="location-map">
                                        <!-- Initial map will be loaded here -->
                                      </div>
                                      
                                      <div class="map-fallback" id="location-map-fallback">
                                        <p>Unable to display map.</p>
                                        <p id="fallback-address"></p>
                                      </div>
                                      
                                      <!-- This confirmation text shows below the map -->
                                      <p class="confirmation-text" id="location-confirmation-text">
                                        Is this the correct location?
                                      </p>
                                    </div>
                                    
                                    <div class="btn-container">
                                      <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
                                      <button class="btn btn-primary" id="find-pickup-btn">Continue</button>
                                    </div>
                                  </div>
                                  
                                  <!-- Step 3: Finding Pickup Animation -->
                                  <div class="workflow-step" id="step-finding-pickup">
                                    <div class="loading-container">
                                      <div class="loading-spinner"></div>
                                      <div class="loading-text">Finding nearest pickup point...</div>
                                    </div>
                                  </div>
                                  
                                  <!-- Step 4: Pickup Point Info -->
                                  <div class="workflow-step" id="step-pickup-info">
                                    <h3>Your Pickup Location</h3>
                                    
                                    <div class="progress-container">
                                      <div class="progress-steps">
                                        <div class="workflow-step-indicator completed">1</div>
                                        <div class="workflow-step-indicator completed">2</div>
                                        <div class="workflow-step-indicator active completed">3</div>
                                      </div>
                                    </div>
                                    
                                    <div class="pickup-card">
                                      <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
                                      <div class="pickup-info">
                                        <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                                        <p class="pickup-address" id="pickup-address"></p>
                                        <div class="pickup-instructions" id="pickup-instructions">
                                          <p id="pickup-time"></p>
                                          <p id="pickup-details"></p>
                                        </div>
                                      </div>
                                    </div>
                                    
                                    <button class="btn btn-route" id="show-route-btn">
                                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                                      </svg>
                                      Show Route
                                    </button>
                                    
                                    <div class="btn-container">
                                      <button class="btn btn-secondary" id="back-to-address-btn">Back</button>
                                      <button class="btn btn-primary" id="done-btn">Done</button>
                                    </div>
                                  </div>
                                  
                                  <!-- Step 5: Route Map with Transportation Mode Selection -->
                                  <div class="workflow-step" id="step-route">
                                    <h3>Getting to Your Pickup Point</h3>
                                    
                                    <div class="transport-mode-container">
                                      <div class="transport-mode-icon" id="transport-mode-icon">
                                        <img src="https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg" alt="Walking" id="transport-mode-img">
                                      </div>
                                      <div class="form-group" style="flex: 1; margin-bottom: 0;">
                                        <label for="transport-mode">Transportation Mode:</label>
                                        <select id="transport-mode" class="form-control">
                                          <option value="walking" selected>Walking</option>
                                          <option value="bicycling">Bicycling</option>
                                          <option value="driving">Driving</option>
                                          <option value="transit">Public Transit</option>
                                        </select>
                                      </div>
                                    </div>
                                    
                                    <div class="route-map-container" id="route-map">
                                      <!-- Route map will be inserted here -->
                                    </div>
                                    <div class="map-fallback" id="route-map-fallback">
                                      <p>Unable to display route map.</p>
                                      <div id="fallback-route-details"></div>
                                    </div>
                                    
                                    <div class="route-details">
                                      <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
                                      <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
                                      <!-- Removed redundant travel time text as it's visible in the map -->
                                    </div>
                                    
                                    <div class="btn-container">
                                      <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
                                      <button class="btn btn-primary" id="route-done-btn">Done</button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            `;
                            
                            // Add the wrapper to the container
                            container.appendChild(wrapper);
                            element.appendChild(container);
                        
                            // Make sure the wrapper becomes visible and scroll is enabled
                            if (animateIn) {
                              setTimeout(() => {
                                wrapper.style.opacity = '1';
                                wrapper.style.transform = 'translateY(0)';
                              }, 100);
                            }
                        
                            // Initialize workflow with scoped variables
                            const workflowData = {
                              selectedTour: "",
                              selectedTourName: "",
                              userLocation: {
                                address: "",
                                placeId: "", 
                                lat: 0,
                                lng: 0
                              },
                              nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
                              apiKey: apiKey,
                              currentCarouselIndex: 0, // Track current carousel position
                              locationConfirmed: false, // Track if the location has been confirmed
                              isSearching: false // Track if a location search is in progress
                            };
                        
                            // Function to create and position carousel cards
                            function createCarouselCards() {
                              const carouselTrack = wrapper.querySelector('#carousel-track');
                              if (!carouselTrack) return;
                              
                              // Clear existing content
                              carouselTrack.innerHTML = '';
                              
                              // Create all tour cards with proper positioning classes
                              toursData.forEach((tour, index) => {
                                const card = document.createElement('div');
                                
                                // Determine position class based on index relative to current index
                                let positionClass = '';
                                if (index === workflowData.currentCarouselIndex) {
                                  positionClass = 'center';
                                } else if (index === workflowData.currentCarouselIndex - 1) {
                                  positionClass = 'left';
                                } else if (index === workflowData.currentCarouselIndex + 1) {
                                  positionClass = 'right';
                                } else if (index < workflowData.currentCarouselIndex) {
                                  positionClass = 'off-left';
                                } else {
                                  positionClass = 'off-right';
                                }
                                
                                card.className = `tour-card ${positionClass}`;
                                card.dataset.tourId = tour.id;
                                card.dataset.tourName = tour.name;
                                card.dataset.index = index;
                                
                                // Add selected class if this is the selected tour
                                if (tour.id === workflowData.selectedTour) {
                                  card.classList.add('selected');
                                }
                                
                                card.innerHTML = `
                                  <div class="tour-image-container">
                                    <img src="${tour.image}" alt="${tour.name}" class="tour-image">
                                  </div>
                                  <div class="tour-info">
                                    <h4>${tour.name}</h4>
                                    <div class="tour-description">${tour.description}</div>
                                    <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
                                  </div>
                                `;
                                
                                carouselTrack.appendChild(card);
                              });
                              
                              // Add event listeners to all select buttons
                              const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
                              selectButtons.forEach(button => {
                                button.addEventListener('click', (e) => {
                                  const tourId = e.target.dataset.tourId;
                                  const tourName = e.target.dataset.tourName;
                                  
                                  // Clear previous selections
                                  const cards = carouselTrack.querySelectorAll('.tour-card');
                                  cards.forEach(card => card.classList.remove('selected'));
                                  
                                  // Mark the parent card as selected
                                  const parentCard = e.target.closest('.tour-card');
                                  if (parentCard) {
                                    parentCard.classList.add('selected');
                                    workflowData.selectedTour = tourId;
                                    workflowData.selectedTourName = tourName;
                                  }
                                });
                              });
                            }
                        
                            // Function to update carousel display
                            function updateCarousel() {
                              // Update card positions based on current index
                              const cards = wrapper.querySelectorAll('.tour-card');
                              
                              cards.forEach((card, index) => {
                                // Remove all position classes
                                card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
                                
                                // Add appropriate position class
                                if (index === workflowData.currentCarouselIndex) {
                                  card.classList.add('center');
                                } else if (index === workflowData.currentCarouselIndex - 1) {
                                  card.classList.add('left');
                                } else if (index === workflowData.currentCarouselIndex + 1) {
                                  card.classList.add('right');
                                } else if (index < workflowData.currentCarouselIndex) {
                                  card.classList.add('off-left');
                                } else {
                                  card.classList.add('off-right');
                                }
                              });
                              
                              // Update indicators
                              const indicators = wrapper.querySelectorAll('.carousel-indicator');
                              indicators.forEach((indicator, index) => {
                                indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
                              });
                              
                              // Update arrow visibility
                              const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
                              const nextArrow = wrapper.querySelector('.carousel-arrow.next');
                              
                              if (prevArrow) {
                                prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
                              }
                              
                              if (nextArrow) {
                                nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
                              }
                            }
                        
                            // Function to update the transport mode icon
                            function updateTransportModeIcon(mode) {
                              const iconImg = wrapper.querySelector('#transport-mode-img');
                              if (!iconImg) return;
                              
                              // SVG paths from the repository
                              const iconPaths = {
                                walking: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg',
                                bicycling: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bike%20Directions%20Icon.svg',
                                driving: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Car%20Directions%20Icon.svg',
                                transit: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bus%20Icon.svg'
                              };
                              
                              // Set the appropriate icon based on the mode
                              const iconPath = iconPaths[mode] || iconPaths.walking;
                              iconImg.src = iconPath;
                              iconImg.alt = mode.charAt(0).toUpperCase() + mode.slice(1);
                            }
                        
                            // Function to handle location search on input change or button click
                            function searchLocationOnChange() {
                              const accommodationInput = wrapper.querySelector('#accommodation-input');
                              const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
                              const confirmationText = wrapper.querySelector('#location-confirmation-text');
                              const mapContainer = wrapper.querySelector('#location-map');
                              
                              if (!accommodationInput || !accommodationInput.value.trim()) {
                                if (findPickupBtn) findPickupBtn.disabled = true;
                                return;
                              }
                              
                              // Set searching state and show spinner
                              workflowData.isSearching = true;
                              if (mapContainer) showLoadingSpinner(mapContainer);
                              
                              // Format the address
                              const city = 'Honolulu'; // Always use Honolulu as the city
                              const fullAddress = `${accommodationInput.value.trim()}, ${city}, Hawaii`;
                              
                              // Use Geocoding API (will update the map)
                              geocodeAddress(fullAddress);
                            }
                        
                            // Geocode an address and update the map in real-time
                            function geocodeAddress(fullAddress) {
                              const locationMap = wrapper.querySelector('#location-map');
                              const locationMapFallback = wrapper.querySelector('#location-map-fallback');
                              const confirmationText = wrapper.querySelector('#location-confirmation-text');
                              const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
                              
                              const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
                              
                              fetch(geocodingUrl)
                                .then(response => response.json())
                                .then(data => {
                                  if (data.status === 'OK' && data.results && data.results.length > 0) {
                                    const result = data.results[0];
                                    
                                    // Format and save location data
                                    const locationData = {
                                      address: result.formatted_address,
                                      placeId: result.place_id,
                                      lat: result.geometry.location.lat,
                                      lng: result.geometry.location.lng
                                    };
                                    
                                    workflowData.userLocation = locationData;
                                    
                                    if (locationMap) {
                                      try {
                                        // Use place ID for more accurate mapping
                                        const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
                                        
                                        locationMap.innerHTML = `
                                          <iframe
                                            width="100%"
                                            height="100%"
                                            frameborder="0"
                                            style="border:0"
                                            src="${mapUrl}"
                                            allowfullscreen
                                            onload="document.getElementById('map-loading-spinner').style.display='none';"
                                            onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
                                          ></iframe>
                                          <div id="map-loading-spinner" class="map-loading-spinner">
                                            <div class="spinner"></div>
                                          </div>
                                        `;
                                        
                                        // Enable continue button
                                        if (findPickupBtn) {
                                          findPickupBtn.disabled = false;
                                        }
                                        
                                        // Show confirmation text
                                        if (confirmationText) {
                                          confirmationText.style.display = 'block';
                                        }
                                        
                                        // Fallback in case iframe doesn't load
                                        if (locationMapFallback) {
                                          const fallbackAddressEl = locationMapFallback.querySelector('#fallback-address');
                                          if (fallbackAddressEl) {
                                            fallbackAddressEl.textContent = locationData.address;
                                          }
                                        }
                                      } catch (error) {
                                        console.error('Error embedding map:', error);
                                        if (locationMap) locationMap.classList.add('hidden');
                                        if (locationMapFallback) locationMapFallback.classList.remove('hidden');
                                      }
                                    }
                                    
                                    // Reset searching state
                                    workflowData.isSearching = false;
                                    workflowData.locationConfirmed = true;
                                    
                                  } else {
                                    console.error('Geocoding API error or no results:', data.status);
                                    
                                    // Show error in spinner
                                    const spinner = locationMap.querySelector('#map-loading-spinner');
                                    if (spinner) {
                                      spinner.innerHTML = `
                                        <div style="text-align: center; padding: 15px; color: #d9534f;">
                                          <p>Unable to find location.</p>
                                          <p>Please check the address.</p>
                                        </div>
                                      `;
                                    }
                                    
                                    // Disable continue button
                                    if (findPickupBtn) findPickupBtn.disabled = true;
                                    
                                    // Hide confirmation text
                                    if (confirmationText) confirmationText.style.display = 'none';
                                    
                                    // Reset searching state
                                    workflowData.isSearching = false;
                                    workflowData.locationConfirmed = false;
                                  }
                                })
                                .catch(error => {
                                  console.error('Error using Geocoding API:', error);
                                  
                                  // Show error in spinner
                                  const spinner = locationMap.querySelector('#map-loading-spinner');
                                  if (spinner) {
                                    spinner.innerHTML = `
                                      <div style="text-align: center; padding: 15px; color: #d9534f;">
                                        <p>Error finding location.</p>
                                        <p>Please check your connection.</p>
                                      </div>
                                    `;
                                  }
                                  
                                  // Disable continue button
                                  if (findPickupBtn) findPickupBtn.disabled = true;
                                  
                                  // Hide confirmation text
                                  if (confirmationText) confirmationText.style.display = 'none';
                                  
                                  // Reset searching state
                                  workflowData.isSearching = false;
                                  workflowData.locationConfirmed = false;
                                });
                            }
                        
                            // Add event listeners and initialize carousel
                            function setupEventListeners() {
                              // Create initial carousel cards
                              createCarouselCards();
                              
                              // Get carousel navigation elements
                              const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
                              const nextArrow = wrapper.querySelector('.carousel-arrow.next');
                              const indicators = wrapper.querySelectorAll('.carousel-indicator');
                              
                              // Previous slide
                              if (prevArrow) {
                                prevArrow.addEventListener('click', () => {
                                  if (workflowData.currentCarouselIndex > 0) {
                                    workflowData.currentCarouselIndex--;
                                    updateCarousel();
                                  }
                                });
                              }
                              
                              // Next slide
                              if (nextArrow) {
                                nextArrow.addEventListener('click', () => {
                                  if (workflowData.currentCarouselIndex < toursData.length - 1) {
                                    workflowData.currentCarouselIndex++;
                                    updateCarousel();
                                  }
                                });
                              }
                              
                              // Indicator clicks
                              indicators.forEach((indicator) => {
                                indicator.addEventListener('click', () => {
                                  workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
                                  updateCarousel();
                                });
                              });
                              
                              // Get all DOM elements for event handling
                              const nextBtn = wrapper.querySelector('#next-btn');
                              const cancelBtn = wrapper.querySelector('#cancel-btn');
                              const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
                              const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
                              const searchLocationBtn = wrapper.querySelector('#search-location-btn');
                              const accommodationInput = wrapper.querySelector('#accommodation-input');
                              const backToAddressBtn = wrapper.querySelector('#back-to-address-btn');
                              const doneBtn = wrapper.querySelector('#done-btn');
                              const showRouteBtn = wrapper.querySelector('#show-route-btn');
                              const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
                              const routeDoneBtn = wrapper.querySelector('#route-done-btn');
                              const transportModeSelect = wrapper.querySelector('#transport-mode');
                        
                              // Button event listeners
                              if (nextBtn) {
                                nextBtn.addEventListener('click', () => {
                                  if (workflowData.selectedTour) {
                                    goToStep('step-combined-address-map');
                                    setTimeout(() => {
                                      setupAutocomplete();
                                      showInitialMap();
                                    }, 500);
                                  } else {
                                    alert('Please select a tour first.');
                                  }
                                });
                              }
                        
                              if (cancelBtn) {
                                cancelBtn.addEventListener('click', () => {
                                  cancelWorkflow();
                                });
                              }
                        
                              if (backToTourBtn) {
                                backToTourBtn.addEventListener('click', () => {
                                  goToStep('step-tour');
                                });
                              }
                        
                              // Initially disable continue button until a location is selected
                              if (findPickupBtn) {
                                findPickupBtn.disabled = true;
                              }
                        
                              // Search button click event
                              if (searchLocationBtn) {
                                searchLocationBtn.addEventListener('click', () => {
                                  searchLocationOnChange();
                                });
                              }
                        
                              // Enter key in accommodation input
                              if (accommodationInput) {
                                accommodationInput.addEventListener('keypress', (e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    searchLocationOnChange();
                                  }
                                });
                              }
                        
                              // Find pickup button click
                              if (findPickupBtn) {
                                findPickupBtn.addEventListener('click', () => {
                                  findPickupPoint();
                                });
                              }
                        
                              if (backToAddressBtn) {
                                backToAddressBtn.addEventListener('click', () => {
                                  goToStep('step-combined-address-map');
                                  
                                  // Re-setup autocomplete on going back
                                  setTimeout(() => {
                                    setupAutocomplete();
                                  }, 300);
                                });
                              }
                        
                              if (doneBtn) {
                                doneBtn.addEventListener('click', () => {
                                  completeWorkflow();
                                });
                              }
                        
                              if (showRouteBtn) {
                                showRouteBtn.addEventListener('click', () => {
                                  showRouteMap();
                                  
                                  // Initialize transport mode icon
                                  setTimeout(() => {
                                    if (transportModeSelect) {
                                      updateTransportModeIcon(transportModeSelect.value);
                                    }
                                  }, 200);
                                });
                              }
                        
                              if (backToPickupBtn) {
                                backToPickupBtn.addEventListener('click', () => {
                                  goToStep('step-pickup-info');
                                });
                              }
                        
                              if (routeDoneBtn) {
                                routeDoneBtn.addEventListener('click', () => {
                                  completeWorkflow();
                                });
                              }
                        
                              // Transport mode change
                              if (transportModeSelect) {
                                transportModeSelect.addEventListener('change', function() {
                                  updateTransportModeIcon(this.value);
                                  showRouteMap();
                                });
                              }
                            }
                        
                            // Helper function to navigate between steps
                            function goToStep(stepId) {
                              console.log('Navigating to step:', stepId);
                              const steps = wrapper.querySelectorAll('.workflow-step');
                              steps.forEach(step => {
                                step.classList.remove('active');
                              });
                              const targetStep = wrapper.querySelector(`#${stepId}`);
                              if (targetStep) {
                                targetStep.classList.add('active');
                                
                                // Re-initialize autocomplete if we're going to the address step
                                if (stepId === 'step-combined-address-map') {
                                  console.log('Re-initializing autocomplete on step change to address input');
                                  // Wait a moment for the DOM to update
                                  setTimeout(() => {
                                    setupAutocomplete();
                                    if (!workflowData.locationConfirmed) {
                                      showInitialMap();
                                    }
                                  }, 300);
                                }
                              } else {
                                console.error('Target step not found:', stepId);
                              }
                            }
                        
                            // Haversine formula to calculate distance between coordinates
                            function calculateDistance(lat1, lon1, lat2, lon2) {
                              function toRadians(degrees) {
                                return degrees * (Math.PI / 180);
                              }
                        
                              const R = 6371; // Radius of the Earth in kilometers
                              const dLat = toRadians(lat2 - lat1);
                              const dLon = toRadians(lon2 - lon1);
                              const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                                        Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                                        Math.sin(dLon / 2) * Math.sin(dLon / 2);
                              const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                              const distance = R * c; // Distance in kilometers
                              return distance;
                            }
                        
                            // Function to find the nearest pickup point - now always returns the fixed pickup
                            function findPickupPoint() {
                              goToStep('step-finding-pickup');
                        
                              setTimeout(() => {
                                // Always use the fixed pickup location
                                workflowData.nearestPickup = FIXED_PICKUP;
                        
                                // Update the pickup info
                                const pickupImage = wrapper.querySelector('#pickup-image');
                                const pickupTitle = wrapper.querySelector('#pickup-title');
                                const pickupAddress = wrapper.querySelector('#pickup-address');
                                const pickupTime = wrapper.querySelector('#pickup-time');
                                const pickupDetails = wrapper.querySelector('#pickup-details');
                        
                                if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
                                if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
                                if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
                                if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
                                if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;
                        
                                // Move to the pickup info step
                                goToStep('step-pickup-info');
                              }, 2000);
                            }
                        
                            // Function to show the route map with transportation mode
                            function showRouteMap() {
                              // Get selected transportation mode
                              const transportModeSelect = wrapper.querySelector('#transport-mode');
                              const mode = transportModeSelect ? transportModeSelect.value : 'walking';
                              
                              // Format the origin and destination coordinates
                              const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
                              const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
                              
                              // Get the route map container
                              const routeMapContainer = wrapper.querySelector('#route-map');
                              const routeMapFallback = wrapper.querySelector('#route-map-fallback');
                              
                              if (routeMapContainer) {
                                try {
                                  // Show loading spinner first
                                  showLoadingSpinner(routeMapContainer);
                                  
                                  // Create an iframe with directions using the selected mode
                                  const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
                                  
                                  routeMapContainer.innerHTML = `
                                    <iframe
                                      width="100%"
                                      height="100%"
                                      frameborder="0"
                                      style="border:0"
                                      src="${directionsUrl}"
                                      allowfullscreen
                                      onload="document.getElementById('map-loading-spinner').style.display='none';"
                                      onerror="document.getElementById('route-map').style.display='none'; document.getElementById('route-map-fallback').style.display='block';"
                                    ></iframe>
                                    <div id="map-loading-spinner" class="map-loading-spinner">
                                      <div class="spinner"></div>
                                    </div>
                                  `;
                                  
                                  // Fallback in case iframe doesn't load
                                  if (routeMapFallback) {
                                    const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
                                    if (fallbackRouteDetails) {
                                      fallbackRouteDetails.innerHTML = `
                                        <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
                                      `;
                                    }
                                  }
                                } catch (error) {
                                  console.error('Error embedding route map:', error);
                                  if (routeMapContainer) routeMapContainer.style.display = 'none';
                                  if (routeMapFallback) routeMapFallback.style.display = 'block';
                                }
                              }
                        
                              // Update route details
                              const routeFrom = wrapper.querySelector('#route-from');
                              const routeTo = wrapper.querySelector('#route-to');
                        
                              if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
                              if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;
                        
                              // Go to the route step
                              goToStep('step-route');
                            }
                        
                            // Function to handle workflow cancellation
                            function cancelWorkflow() {
                              // Signal to Voiceflow that the workflow is cancelled
                              if (window.voiceflow && window.voiceflow.chat) {
                                window.voiceflow.chat.interact({
                                  type: 'request',
                                  payload: {
                                    type: 'directions-cancel'
                                  }
                                });
                              }
                            }
                        
                            // Function to handle workflow completion
                            function completeWorkflow() {
                              // Prepare data to send back to Voiceflow
                              const completionData = {
                                selectedTour: workflowData.selectedTourName,
                                userAddress: workflowData.userLocation.address,
                                pickupPoint: workflowData.nearestPickup.name,
                                pickupTime: workflowData.nearestPickup.time,
                                pickupInstructions: workflowData.nearestPickup.instructions,
                                userLat: workflowData.userLocation.lat,
                                userLon: workflowData.userLocation.lng,
                                pickupLat: workflowData.nearestPickup.lat,
                                pickupLon: workflowData.nearestPickup.lon
                              };
                        
                              // Signal to Voiceflow that the workflow is complete with the collected data
                              if (window.voiceflow && window.voiceflow.chat) {
                                window.voiceflow.chat.interact({
                                  type: 'request',
                                  payload: {
                                    type: 'directions-complete',
                                    data: completionData
                                  }
                                });
                              }
                            }
                        
                            // Setup event listeners immediately before API loading
                            setupEventListeners();
                        
                            // Initialize the workflow with robust handling
                            loadGoogleMapsScript()
                              .then(() => {
                                console.log('Google Maps API loaded successfully');
                                setupAutocomplete();
                              })
                              .catch(error => {
                                console.error('Failed to load Google Maps API:', error);
                                // Add direct script tag as a desperate fallback (no callback)
                                console.log('Adding direct script tag as fallback after API load failure');
                                const script = document.createElement('script');
                                script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
                                script.onload = () => {
                                  console.log('Fallback Google Maps API loaded');
                                  setTimeout(() => {
                                    setupAutocomplete();
                                  }, 500);
                                };
                                document.head.appendChild(script);
                              });
                          },
                        };



// YRS: VERSION 21 (March 14 2025)

export const DirectionsWorkflowExtension21 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow21' || trace.payload?.name === 'ext_directionsWorkflow21',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '700', // Increased height to give more space for buttons
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper
    wrapper.style.position = 'relative'; // For absolute positioning inside

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Initialize the mode icon when showing the route step
    const routeStepBtn = wrapper.querySelector('#show-route-btn');
    if (routeStepBtn) {
      routeStepBtn.addEventListener('click', function() {
        // Set the initial icon after a short delay to ensure DOM is ready
        setTimeout(() => {
          const modeSelect = wrapper.querySelector('#transport-mode');
          if (modeSelect) {
            updateTransportModeIcon(modeSelect.value);
          }
        }, 200);
      });
    }
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input field
      const accommodationInput = wrapper.querySelector('#accommodation-input');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      
      // Check if DOM element exists
      if (!accommodationInput) {
        console.error('Required input not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on the accommodation field
      console.log('Creating accommodation autocomplete');
      try {
        const accommodationOptions = {
          // Allow both establishments and addresses
          types: [], // No type restrictions to allow both
          componentRestrictions: {country: 'us'},
          // Add location bias for Honolulu
          bounds: new google.maps.LatLngBounds(
            new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
            new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
          ),
          strictBounds: false, // Allow results outside the bounds
          fields: ['formatted_address', 'geometry', 'name', 'place_id']
        };
        
        const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
        
        // When a place is selected
        autocomplete.addListener('place_changed', function() {
          const place = autocomplete.getPlace();
          
          if (!place.geometry) {
            console.error('No place details available for selection');
            return;
          }
          
          // The place data is already captured in the input field
          console.log('Place selected:', place.name);
          
          // Update the map with the selected place
          updateMapForLocation(place);
        });
        
        console.log('Accommodation autocomplete successfully initialized');
      } catch (error) {
        console.error('Error initializing accommodation autocomplete:', error);
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          position: relative;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
          position: relative;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #ddd;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):after {
          content: "";
          display: inline-block;
          position: absolute;
          width: 8px;
          height: 2px;
          background-color: #ddd;
          margin-left: 30px;
        }
        
        .workflow-step-indicator.completed:not(:last-child):after {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - Smooth sliding with fixed card positions */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px auto 50px;
          height: 360px; /* Fixed height to ensure visibility */
          overflow: visible;
        }
        
        /* Carousel track for smooth sliding */
        .carousel-track {
          display: flex;
          position: absolute;
          left: 0;
          right: 0;
          transition: transform 0.4s ease;
          width: 100%;
          height: 100%;
        }
        
        /* Main card styling */
        .tour-card {
          position: absolute;
          width: 280px;
          height: 360px;
          border-radius: 12px;
          overflow: hidden;
          transition: all 0.4s ease;
          transform-origin: center center;
          box-shadow: 0 4px 10px rgba(0,0,0,0.1);
          border: 2px solid transparent;
          background-color: white;
        }
        
        /* Center card */
        .tour-card.center {
          left: 50%;
          transform: translateX(-50%) scale(1);
          opacity: 1;
          z-index: 3;
        }
        
        /* Left card */
        .tour-card.left {
          left: 50%;
          transform: translateX(calc(-50% - 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Right card */
        .tour-card.right {
          left: 50%;
          transform: translateX(calc(-50% + 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Hide cards that are outside visible range */
        .tour-card.off-left {
          left: 50%;
          transform: translateX(calc(-50% - 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.off-right {
          left: 50%;
          transform: translateX(calc(-50% + 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image-container {
          width: 100%;
          height: 200px; /* Height for image */
          overflow: hidden;
          position: relative;
        }
        
        .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px 15px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }
        
        .tour-info h4 {
          margin: 0 0 8px;
          font-size: 18px;
          color: #333;
        }
        
        .tour-description {
          font-size: 14px;
          color: #555;
          margin-bottom: 16px;
          flex: 1;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel Arrows - with show/hide logic */
        .carousel-arrow {
          position: absolute;
          top: 40%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.3s ease;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow.hidden {
          display: none;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        /* Carousel indicators */
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 15px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
          cursor: pointer;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Material Icons Styling */
        .material-symbols-outlined {
          font-variation-settings:
          'FILL' 0,
          'wght' 400,
          'GRAD' 0,
          'opsz' 24;
          vertical-align: middle;
          margin-right: 8px;
        }
        
        /* Transport Mode Icon Display */
        .transport-mode-container {
          display: flex;
          align-items: center;
          margin-bottom: 15px;
        }
        
        .transport-mode-icon {
          background-color: ${primaryColor};
          color: white;
          width: 36px;
          height: 36px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          margin-right: 12px;
        }
        
        .transport-mode-icon img {
          width: 20px;
          height: 20px;
          display: block;
          filter: brightness(0) invert(1); /* Make SVG white */
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .route-map-container, .map-container {
          margin-top: 10px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
          margin-bottom: 70px; /* Add more space before the bottom buttons */
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          width: 100%;
          position: absolute;
          bottom: 15px;
          left: 0;
          padding: 0 20px;
          z-index: 10; /* Ensure buttons appear above other elements */
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
          min-width: 100px;
          margin-top: 15px;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
          margin-bottom: 60px; /* Add space below the Show Route button to avoid collision with bottom buttons */
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }

        /* Custom styles for the combined accommodation-map step */
        .map-section {
          margin-top: 0;
          width: 100%;
          margin-bottom: 70px; /* Add more space for the buttons */
        }

        .map-confirmation-text {
          margin-top: 10px;
          margin-bottom: 5px;
          font-size: 14px;
          text-align: center;
        }
        
        /* Adjust the address form spacing */
        .address-form {
          margin-top: 5px;
          margin-bottom: 15px;
          width: 100%;
        }

        /* Search input with button inside */
        .search-input-container {
          position: relative;
          display: flex;
          align-items: center;
          margin-bottom: 20px;
        }
        
        .search-input {
          padding-right: 100px; /* Make room for the search button */
        }
        
        .search-btn {
          position: absolute;
          right: 4px;
          height: calc(100% - 8px);
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 5px;
          padding: 0 12px;
        }
        
        .search-btn:hover {
          background-color: ${secondaryColor};
        }
        
        .search-btn svg {
          width: 16px;
          height: 16px;
        }
        
        /* Spinner container styling */
        .loading-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(255, 255, 255, 0.8);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 10;
          border-radius: 12px;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
              </div>
            </div>
            
            <!-- Carousel with smooth sliding transitions -->
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev hidden">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track with cards -->
              <div class="carousel-track" id="carousel-track">
                <!-- Cards will be dynamically generated here -->
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators" id="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- COMBINED STEP: Address Input + Location Confirmation -->
          <div class="workflow-step" id="step-address-confirm">
            <h3>Enter Your Accommodation</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group search-input-container">
                <input type="text" id="accommodation-input" class="form-control search-input" placeholder="Hotel name or full address" required>
                <button type="button" class="search-btn" id="update-map-btn">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  </svg>
                  Search
                </button>
              </div>
            </form>
            
            <!-- Map Section -->
            <div class="map-section">
              <div class="map-container" id="location-map">
                <!-- Default map of Honolulu will be inserted here -->
              </div>
              <div class="map-fallback" id="location-map-fallback">
                <p>Unable to display map.</p>
                <p id="fallback-address"></p>
              </div>
              
              <p class="map-confirmation-text">Is this the correct location?</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 3: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 4: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 5: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="transport-mode-container">
              <div class="transport-mode-icon" id="transport-mode-icon">
                <img src="https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg" alt="Walking" id="transport-mode-img">
              </div>
              <div class="form-group" style="flex: 1; margin-bottom: 0;">
                <label for="transport-mode">Transportation Mode:</label>
                <select id="transport-mode" class="form-control">
                  <option value="walking" selected>Walking</option>
                  <option value="bicycling">Bicycling</option>
                  <option value="driving">Driving</option>
                  <option value="transit">Public Transit</option>
                </select>
              </div>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <!-- Removed redundant travel time text as it's visible in the map -->
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0, // Track current carousel position
      mapInitialized: false
    };

    // Function to create and position carousel cards
    function createCarouselCards() {
      const carouselTrack = wrapper.querySelector('#carousel-track');
      if (!carouselTrack) return;
      
      // Clear existing content
      carouselTrack.innerHTML = '';
      
      // Create all tour cards with proper positioning classes
      toursData.forEach((tour, index) => {
        const card = document.createElement('div');
        
        // Determine position class based on index relative to current index
        let positionClass = '';
        if (index === workflowData.currentCarouselIndex) {
          positionClass = 'center';
        } else if (index === workflowData.currentCarouselIndex - 1) {
          positionClass = 'left';
        } else if (index === workflowData.currentCarouselIndex + 1) {
          positionClass = 'right';
        } else if (index < workflowData.currentCarouselIndex) {
          positionClass = 'off-left';
        } else {
          positionClass = 'off-right';
        }
        
        card.className = `tour-card ${positionClass}`;
        card.dataset.tourId = tour.id;
        card.dataset.tourName = tour.name;
        card.dataset.index = index;
        
        // Add selected class if this is the selected tour
        if (tour.id === workflowData.selectedTour) {
          card.classList.add('selected');
        }
        
        card.innerHTML = `
          <div class="tour-image-container">
            <img src="${tour.image}" alt="${tour.name}" class="tour-image">
          </div>
          <div class="tour-info">
            <h4>${tour.name}</h4>
            <div class="tour-description">${tour.description}</div>
            <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
          </div>
        `;
        
        carouselTrack.appendChild(card);
      });
      
      // Add event listeners to all select buttons
      const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
      selectButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourName = e.target.dataset.tourName;
          
          // Clear previous selections
          const cards = carouselTrack.querySelectorAll('.tour-card');
          cards.forEach(card => card.classList.remove('selected'));
          
          // Mark the parent card as selected
          const parentCard = e.target.closest('.tour-card');
          if (parentCard) {
            parentCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourName;
          }
        });
      });
    }

    // Function to update carousel display
    function updateCarousel() {
      // Update card positions based on current index
      const cards = wrapper.querySelectorAll('.tour-card');
      
      cards.forEach((card, index) => {
        // Remove all position classes
        card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
        
        // Add appropriate position class
        if (index === workflowData.currentCarouselIndex) {
          card.classList.add('center');
        } else if (index === workflowData.currentCarouselIndex - 1) {
          card.classList.add('left');
        } else if (index === workflowData.currentCarouselIndex + 1) {
          card.classList.add('right');
        } else if (index < workflowData.currentCarouselIndex) {
          card.classList.add('off-left');
        } else {
          card.classList.add('off-right');
        }
      });
      
      // Update indicators
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
      });
      
      // Update arrow visibility
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      
      if (prevArrow) {
        prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
      }
      
      if (nextArrow) {
        nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
      }
    }

    // Function to update the transport mode icon
    function updateTransportModeIcon(mode) {
      const iconImg = wrapper.querySelector('#transport-mode-img');
      if (!iconImg) return;
      
      // SVG paths from the repository
      const iconPaths = {
        walking: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg',
        bicycling: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bike%20Directions%20Icon.svg',
        driving: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Car%20Directions%20Icon.svg',
        transit: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bus%20Icon.svg'
      };
      
      // Set the appropriate icon based on the mode
      const iconPath = iconPaths[mode] || iconPaths.walking;
      iconImg.src = iconPath;
      iconImg.alt = mode.charAt(0).toUpperCase() + mode.slice(1);
    }

    // Function to display the default map of Honolulu
    function showDefaultMap() {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          // Create an iframe with default Honolulu location
          const mapUrl = `https://www.google.com/maps/embed/v1/view?key=${apiKey}&center=${defaultLat},${defaultLng}&zoom=13&maptype=roadmap`;
          
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = "Honolulu, Hawaii";
            }
          }
        } catch (error) {
          console.error('Error embedding default map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Function to show loading state in the map
    function showMapLoadingState() {
      const mapContainer = wrapper.querySelector('#location-map');
      
      if (mapContainer) {
        // Check if loading overlay already exists
        let loadingOverlay = mapContainer.querySelector('.loading-overlay');
        
        if (!loadingOverlay) {
          // Create loading overlay
          loadingOverlay = document.createElement('div');
          loadingOverlay.className = 'loading-overlay';
          loadingOverlay.innerHTML = `
            <div class="loading-spinner"></div>
          `;
          
          // Add loading overlay to the map container
          mapContainer.appendChild(loadingOverlay);
        } else {
          // Show existing loading overlay
          loadingOverlay.style.display = 'flex';
        }
      }
    }

    // Function to hide loading state in the map
    function hideMapLoadingState() {
      const mapContainer = wrapper.querySelector('#location-map');
      
      if (mapContainer) {
        const loadingOverlay = mapContainer.querySelector('.loading-overlay');
        if (loadingOverlay) {
          loadingOverlay.style.display = 'none';
        }
      }
    }

    // Function to update the map with a selected place
    function updateMapForLocation(place) {
      if (!place || !place.geometry) {
        console.error('Invalid place object for map update');
        return;
      }

      // Format and save location data
      const locationData = {
        address: place.formatted_address || place.name,
        placeId: place.place_id,
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng()
      };
      
      workflowData.userLocation = locationData;
      
      // Create and embed the map using place ID
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          // Use place ID for more accurate mapping
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          
          // First create iframe element
          const iframe = document.createElement('iframe');
          iframe.width = '100%';
          iframe.height = '100%';
          iframe.frameBorder = '0';
          iframe.style.border = '0';
          iframe.src = mapUrl;
          iframe.allowFullscreen = true;
          
          // Add onload event to hide loading state when map is loaded
          iframe.onload = function() {
            hideMapLoadingState();
            mapContainer.style.display = 'block';
            if (mapFallback) mapFallback.style.display = 'none';
          };
          
          // Add onerror event
          iframe.onerror = function() {
            hideMapLoadingState();
            mapContainer.style.display = 'none';
            if (mapFallback) mapFallback.style.display = 'block';
          };
          
          // Clear the container but keep any loading overlay
          const loadingOverlay = mapContainer.querySelector('.loading-overlay');
          mapContainer.innerHTML = '';
          
          // Add iframe
          mapContainer.appendChild(iframe);
          
          // Re-add loading overlay if it existed
          if (loadingOverlay) {
            mapContainer.appendChild(loadingOverlay);
          }
          
          // Fallback in case iframe doesn't load
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          hideMapLoadingState();
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }

      // Set workflowData.mapInitialized to true once we've successfully updated the map
      workflowData.mapInitialized = true;
    }
    
    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Create initial carousel cards
      createCarouselCards();
      
      // Get carousel navigation elements
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const updateMapBtn = wrapper.querySelector('#update-map-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-input');

      // Button event listeners
      if (nextBtn) {
        nextBtn.addEventListener('click', () => {
          if (workflowData.selectedTour) {
            goToStep('step-address-confirm');
            setTimeout(() => {
              setupAutocomplete();
              
              // Show default map if not already initialized
              if (!workflowData.mapInitialized) {
                showDefaultMap();
              }
            }, 500);
          } else {
            alert('Please select a tour first.');
          }
        });
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => {
          cancelWorkflow();
        });
      }

      if (backToTourBtn) {
        backToTourBtn.addEventListener('click', () => {
          goToStep('step-tour');
        });
      }

      // Update map button click
      if (updateMapBtn) {
        updateMapBtn.addEventListener('click', () => {
          const accommodationValue = accommodationInput ? accommodationInput.value : '';
          if (accommodationValue) {
            // Show loading state in the map container
            showMapLoadingState();
            
            // Start geocoding
            geocodeAddress(accommodationValue);
          } else {
            alert('Please enter your accommodation name or address');
          }
        });
      }

      // Enter key in accommodation input
      if (accommodationInput) {
        accommodationInput.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault(); // Prevent form submission
            updateMapBtn.click(); // Trigger the update map function
          }
        });
      }

      if (findPickupBtn) {
        findPickupBtn.addEventListener('click', () => {
          if (workflowData.mapInitialized) {
            findPickupPoint();
          } else {
            alert('Please enter and search for your accommodation first.');
          }
        });
      }

      if (backToConfirmBtn) {
        backToConfirmBtn.addEventListener('click', () => {
          goToStep('step-address-confirm');
        });
      }

      if (doneBtn) {
        doneBtn.addEventListener('click', () => {
          completeWorkflow();
        });
      }

      if (showRouteBtn) {
        showRouteBtn.addEventListener('click', () => {
          showRouteMap();
        });
      }

      if (backToPickupBtn) {
        backToPickupBtn.addEventListener('click', () => {
          goToStep('step-pickup-info');
        });
      }

      if (routeDoneBtn) {
        routeDoneBtn.addEventListener('click', () => {
          completeWorkflow();
        });
      }
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      console.log('Navigating to step:', stepId);
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address-confirm') {
          console.log('Re-initializing autocomplete on step change to address-confirm');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
            
            // Show default map if not already initialized
            if (!workflowData.mapInitialized) {
              showDefaultMap();
            }
          }, 300);
        }
      } else {
        console.error('Target step not found:', stepId);
      }
    }

    // Geocode an address using the Geocoding API
    function geocodeAddress(address) {
      const city = 'Honolulu'; // Always use Honolulu as the city
      const fullAddress = address.includes('Honolulu') ? address : `${address}, ${city}, Hawaii`;
      
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Create a mock place object that matches the Google Places structure
            const mockPlace = {
              formatted_address: result.formatted_address,
              place_id: result.place_id,
              name: result.formatted_address.split(',')[0],
              geometry: {
                location: {
                  lat: () => result.geometry.location.lat,
                  lng: () => result.geometry.location.lng
                }
              }
            };
            
            // Update the map with this place
            updateMapForLocation(mockPlace);
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            
            // Hide loading state
            hideMapLoadingState();
            
            // Show error in map container
            const mapContainer = wrapper.querySelector('#location-map');
            if (mapContainer) {
              mapContainer.innerHTML = `
                <div style="padding: 20px; text-align: center;">
                  <p>Unable to find the location.</p>
                  <p>Please try again with more specific address details.</p>
                </div>
              `;
            }
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          
          // Hide loading state
          hideMapLoadingState();
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          // First, add the loading overlay if not already present
          let loadingOverlay = routeMapContainer.querySelector('.loading-overlay');
          if (!loadingOverlay) {
            loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'loading-overlay';
            loadingOverlay.innerHTML = `
              <div class="loading-spinner"></div>
              <div style="margin-top: 15px; font-weight: 500;">Loading route...</div>
            `;
            routeMapContainer.appendChild(loadingOverlay);
          } else {
            loadingOverlay.style.display = 'flex';
          }
          
          // Clear existing content except loading overlay
          const existingIframe = routeMapContainer.querySelector('iframe');
          if (existingIframe) {
            routeMapContainer.removeChild(existingIframe);
          }
          
          // Create iframe with a direct embed
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="
                var overlay = this.parentNode.querySelector('.loading-overlay');
                if (overlay) overlay.style.display = 'none';
                this.style.display = 'block';
              "
              onerror="
                this.style.display = 'none';
                document.getElementById('route-map-fallback').style.display = 'block';
              "
            ></iframe>
          `;
          
          // Re-add loading overlay on top of iframe
          if (loadingOverlay) {
            routeMapContainer.appendChild(loadingOverlay);
          }
          
          // Make container visible
          routeMapContainer.style.display = 'block';
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Go to the route step
      goToStep('step-route');
      
      // Set up the transport mode icon update functionality
      const transportModeElement = wrapper.querySelector('#transport-mode');
      const transportModeIcon = wrapper.querySelector('#transport-mode-icon');
      
      if (transportModeElement && transportModeIcon && !transportModeElement.dataset.listenerAdded) {
        // Update icon when mode changes
        transportModeElement.addEventListener('change', function() {
          // Update the icon based on selected mode
          updateTransportModeIcon(this.value);
          // Refresh the route with the new mode
          showRouteMap();
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Setup event listeners immediately before API loading
    setupEventListeners();

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupAutocomplete();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        };
        document.head.appendChild(script);
      });
  },
};

// YRS: VERSION 22 (14 March 2025)

export const DirectionsWorkflowExtension22 = {
  name: 'DirectionsWorkflow',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'ext_directionsWorkflow22' || trace.payload?.name === 'ext_directionsWorkflow22',
  render: ({ trace, element }) => {
    // Extract properties from the payload
    const { 
      apiKey = 'AIzaSyA5y-Tq-IEhgS1NQxY7HgnXe4pPA4tPuH4', // API key
      pickupPoints = [], // This will come from your data
      workflowTitle = 'Find Your Pickup Location',
      height = '700', // Increased height to give more space for buttons
      padding = '15px',
      delay = 0,
      backgroundColor = '#ffffff',
      maxWidth = '500px', // Set consistent max-width
      // Branding colors
      primaryColor = '#587C74',
      secondaryColor = '#3B534E',
      // Border options
      borderWidth = '2px',
      borderColor = '#587C74',
      borderStyle = 'solid',
      borderRadius = '12px',
      // Shadow and effects
      shadowColor = 'rgba(88, 124, 116, 0.2)',
      shadowSize = '8px',
      // Animation
      animateIn = true,
      // Default location bias
      defaultLat = 21.315603,
      defaultLng = -157.858093,
      defaultRadius = 30000.0
    } = trace.payload || {};

    // Default pickup points if none are provided
    const defaultPickupPoints = [
      { 
        name: "Aloha Tower trolley stop", 
        lat: 21.30693198561091, 
        lon: -157.8663891824468, 
        instructions: "Go to the trolley stop in front of Aloha Tower Marketplace (155 Ala Moana Blvd, Honolulu, HI 96813)", 
        time: "6:45 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlohaTowerDrive.png",
        mapsUrl: "https://www.google.com/maps/dir//Aloha+Tower,+155+Ala+Moana+Blvd,+Honolulu,+HI+96813,+United+States/@21.3071037,-157.9484283,12z/data=!4m8!4m7!1m0!1m5!1m1!1s0x7c006e0d29acdfe5:0x69da511e4d40c5f1!2m2!1d-157.8660706!2d21.3070747?entry=ttu"
      },
      { 
        name: "Ala Moana Hotel - curbside on Mahukona Street", 
        lat: 21.290298342118497, 
        lon: -157.84001436219415, 
        instructions: "Meet us near the curbside at Mahukona St", 
        time: "6:50 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_AlaMoana.jpg", 
        mapsUrl: "https://maps.app.goo.gl/JmSDbRyNRbC9oTRS6"
      },
      { 
        name: "Hilton Hawaiian Village - Grand Islander bus depot", 
        lat: 21.282800616178037, 
        lon: -157.83548235215594, 
        instructions: "We will pick you up at 7:00AM from The Grand Islander Bus Depot (Paoa Pi Street)", 
        time: "7:00 AM", 
        image: "https://yannicksegaar.github.io/VF-extensions/RomAIx_GTH_Pickup_Photos/PickupPhoto_HiltonGrandislander.jpg",
        mapsUrl: "https://maps.app.goo.gl/GDD8cUcH6SGaGZyo6"
      }
    ];

    // Clean element first
    element.innerHTML = '';

    // Create a container for the workflow with fixed width
    const container = document.createElement('div');
    container.style.width = '100%';
    container.style.display = 'flex';
    container.style.justifyContent = 'center';
    container.style.alignItems = 'center';
    container.style.backgroundColor = 'transparent';
    container.style.margin = '0';
    container.style.padding = '0';
    
    // Create the main wrapper with FIXED WIDTH
    const wrapper = document.createElement('div');
    wrapper.className = 'directions-workflow-wrapper';
    
    // Apply styling with fixed pixel width
    const fixedWidth = '460px'; // Fixed pixel width for all steps
    wrapper.style.width = fixedWidth;
    wrapper.style.minWidth = fixedWidth;
    wrapper.style.maxWidth = fixedWidth;
    wrapper.style.border = `${borderWidth} ${borderStyle} ${borderColor}`;
    wrapper.style.borderRadius = borderRadius;
    wrapper.style.overflow = 'hidden';
    wrapper.style.backgroundColor = backgroundColor;
    wrapper.style.boxShadow = `0 4px ${shadowSize} ${shadowColor}`;
    wrapper.style.height = height + 'px';
    wrapper.style.display = 'flex';
    wrapper.style.flexDirection = 'column';
    wrapper.style.margin = '0 auto'; // Center the wrapper
    wrapper.style.position = 'relative'; // For absolute positioning inside

    // Add animation if enabled
    if (animateIn) {
      wrapper.style.opacity = '0';
      wrapper.style.transform = 'translateY(20px)';
      wrapper.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
    }

    // Tours data - 5 fictional Hawaiian tours
    const toursData = [
      {
        id: 'aloha-circle',
        name: 'Aloha Island Adventure',
        description: 'Experience the complete beauty of Oahu with scenic coastal views, mountain ranges, and hidden gems',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour1_AlohaCircle_Mockup.png'
      },
      {
        id: 'waimea-valley',
        name: 'Waimea Valley Experience',
        description: 'Immerse yourself in Hawaiian traditions at sacred sites, lush botanical gardens, and spectacular waterfalls',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour2_WaimeaValley_Mockup.png'
      },
      {
        id: 'volcano-discovery',
        name: 'Volcano Discovery Journey',
        description: 'Explore the fascinating volcanic landscapes that shaped the Hawaiian islands with expert guides',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour3_VolcanoDiscovery_Mockup.png'
      },
      {
        id: 'polynesian-heritage',
        name: 'Polynesian Heritage Tour',
        description: 'Discover the rich cultural heritage of ancient Hawaii through authentic performances, crafts, and stories',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour4_PolynesianHeritage_Mockup.png'
      },
      {
        id: 'paradise-snorkel',
        name: 'Paradise Snorkel Safari',
        description: 'Swim alongside tropical fish and sea turtles in Hawaii\'s crystal clear waters at premier snorkeling spots',
        image: 'https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/Tour5_SnorkelSafari_Mockup.png'
      }
    ];

    // Fixed Duke Paoa Kahanamoku Statue location
    const FIXED_PICKUP = {
      name: "Duke Paoa Kahanamoku Statue",
      lat: 21.277054,
      lon: -157.826810,
      instructions: "Meet in front of the Duke Paoa Kahanamoku Statue at Waikiki Beach, next to the police station. Look for our tour guide with a blue 'Aloha Tours' flag.",
      time: "8:00 AM",
      image: "https://yannicksegaar.github.io/VF-extensions/Carousel_MockupTours/PickupPoint_Duke_Mockup.jpg",
      mapsUrl: "https://maps.app.goo.gl/u1YiZZ2wQNQdNiiu5"
    };

    // Updated function to load Google Maps API with Places library using bootstrap loader
    const loadGoogleMapsScript = () => {
      return new Promise((resolve, reject) => {
        // Check if API is already loaded
        if (window.google && window.google.maps && window.google.maps.places) {
          console.log('Google Maps API already loaded');
          resolve();
          return;
        }
        
        // Define callback function that will be called by Google Maps API
        window.initGoogleMaps = function() {
          console.log('Google Maps API loaded successfully via callback');
          resolve();
        };
        
        // Set a timeout to catch loading failures
        const timeoutId = setTimeout(() => {
          console.error('Google Maps API loading timed out');
          reject(new Error('Google Maps API loading timed out'));
        }, 10000);
        
        // Create the bootstrap loader script
        const script = document.createElement('script');
        script.innerHTML = `
          (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=\`https://maps.\${c}apis.com/maps/api/js?\`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: "${apiKey}",
            v: "alpha" // Use alpha channel for Places API (Preview)
          });
        `;
        
        script.onload = function() {
          clearTimeout(timeoutId);
          console.log('Google Maps bootstrap script loaded');
          
          // Try to load the places library immediately
          setTimeout(async () => {
            try {
              if (window.google && window.google.maps) {
                await window.google.maps.importLibrary("places");
                clearTimeout(timeoutId);
                console.log('Places library loaded via importLibrary');
                resolve();
              }
            } catch (err) {
              console.warn('Initial importLibrary attempt failed:', err);
              // Don't reject here, the callback might still work
            }
          }, 500);
        };
        
        script.onerror = function(error) {
          clearTimeout(timeoutId);
          console.error('Error loading Google Maps bootstrap script:', error);
          reject(new Error('Failed to load Google Maps API'));
        };
        
        document.head.appendChild(script);
      });
    };
    
    // Initialize the mode icon when showing the route step
    const routeStepBtn = wrapper.querySelector('#show-route-btn');
    if (routeStepBtn) {
      routeStepBtn.addEventListener('click', function() {
        // Set the initial icon after a short delay to ensure DOM is ready
        setTimeout(() => {
          const modeSelect = wrapper.querySelector('#transport-mode');
          if (modeSelect) {
            updateTransportModeIcon(modeSelect.value);
          }
        }, 200);
      });
    }
    
    // Improved function to initialize Google Places Autocomplete with better error handling
    function setupAutocomplete() {
      console.log('Setting up autocomplete...');
      
      // Check if Google Maps API is loaded
      if (!window.google || !window.google.maps || !window.google.maps.places) {
        console.error('Google Maps API not fully loaded, cannot set up autocomplete');
        return;
      }
      
      // Get input field
      const accommodationInput = wrapper.querySelector('#accommodation-input');
      
      // Debug info
      console.log('Accommodation input found:', !!accommodationInput);
      
      // Check if DOM element exists
      if (!accommodationInput) {
        console.error('Required input not found for autocomplete');
        return;
      }
      
      // Initialize autocomplete on the accommodation field
      console.log('Creating accommodation autocomplete');
      try {
        const accommodationOptions = {
          // Allow both establishments and addresses
          types: [], // No type restrictions to allow both
          componentRestrictions: {country: 'us'},
          // Add location bias for Honolulu
          bounds: new google.maps.LatLngBounds(
            new google.maps.LatLng(21.2, -158.0), // SW corner of Honolulu area
            new google.maps.LatLng(21.4, -157.6)  // NE corner of Honolulu area
          ),
          strictBounds: false, // Allow results outside the bounds
          fields: ['formatted_address', 'geometry', 'name', 'place_id']
        };
        
        const autocomplete = new google.maps.places.Autocomplete(accommodationInput, accommodationOptions);
        
        // When a place is selected
        autocomplete.addListener('place_changed', function() {
          const place = autocomplete.getPlace();
          
          if (!place.geometry) {
            console.error('No place details available for selection');
            return;
          }
          
          // The place data is already captured in the input field
          console.log('Place selected:', place.name);
          
          // Update the map with the selected place
          updateMapForLocation(place);
        });
        
        console.log('Accommodation autocomplete successfully initialized');
      } catch (error) {
        console.error('Error initializing accommodation autocomplete:', error);
      }
    }

    // Basic styling and tour selection HTML
    wrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        *, *::before, *::after {
          box-sizing: border-box;
        }
        
        .directions-workflow-container * {
          box-sizing: border-box;
          font-family: 'Inter', sans-serif;
        }
        
        .directions-workflow-container {
          display: flex;
          flex-direction: column;
          height: 100%;
          color: #333;
          width: 100%;
          max-width: 100%;
          min-width: 100%;
          position: relative;
        }
        
        .workflow-header {
          background-color: ${primaryColor};
          color: white;
          padding: 16px;
          text-align: center;
          font-weight: 600;
          width: 100%;
        }
        
        .workflow-header h2 {
          margin: 0;
          font-size: 18px;
        }
        
        .workflow-content {
          flex: 1;
          overflow-y: auto;
          position: relative;
          width: 100%;
        }
        
        .workflow-step {
          height: 100%;
          width: 100%;
          max-width: 100%;
          padding: 20px;
          display: none;
          animation: fadeIn 0.3s ease-in-out;
          box-sizing: border-box;
          overflow: hidden;
          position: relative;
        }
        
        .workflow-step.active {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        
        /* Progress Steps - Positioned in top right */
        .progress-container {
          position: absolute;
          top: 8px;
          right: 10px;
          z-index: 5;
        }
        
        .progress-steps {
          display: flex;
          align-items: center;
          justify-content: flex-end;
          gap: 4px;
        }
        
        .workflow-step-indicator {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background-color: #ddd;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #555;
          font-weight: 600;
          font-size: 14px;
          margin: 0 2px;
        }
        
        .workflow-step-indicator.active {
          background-color: ${primaryColor};
          color: white;
        }
        
        .workflow-step-indicator.completed {
          background-color: ${primaryColor};
          color: white;
        }
        
        /* Connector lines between step indicators */
        .workflow-step-indicator:not(:last-child):after {
          content: "";
          display: inline-block;
          position: absolute;
          width: 8px;
          height: 2px;
          background-color: #ddd;
          margin-left: 30px;
        }
        
        .workflow-step-indicator.completed:not(:last-child):after {
          background-color: ${primaryColor};
        }
        
        /* Tour Carousel - Smooth sliding with fixed card positions */
        .tour-carousel-container {
          width: 100%;
          position: relative;
          margin: 20px auto 50px;
          height: 360px; /* Fixed height to ensure visibility */
          overflow: visible;
        }
        
        /* Carousel track for smooth sliding */
        .carousel-track {
          display: flex;
          position: absolute;
          left: 0;
          right: 0;
          transition: transform 0.4s ease;
          width: 100%;
          height: 100%;
        }
        
        /* Main card styling */
        .tour-card {
          position: absolute;
          width: 280px;
          height: 360px;
          border-radius: 12px;
          overflow: hidden;
          transition: all 0.4s ease;
          transform-origin: center center;
          box-shadow: 0 4px 10px rgba(0,0,0,0.1);
          border: 2px solid transparent;
          background-color: white;
        }
        
        /* Center card */
        .tour-card.center {
          left: 50%;
          transform: translateX(-50%) scale(1);
          opacity: 1;
          z-index: 3;
        }
        
        /* Left card */
        .tour-card.left {
          left: 50%;
          transform: translateX(calc(-50% - 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Right card */
        .tour-card.right {
          left: 50%;
          transform: translateX(calc(-50% + 200px)) scale(0.8);
          opacity: 0.6;
          z-index: 1;
        }
        
        /* Hide cards that are outside visible range */
        .tour-card.off-left {
          left: 50%;
          transform: translateX(calc(-50% - 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.off-right {
          left: 50%;
          transform: translateX(calc(-50% + 400px)) scale(0.6);
          opacity: 0;
          z-index: 0;
        }
        
        .tour-card.selected {
          border: 2px solid ${primaryColor};
        }
        
        .tour-image-container {
          width: 100%;
          height: 200px; /* Height for image */
          overflow: hidden;
          position: relative;
        }
        
        .tour-image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .tour-info {
          padding: 12px 15px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }
        
        .tour-info h4 {
          margin: 0 0 8px;
          font-size: 18px;
          color: #333;
        }
        
        .tour-description {
          font-size: 14px;
          color: #555;
          margin-bottom: 16px;
          flex: 1;
        }
        
        .select-tour-btn {
          display: block;
          width: 100%;
          padding: 10px;
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.2s;
        }
        
        .select-tour-btn:hover {
          background-color: ${secondaryColor};
        }
        
        /* Carousel Arrows - with show/hide logic */
        .carousel-arrow {
          position: absolute;
          top: 40%;
          transform: translateY(-50%);
          width: 36px;
          height: 36px;
          background-color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 10;
          box-shadow: 0 2px 6px rgba(0,0,0,0.2);
          transition: all 0.3s ease;
        }
        
        .carousel-arrow:hover {
          background-color: #f5f5f5;
          box-shadow: 0 4px 8px rgba(0,0,0,0.25);
          transform: translateY(-50%) scale(1.1);
        }
        
        .carousel-arrow.prev {
          left: 5px;
        }
        
        .carousel-arrow.next {
          right: 5px;
        }
        
        .carousel-arrow.hidden {
          display: none;
        }
        
        .carousel-arrow svg {
          width: 24px;
          height: 24px;
          fill: #555;
        }
        
        /* Carousel indicators */
        .carousel-indicators {
          display: flex;
          justify-content: center;
          margin-top: 15px;
        }
        
        .carousel-indicator {
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background-color: #ddd;
          margin: 0 4px;
          transition: all 0.2s;
          cursor: pointer;
        }
        
        .carousel-indicator.active {
          background-color: ${primaryColor};
          transform: scale(1.2);
        }
        
        /* Address Form */
        .address-form {
          margin-top: 10px;
          width: 100%;
        }
        
        .form-group {
          margin-bottom: 16px;
          width: 100%;
        }
        
        .form-group label {
          display: block;
          margin-bottom: 6px;
          font-weight: 500;
          font-size: 14px;
        }
        
        .form-control {
          width: 100%;
          padding: 12px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          font-size: 15px;
          transition: border-color 0.2s;
          box-sizing: border-box;
        }
        
        .form-control:focus {
          outline: none;
          border-color: ${primaryColor};
        }
        
        /* Material Icons Styling */
        .material-symbols-outlined {
          font-variation-settings:
          'FILL' 0,
          'wght' 400,
          'GRAD' 0,
          'opsz' 24;
          vertical-align: middle;
          margin-right: 8px;
        }
        
        /* Transport Mode Icon Display */
        .transport-mode-container {
          display: flex;
          align-items: center;
          margin-bottom: 15px;
          justify-content: center;
          gap: 12px;
        }
        
        .transport-mode-icon {
          background-color: ${primaryColor};
          color: white;
          width: 36px;
          height: 36px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .transport-mode-icon img {
          width: 20px;
          height: 20px;
          display: block;
          filter: brightness(0) invert(1); /* Make SVG white */
        }
        
        /* Improve the transportation mode select styling */
        #transport-mode {
          min-width: 150px;
          height: 36px;
          border: 1px solid #e0e0e0;
          border-radius: 8px;
          padding: 0 12px;
          font-size: 15px;
          background-color: white;
          cursor: pointer;
        }

        /* Fix for autocomplete dropdown */
        .pac-container {
          z-index: 10000 !important;
          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
          border-radius: 8px;
          border: 1px solid #eaeaea;
          margin-top: 4px;
          font-family: 'Inter', sans-serif;
        }
        
        .pac-item {
          padding: 8px 10px;
          cursor: pointer;
          font-family: 'Inter', sans-serif !important;
        }
        
        .pac-item:hover {
          background-color: #f5f5f5;
        }
        
        .pac-icon {
          margin-right: 8px;
        }
        
        .pac-item-query {
          font-size: 14px;
          font-weight: 500;
        }
        
        /* Loading Animation */
        .loading-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          width: 100%;
        }
        
        .loading-spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(88, 124, 116, 0.2);
          border-radius: 50%;
          border-top: 5px solid ${primaryColor};
          animation: spin 1s linear infinite;
          margin-bottom: 20px;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .loading-text {
          font-size: 18px;
          font-weight: 500;
          margin-top: 15px;
        }
        
        .route-map-container, .map-container {
          margin-top: 10px;
          border-radius: 12px;
          overflow: hidden;
          border: 2px solid ${primaryColor};
          width: 100%;
          position: relative;
          aspect-ratio: 4/3; /* Maintain aspect ratio */
        }
        
        .map-container iframe, .route-map-container iframe {
          width: 100%;
          height: 100%;
          border: none;
        }
        
        .confirmation-text {
          margin: 15px 0;
          text-align: center;
          font-weight: 500;
          width: 100%;
        }
        
        /* Pickup Card */
        .pickup-card {
          border-radius: 12px;
          overflow: hidden;
          margin-top: 15px;
          box-shadow: 0 2px 4px rgba(88, 124, 116, 0.2);
          border: 2px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
        }
        
        .pickup-image {
          width: 100%;
          height: 180px; /* Fixed height for pickup images */
          object-fit: cover;
        }
        
        .pickup-info {
          padding: 15px;
        }
        
        .pickup-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: ${primaryColor};
        }
        
        .pickup-address {
          font-size: 15px;
          margin-bottom: 10px;
        }
        
        .pickup-instructions {
          font-size: 14px;
          color: #555;
          border-left: 3px solid ${primaryColor};
          padding-left: 10px;
          margin-top: 10px;
        }
        
        /* Route Details */
        .route-details {
          margin-top: 15px;
          padding: 12px;
          background-color: #f8f9fa;
          border-radius: 8px;
          font-size: 14px;
          border-left: 3px solid ${primaryColor};
          width: 100%;
          box-sizing: border-box;
          margin-bottom: 70px; /* Add more space before the bottom buttons */
        }
        
        .route-details p {
          margin: 5px 0;
        }
        
        .route-details .walk-time {
          font-weight: 600;
          color: ${primaryColor};
        }
        
        /* Buttons */
        .btn-container {
          display: flex;
          justify-content: space-between;
          width: 100%;
          position: absolute;
          bottom: 15px;
          left: 0;
          padding: 0 20px;
          z-index: 10; /* Ensure buttons appear above other elements */
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          border: none;
          font-size: 15px;
          transition: all 0.2s ease;
          min-width: 100px;
          margin-top: 15px;
        }
        
        .btn-primary {
          background-color: ${primaryColor};
          color: white;
        }
        
        .btn-primary:hover {
          background-color: ${secondaryColor};
        }
        
        .btn-secondary {
          background-color: #f1f3f5;
          color: #495057;
        }
        
        .btn-secondary:hover {
          background-color: #e9ecef;
        }
        
        .btn-route {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          width: 100%;
          background-color: ${primaryColor};
          color: white;
          margin-top: 15px;
          margin-bottom: 60px; /* Add space below the Show Route button to avoid collision with bottom buttons */
        }
        
        .btn-route:hover {
          background-color: ${secondaryColor};
        }

        /* Map fallback */
        .map-fallback {
          display: none;
          padding: 20px;
          text-align: center;
          background-color: #f8f9fa;
          border-radius: 8px;
          height: 100%;
          width: 100%;
          box-sizing: border-box;
        }
        
        /* Make all steps have consistent width */
        h3, p, form, div.progress-container,
        div.pickup-card, div.route-details, button.btn-route,
        div.map-container, div.route-map-container, div.map-fallback {
          width: 100%;
          max-width: 420px; /* slightly smaller than the container to ensure padding doesn't cause overflow */
        }
        
        /* Fix overflow issues with internal content */
        img, iframe {
          max-width: 100%;
          border: 0;
        }

        /* Custom styles for the combined accommodation-map step */
        .map-section {
          margin-top: 0;
          width: 100%;
          margin-bottom: 70px; /* Add more space for the buttons */
        }

        .map-confirmation-text {
          margin-top: 10px;
          margin-bottom: 5px;
          font-size: 14px;
          text-align: center;
        }
        
        /* Adjust the address form spacing */
        .address-form {
          margin-top: 5px;
          margin-bottom: 15px;
          width: 100%;
        }

        /* Search input with button inside */
        .search-input-container {
          position: relative;
          display: flex;
          align-items: center;
          margin-bottom: 20px;
        }
        
        .search-input {
          padding-right: 100px; /* Make room for the search button */
        }
        
        .search-btn {
          position: absolute;
          right: 4px;
          height: calc(100% - 8px);
          background-color: ${primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 5px;
          padding: 0 12px;
        }
        
        .search-btn:hover {
          background-color: ${secondaryColor};
        }
        
        .search-btn svg {
          width: 16px;
          height: 16px;
        }
        
        /* Spinner container styling */
        .loading-overlay {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(255, 255, 255, 0.8);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 10;
          border-radius: 12px;
        }
      </style>
      
      <div class="directions-workflow-container">
        <div class="workflow-header">
          <h2>${workflowTitle}</h2>
        </div>
        
        <div class="workflow-content">
          <!-- Step 1: Tour Selection with Carousel -->
          <div class="workflow-step active" id="step-tour">
            <h3>Select Your Tour</h3>
            <p>Please select the tour you'll be joining:</p>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator active completed">1</div>
                <div class="workflow-step-indicator">2</div>
                <div class="workflow-step-indicator">3</div>
              </div>
            </div>
            
            <!-- Carousel with smooth sliding transitions -->
            <div class="tour-carousel-container">
              <!-- Left arrow -->
              <div class="carousel-arrow prev hidden">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                </svg>
              </div>
              
              <!-- Carousel track with cards -->
              <div class="carousel-track" id="carousel-track">
                <!-- Cards will be dynamically generated here -->
              </div>
              
              <!-- Right arrow -->
              <div class="carousel-arrow next">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                  <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                </svg>
              </div>
            </div>
            
            <!-- Indicators -->
            <div class="carousel-indicators" id="carousel-indicators">
              ${toursData.map((_, index) => `
                <div class="carousel-indicator ${index === 0 ? 'active' : ''}" data-index="${index}"></div>
              `).join('')}
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="cancel-btn">Cancel</button>
              <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
          </div>
          
          <!-- COMBINED STEP: Address Input + Location Confirmation -->
          <div class="workflow-step" id="step-address-confirm">
            <h3>Enter Your Accommodation</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator active completed">2</div>
                <div class="workflow-step-indicator">3</div>
              </div>
            </div>
            
            <form class="address-form" id="address-form">
              <div class="form-group search-input-container">
                <input type="text" id="accommodation-input" class="form-control search-input" placeholder="Hotel name or full address" required>
                <button type="button" class="search-btn" id="update-map-btn">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  </svg>
                  Search
                </button>
              </div>
            </form>
            
            <!-- Map Section -->
            <div class="map-section">
              <div class="map-container" id="location-map">
                <!-- Default map of Honolulu will be inserted here -->
              </div>
              <div class="map-fallback" id="location-map-fallback">
                <p>Unable to display map.</p>
                <p id="fallback-address"></p>
              </div>
              
              <p class="map-confirmation-text">Is this the correct location?</p>
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-tour-btn">Back</button>
              <button class="btn btn-primary" id="find-pickup-btn">Yes, Continue</button>
            </div>
          </div>
          
          <!-- Step 3: Finding Pickup Animation -->
          <div class="workflow-step" id="step-finding-pickup">
            <div class="loading-container">
              <div class="loading-spinner"></div>
              <div class="loading-text">Finding nearest pickup point...</div>
            </div>
          </div>
          
          <!-- Step 4: Pickup Point Info -->
          <div class="workflow-step" id="step-pickup-info">
            <h3>Your Pickup Location</h3>
            
            <div class="progress-container">
              <div class="progress-steps">
                <div class="workflow-step-indicator completed">1</div>
                <div class="workflow-step-indicator completed">2</div>
                <div class="workflow-step-indicator active completed">3</div>
              </div>
            </div>
            
            <div class="pickup-card">
              <img id="pickup-image" src="" alt="Pickup point image" class="pickup-image">
              <div class="pickup-info">
                <h3 class="pickup-title" id="pickup-title">Loading pickup location...</h3>
                <p class="pickup-address" id="pickup-address"></p>
                <div class="pickup-instructions" id="pickup-instructions">
                  <p id="pickup-time"></p>
                  <p id="pickup-details"></p>
                </div>
              </div>
            </div>
            
            <button class="btn btn-route" id="show-route-btn">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
              </svg>
              Show Route
            </button>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-confirm-btn">Back</button>
              <button class="btn btn-primary" id="done-btn">Done</button>
            </div>
          </div>
          
          <!-- Step 5: Route Map with Transportation Mode Selection -->
          <div class="workflow-step" id="step-route">
            <h3>Getting to Your Pickup Point</h3>
            
            <div class="transport-mode-container">
              <div class="transport-mode-icon" id="transport-mode-icon">
                <img src="https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg" alt="Walking" id="transport-mode-img">
              </div>
              <div style="flex: 1; max-width: 200px;">
                <select id="transport-mode" class="form-control">
                  <option value="walking" selected>Walking</option>
                  <option value="bicycling">Bicycling</option>
                  <option value="driving">Driving</option>
                  <option value="transit">Public Transit</option>
                </select>
              </div>
            </div>
            
            <div class="route-map-container" id="route-map">
              <!-- Route map will be inserted here -->
            </div>
            <div class="map-fallback" id="route-map-fallback">
              <p>Unable to display route map.</p>
              <div id="fallback-route-details"></div>
            </div>
            
            <div class="route-details">
              <p><strong>From:</strong> <span id="route-from">Your accommodation</span></p>
              <p><strong>To:</strong> <span id="route-to">Duke Paoa Kahanamoku Statue, Waikiki Beach</span></p>
              <!-- Removed redundant travel time text as it's visible in the map -->
            </div>
            
            <div class="btn-container">
              <button class="btn btn-secondary" id="back-to-pickup-btn">Back</button>
              <button class="btn btn-primary" id="route-done-btn">Done</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the wrapper to the container
    container.appendChild(wrapper);
    element.appendChild(container);

    // Make sure the wrapper becomes visible and scroll is enabled
    if (animateIn) {
      setTimeout(() => {
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
      }, 100);
    }

    // Initialize workflow with scoped variables
    const workflowData = {
      selectedTour: "",
      selectedTourName: "",
      userLocation: {
        address: "",
        placeId: "", 
        lat: 0,
        lng: 0
      },
      nearestPickup: FIXED_PICKUP, // Always use the fixed pickup location
      apiKey: apiKey,
      currentCarouselIndex: 0, // Track current carousel position
      mapInitialized: false
    };

    // Function to create and position carousel cards
    function createCarouselCards() {
      const carouselTrack = wrapper.querySelector('#carousel-track');
      if (!carouselTrack) return;
      
      // Clear existing content
      carouselTrack.innerHTML = '';
      
      // Create all tour cards with proper positioning classes
      toursData.forEach((tour, index) => {
        const card = document.createElement('div');
        
        // Determine position class based on index relative to current index
        let positionClass = '';
        if (index === workflowData.currentCarouselIndex) {
          positionClass = 'center';
        } else if (index === workflowData.currentCarouselIndex - 1) {
          positionClass = 'left';
        } else if (index === workflowData.currentCarouselIndex + 1) {
          positionClass = 'right';
        } else if (index < workflowData.currentCarouselIndex) {
          positionClass = 'off-left';
        } else {
          positionClass = 'off-right';
        }
        
        card.className = `tour-card ${positionClass}`;
        card.dataset.tourId = tour.id;
        card.dataset.tourName = tour.name;
        card.dataset.index = index;
        
        // Add selected class if this is the selected tour
        if (tour.id === workflowData.selectedTour) {
          card.classList.add('selected');
        }
        
        card.innerHTML = `
          <div class="tour-image-container">
            <img src="${tour.image}" alt="${tour.name}" class="tour-image">
          </div>
          <div class="tour-info">
            <h4>${tour.name}</h4>
            <div class="tour-description">${tour.description}</div>
            <button class="select-tour-btn" data-tour-id="${tour.id}" data-tour-name="${tour.name}">Select This Tour</button>
          </div>
        `;
        
        carouselTrack.appendChild(card);
      });
      
      // Add event listeners to all select buttons
      const selectButtons = carouselTrack.querySelectorAll('.select-tour-btn');
      selectButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const tourId = e.target.dataset.tourId;
          const tourName = e.target.dataset.tourName;
          
          // Clear previous selections
          const cards = carouselTrack.querySelectorAll('.tour-card');
          cards.forEach(card => card.classList.remove('selected'));
          
          // Mark the parent card as selected
          const parentCard = e.target.closest('.tour-card');
          if (parentCard) {
            parentCard.classList.add('selected');
            workflowData.selectedTour = tourId;
            workflowData.selectedTourName = tourName;
          }
        });
      });
    }

    // Function to update carousel display
    function updateCarousel() {
      // Update card positions based on current index
      const cards = wrapper.querySelectorAll('.tour-card');
      
      cards.forEach((card, index) => {
        // Remove all position classes
        card.classList.remove('center', 'left', 'right', 'off-left', 'off-right');
        
        // Add appropriate position class
        if (index === workflowData.currentCarouselIndex) {
          card.classList.add('center');
        } else if (index === workflowData.currentCarouselIndex - 1) {
          card.classList.add('left');
        } else if (index === workflowData.currentCarouselIndex + 1) {
          card.classList.add('right');
        } else if (index < workflowData.currentCarouselIndex) {
          card.classList.add('off-left');
        } else {
          card.classList.add('off-right');
        }
      });
      
      // Update indicators
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === workflowData.currentCarouselIndex);
      });
      
      // Update arrow visibility
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      
      if (prevArrow) {
        prevArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === 0);
      }
      
      if (nextArrow) {
        nextArrow.classList.toggle('hidden', workflowData.currentCarouselIndex === toursData.length - 1);
      }
    }

    // Function to update the transport mode icon
    function updateTransportModeIcon(mode) {
      const iconImg = wrapper.querySelector('#transport-mode-img');
      if (!iconImg) return;
      
      // SVG paths from the repository
      const iconPaths = {
        walking: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Material%20Icons%20Directions%20Walk.svg',
        bicycling: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bike%20Directions%20Icon.svg',
        driving: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Car%20Directions%20Icon.svg',
        transit: 'https://yannicksegaar.github.io/VF-extensions/GetDirectionsDemo_svgs/Bus%20Icon.svg'
      };
      
      // Set the appropriate icon based on the mode
      const iconPath = iconPaths[mode] || iconPaths.walking;
      iconImg.src = iconPath;
      iconImg.alt = mode.charAt(0).toUpperCase() + mode.slice(1);
    }

    // Function to display the default map of Honolulu
    function showDefaultMap() {
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          // Create an iframe with default Honolulu location
          const mapUrl = `https://www.google.com/maps/embed/v1/view?key=${apiKey}&center=${defaultLat},${defaultLng}&zoom=13&maptype=roadmap`;
          
          mapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${mapUrl}"
              allowfullscreen
              onload="document.getElementById('location-map').style.display='block'; document.getElementById('location-map-fallback').style.display='none';"
              onerror="document.getElementById('location-map').style.display='none'; document.getElementById('location-map-fallback').style.display='block';"
            ></iframe>
          `;
          
          // Fallback in case iframe doesn't load
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = "Honolulu, Hawaii";
            }
          }
        } catch (error) {
          console.error('Error embedding default map:', error);
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }
    }

    // Function to show loading state in the map
    function showMapLoadingState() {
      const mapContainer = wrapper.querySelector('#location-map');
      
      if (mapContainer) {
        // Check if loading overlay already exists
        let loadingOverlay = mapContainer.querySelector('.loading-overlay');
        
        if (!loadingOverlay) {
          // Create loading overlay
          loadingOverlay = document.createElement('div');
          loadingOverlay.className = 'loading-overlay';
          loadingOverlay.innerHTML = `
            <div class="loading-spinner"></div>
          `;
          
          // Add loading overlay to the map container
          mapContainer.appendChild(loadingOverlay);
        } else {
          // Show existing loading overlay
          loadingOverlay.style.display = 'flex';
        }
      }
    }

    // Function to hide loading state in the map
    function hideMapLoadingState() {
      const mapContainer = wrapper.querySelector('#location-map');
      
      if (mapContainer) {
        const loadingOverlay = mapContainer.querySelector('.loading-overlay');
        if (loadingOverlay) {
          loadingOverlay.style.display = 'none';
        }
      }
    }

    // Function to update the map with a selected place
    function updateMapForLocation(place) {
      if (!place || !place.geometry) {
        console.error('Invalid place object for map update');
        return;
      }

      // Format and save location data
      const locationData = {
        address: place.formatted_address || place.name,
        placeId: place.place_id,
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng()
      };
      
      workflowData.userLocation = locationData;
      
      // Create and embed the map using place ID
      const mapContainer = wrapper.querySelector('#location-map');
      const mapFallback = wrapper.querySelector('#location-map-fallback');
      
      if (mapContainer) {
        try {
          // Use place ID for more accurate mapping
          const mapUrl = `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=place_id:${locationData.placeId}&zoom=17&maptype=roadmap`;
          
          // First create iframe element
          const iframe = document.createElement('iframe');
          iframe.width = '100%';
          iframe.height = '100%';
          iframe.frameBorder = '0';
          iframe.style.border = '0';
          iframe.src = mapUrl;
          iframe.allowFullscreen = true;
          
          // Add onload event to hide loading state when map is loaded
          iframe.onload = function() {
            hideMapLoadingState();
            mapContainer.style.display = 'block';
            if (mapFallback) mapFallback.style.display = 'none';
          };
          
          // Add onerror event
          iframe.onerror = function() {
            hideMapLoadingState();
            mapContainer.style.display = 'none';
            if (mapFallback) mapFallback.style.display = 'block';
          };
          
          // Clear the container but keep any loading overlay
          const loadingOverlay = mapContainer.querySelector('.loading-overlay');
          mapContainer.innerHTML = '';
          
          // Add iframe
          mapContainer.appendChild(iframe);
          
          // Re-add loading overlay if it existed
          if (loadingOverlay) {
            mapContainer.appendChild(loadingOverlay);
          }
          
          // Fallback in case iframe doesn't load
          if (mapFallback) {
            const fallbackAddressEl = mapFallback.querySelector('#fallback-address');
            if (fallbackAddressEl) {
              fallbackAddressEl.textContent = locationData.address;
            }
          }
        } catch (error) {
          console.error('Error embedding map:', error);
          hideMapLoadingState();
          if (mapContainer) mapContainer.style.display = 'none';
          if (mapFallback) mapFallback.style.display = 'block';
        }
      }

      // Set workflowData.mapInitialized to true once we've successfully updated the map
      workflowData.mapInitialized = true;
    }
    
    // Add event listeners and initialize carousel
    function setupEventListeners() {
      // Create initial carousel cards
      createCarouselCards();
      
      // Get carousel navigation elements
      const prevArrow = wrapper.querySelector('.carousel-arrow.prev');
      const nextArrow = wrapper.querySelector('.carousel-arrow.next');
      const indicators = wrapper.querySelectorAll('.carousel-indicator');
      
      // Previous slide
      if (prevArrow) {
        prevArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex > 0) {
            workflowData.currentCarouselIndex--;
            updateCarousel();
          }
        });
      }
      
      // Next slide
      if (nextArrow) {
        nextArrow.addEventListener('click', () => {
          if (workflowData.currentCarouselIndex < toursData.length - 1) {
            workflowData.currentCarouselIndex++;
            updateCarousel();
          }
        });
      }
      
      // Indicator clicks
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', () => {
          workflowData.currentCarouselIndex = parseInt(indicator.dataset.index);
          updateCarousel();
        });
      });
      
      // Get all other DOM elements we need
      const nextBtn = wrapper.querySelector('#next-btn');
      const cancelBtn = wrapper.querySelector('#cancel-btn');
      const backToTourBtn = wrapper.querySelector('#back-to-tour-btn');
      const findPickupBtn = wrapper.querySelector('#find-pickup-btn');
      const backToConfirmBtn = wrapper.querySelector('#back-to-confirm-btn');
      const doneBtn = wrapper.querySelector('#done-btn');
      const showRouteBtn = wrapper.querySelector('#show-route-btn');
      const backToPickupBtn = wrapper.querySelector('#back-to-pickup-btn');
      const routeDoneBtn = wrapper.querySelector('#route-done-btn');
      const updateMapBtn = wrapper.querySelector('#update-map-btn');
      const accommodationInput = wrapper.querySelector('#accommodation-input');

      // Button event listeners
      if (nextBtn) {
        nextBtn.addEventListener('click', () => {
          if (workflowData.selectedTour) {
            goToStep('step-address-confirm');
            setTimeout(() => {
              setupAutocomplete();
              
              // Show default map if not already initialized
              if (!workflowData.mapInitialized) {
                showDefaultMap();
              }
            }, 500);
          } else {
            alert('Please select a tour first.');
          }
        });
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => {
          cancelWorkflow();
        });
      }

      if (backToTourBtn) {
        backToTourBtn.addEventListener('click', () => {
          goToStep('step-tour');
        });
      }

      // Update map button click
      if (updateMapBtn) {
        updateMapBtn.addEventListener('click', () => {
          const accommodationValue = accommodationInput ? accommodationInput.value : '';
          if (accommodationValue) {
            // Show loading state in the map container
            showMapLoadingState();
            
            // Start geocoding
            geocodeAddress(accommodationValue);
          } else {
            alert('Please enter your accommodation name or address');
          }
        });
      }

      // Enter key in accommodation input
      if (accommodationInput) {
        accommodationInput.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault(); // Prevent form submission
            updateMapBtn.click(); // Trigger the update map function
          }
        });
      }

      if (findPickupBtn) {
        findPickupBtn.addEventListener('click', () => {
          if (workflowData.mapInitialized) {
            findPickupPoint();
          } else {
            alert('Please enter and search for your accommodation first.');
          }
        });
      }

      if (backToConfirmBtn) {
        backToConfirmBtn.addEventListener('click', () => {
          goToStep('step-address-confirm');
        });
      }

      if (doneBtn) {
        doneBtn.addEventListener('click', () => {
          completeWorkflow();
        });
      }

      if (showRouteBtn) {
        showRouteBtn.addEventListener('click', () => {
          showRouteMap();
        });
      }

      if (backToPickupBtn) {
        backToPickupBtn.addEventListener('click', () => {
          goToStep('step-pickup-info');
        });
      }

      if (routeDoneBtn) {
        routeDoneBtn.addEventListener('click', () => {
          completeWorkflow();
        });
      }
    }

    // Helper function to navigate between steps
    function goToStep(stepId) {
      console.log('Navigating to step:', stepId);
      const steps = wrapper.querySelectorAll('.workflow-step');
      steps.forEach(step => {
        step.classList.remove('active');
      });
      const targetStep = wrapper.querySelector(`#${stepId}`);
      if (targetStep) {
        targetStep.classList.add('active');
        
        // Re-initialize autocomplete if we're going to the address step
        if (stepId === 'step-address-confirm') {
          console.log('Re-initializing autocomplete on step change to address-confirm');
          // Wait a moment for the DOM to update
          setTimeout(() => {
            setupAutocomplete();
            
            // Show default map if not already initialized
            if (!workflowData.mapInitialized) {
              showDefaultMap();
            }
          }, 300);
        }
      } else {
        console.error('Target step not found:', stepId);
      }
    }

    // Geocode an address using the Geocoding API
    function geocodeAddress(address) {
      const city = 'Honolulu'; // Always use Honolulu as the city
      const fullAddress = address.includes('Honolulu') ? address : `${address}, ${city}, Hawaii`;
      
      const geocodingUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(fullAddress)}&key=${apiKey}`;
      
      fetch(geocodingUrl)
        .then(response => response.json())
        .then(data => {
          if (data.status === 'OK' && data.results && data.results.length > 0) {
            const result = data.results[0];
            
            // Create a mock place object that matches the Google Places structure
            const mockPlace = {
              formatted_address: result.formatted_address,
              place_id: result.place_id,
              name: result.formatted_address.split(',')[0],
              geometry: {
                location: {
                  lat: () => result.geometry.location.lat,
                  lng: () => result.geometry.location.lng
                }
              }
            };
            
            // Update the map with this place
            updateMapForLocation(mockPlace);
          } else {
            console.error('Geocoding API error or no results:', data.status);
            alert('Unable to find the location. Please try again with more specific address details.');
            
            // Hide loading state
            hideMapLoadingState();
            
            // Show error in map container
            const mapContainer = wrapper.querySelector('#location-map');
            if (mapContainer) {
              mapContainer.innerHTML = `
                <div style="padding: 20px; text-align: center;">
                  <p>Unable to find the location.</p>
                  <p>Please try again with more specific address details.</p>
                </div>
              `;
            }
          }
        })
        .catch(error => {
          console.error('Error using Geocoding API:', error);
          alert('Unable to find the location. Please check your internet connection and try again.');
          
          // Hide loading state
          hideMapLoadingState();
        });
    }

    // Haversine formula to calculate distance between coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      function toRadians(degrees) {
        return degrees * (Math.PI / 180);
      }

      const R = 6371; // Radius of the Earth in kilometers
      const dLat = toRadians(lat2 - lat1);
      const dLon = toRadians(lon2 - lon1);
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c; // Distance in kilometers
      return distance;
    }

    // Function to find the nearest pickup point - now always returns the fixed pickup
    function findPickupPoint() {
      goToStep('step-finding-pickup');

      setTimeout(() => {
        // Always use the fixed pickup location
        workflowData.nearestPickup = FIXED_PICKUP;

        // Update the pickup info
        const pickupImage = wrapper.querySelector('#pickup-image');
        const pickupTitle = wrapper.querySelector('#pickup-title');
        const pickupAddress = wrapper.querySelector('#pickup-address');
        const pickupTime = wrapper.querySelector('#pickup-time');
        const pickupDetails = wrapper.querySelector('#pickup-details');

        if (pickupImage) pickupImage.src = workflowData.nearestPickup.image;
        if (pickupTitle) pickupTitle.textContent = workflowData.nearestPickup.name;
        if (pickupAddress) pickupAddress.textContent = `Pickup address for ${workflowData.selectedTourName}`;
        if (pickupTime) pickupTime.innerHTML = `<strong>Pickup time:</strong> ${workflowData.nearestPickup.time}`;
        if (pickupDetails) pickupDetails.textContent = workflowData.nearestPickup.instructions;

        // Move to the pickup info step
        goToStep('step-pickup-info');
      }, 2000);
    }

    // Function to show the route map with transportation mode
    function showRouteMap() {
      // Get selected transportation mode
      const transportModeSelect = wrapper.querySelector('#transport-mode');
      const mode = transportModeSelect ? transportModeSelect.value : 'walking';
      
      // Format the origin and destination coordinates
      const origin = `${workflowData.userLocation.lat},${workflowData.userLocation.lng}`;
      const destination = `${workflowData.nearestPickup.lat},${workflowData.nearestPickup.lon}`;
      
      // Get the route map container
      const routeMapContainer = wrapper.querySelector('#route-map');
      const routeMapFallback = wrapper.querySelector('#route-map-fallback');
      
      if (routeMapContainer) {
        try {
          // Create an iframe with directions using the selected mode
          const directionsUrl = `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${destination}&mode=${mode}`;
          
          // First, add the loading overlay if not already present
          let loadingOverlay = routeMapContainer.querySelector('.loading-overlay');
          if (!loadingOverlay) {
            loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'loading-overlay';
            loadingOverlay.innerHTML = `
              <div class="loading-spinner"></div>
              <div style="margin-top: 15px; font-weight: 500;">Loading route...</div>
            `;
            routeMapContainer.appendChild(loadingOverlay);
          } else {
            loadingOverlay.style.display = 'flex';
          }
          
          // Clear existing content except loading overlay
          const existingIframe = routeMapContainer.querySelector('iframe');
          if (existingIframe) {
            routeMapContainer.removeChild(existingIframe);
          }
          
          // Create iframe with a direct embed
          routeMapContainer.innerHTML = `
            <iframe
              width="100%"
              height="100%"
              frameborder="0"
              style="border:0"
              src="${directionsUrl}"
              allowfullscreen
              onload="
                var overlay = this.parentNode.querySelector('.loading-overlay');
                if (overlay) overlay.style.display = 'none';
                this.style.display = 'block';
              "
              onerror="
                this.style.display = 'none';
                document.getElementById('route-map-fallback').style.display = 'block';
              "
            ></iframe>
          `;
          
          // Re-add loading overlay on top of iframe
          if (loadingOverlay) {
            routeMapContainer.appendChild(loadingOverlay);
          }
          
          // Make container visible
          routeMapContainer.style.display = 'block';
          
          // Fallback in case iframe doesn't load
          if (routeMapFallback) {
            const fallbackRouteDetails = routeMapFallback.querySelector('#fallback-route-details');
            if (fallbackRouteDetails) {
              fallbackRouteDetails.innerHTML = `
                <p>${mode.charAt(0).toUpperCase() + mode.slice(1)} route from ${workflowData.userLocation.address} to ${workflowData.nearestPickup.name}.</p>
              `;
            }
          }
        } catch (error) {
          console.error('Error embedding route map:', error);
          if (routeMapContainer) routeMapContainer.style.display = 'none';
          if (routeMapFallback) routeMapFallback.style.display = 'block';
        }
      }

      // Update route details
      const routeFrom = wrapper.querySelector('#route-from');
      const routeTo = wrapper.querySelector('#route-to');

      if (routeFrom) routeFrom.textContent = workflowData.userLocation.address;
      if (routeTo) routeTo.textContent = workflowData.nearestPickup.name;

      // Calculate travel time based on mode
      const distance = calculateDistance(
        workflowData.userLocation.lat,
        workflowData.userLocation.lng,
        workflowData.nearestPickup.lat,
        workflowData.nearestPickup.lon
      );
      
      // Go to the route step
      goToStep('step-route');
      
      // Set up the transport mode icon update functionality
      const transportModeElement = wrapper.querySelector('#transport-mode');
      const transportModeIcon = wrapper.querySelector('#transport-mode-icon');
      
      if (transportModeElement && transportModeIcon && !transportModeElement.dataset.listenerAdded) {
        // Update icon when mode changes
        transportModeElement.addEventListener('change', function() {
          // Update the icon based on selected mode
          updateTransportModeIcon(this.value);
          // Refresh the route with the new mode
          showRouteMap();
        });
        transportModeElement.dataset.listenerAdded = 'true';
      }
    }

    // Function to handle workflow cancellation
    function cancelWorkflow() {
      // Signal to Voiceflow that the workflow is cancelled
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-cancel'
          }
        });
      }
    }

    // Function to handle workflow completion
    function completeWorkflow() {
      // Prepare data to send back to Voiceflow
      const completionData = {
        selectedTour: workflowData.selectedTourName,
        userAddress: workflowData.userLocation.address,
        pickupPoint: workflowData.nearestPickup.name,
        pickupTime: workflowData.nearestPickup.time,
        pickupInstructions: workflowData.nearestPickup.instructions,
        userLat: workflowData.userLocation.lat,
        userLon: workflowData.userLocation.lng,
        pickupLat: workflowData.nearestPickup.lat,
        pickupLon: workflowData.nearestPickup.lon
      };

      // Signal to Voiceflow that the workflow is complete with the collected data
      if (window.voiceflow && window.voiceflow.chat) {
        window.voiceflow.chat.interact({
          type: 'request',
          payload: {
            type: 'directions-complete',
            data: completionData
          }
        });
      }
    }

    // Setup event listeners immediately before API loading
    setupEventListeners();

    // Initialize the workflow with robust handling
    loadGoogleMapsScript()
      .then(() => {
        console.log('Google Maps API loaded successfully');
        setupAutocomplete();
      })
      .catch(error => {
        console.error('Failed to load Google Maps API:', error);
        // Add direct script tag as a desperate fallback (no callback)
        console.log('Adding direct script tag as fallback after API load failure');
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&v=weekly`;
        script.onload = () => {
          console.log('Fallback Google Maps API loaded');
          setTimeout(() => {
            setupAutocomplete();
          }, 500);
        };
        document.head.appendChild(script);
      });
  },
};


// YRS: LIVE AGENT HANDOFF EXTENSION - VERSION 1 (17 March 2025)

// Voiceflow Live Agent Handoff Extension
export const LiveAgentHandoffExtension = {
  name: 'liveAgentHandoff',
  type: 'response',
  match: ({ trace }) => 
    trace.type === 'talk_to_agent' || 
    trace.type === 'ext_liveAgentHandoff' || 
    (trace.payload && (trace.payload.name === 'ext_liveAgentHandoff' || trace.payload.action === 'handoff')),
  
  render: async ({ trace, element, context }) => {
    console.log("🔄 Live Agent Handoff Extension triggered:", trace);
    
    // Get the conversation history and user ID
    const userId = window.voiceflow.chat.context.user.id || `user-${Date.now()}`;
    const session = window.voiceflow.chat.context.session;
    const history = window.voiceflow.chat.context.history || [];
    
    // Format the history for the handoff
    const formattedHistory = history.map(item => {
      if (item.type === 'text' && item.actor === 'user') {
        return { type: 'user', message: item.message };
      } else if ((item.type === 'text' || item.type === 'choice') && item.actor === 'assistant') {
        return { type: 'bot', message: item.message };
      } else {
        return { type: 'system', message: `${item.type} message` };
      }
    });
    
    // Add a message to the user that they're being transferred
    window.voiceflow.chat.interact({
      type: 'text',
      payload: {
        message: "You're being transferred to a live agent. Please wait a moment...",
        actor: 'assistant'
      }
    });
    
    // Get metadata from the trace if available
    const metadata = trace.payload?.metadata || {};
    
    // Send the handoff request to your agent application
    // Replace this URL with your deployed application's external handoff endpoint
    const handoffEndpoint = "http://localhost:8080/api/external-handoff";
    
    try {
      // Make the handoff request
      const response = await fetch(handoffEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId,
          history: formattedHistory,
          source: 'voiceflow-widget',
          metadata: {
            ...metadata,
            sessionId: session?.id,
            userInfo: window.voiceflow.chat.context.user || {}
          }
        })
      });
      
      // Handle the response
      if (!response.ok) {
        throw new Error(`Handoff request failed with status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log("Handoff response:", data);
      
      if (data.success) {
        // Start listening for agent responses
        startAgentResponseListener(userId, data.messageEndpoint);
        
        // Add success message
        window.voiceflow.chat.interact({
          type: 'text',
          payload: {
            message: `A live agent will assist you shortly. Your position in queue: ${data.queuePosition}. Estimated wait time: ${data.estimatedWaitTime}`,
            actor: 'assistant'
          }
        });
        
        // Show typing indicator to indicate waiting
        window.voiceflow.chat.interact({
          type: 'indicator',
          payload: { active: true }
        });
        
        // Store handoff state in session
        window.voiceflow.chat.context.session = {
          ...window.voiceflow.chat.context.session,
          handoff: {
            active: true,
            agentEndpoint: data.messageEndpoint,
            handoffId: data.handoffId
          }
        };
        
        // Continue with the Voiceflow conversation while waiting for an agent
        return { next: { type: 'continue' } };
      } else {
        throw new Error(data.error || "Handoff request failed");
      }
    } catch (error) {
      console.error("Error handling live agent handoff:", error);
      
      // Show error message to user
      window.voiceflow.chat.interact({
        type: 'text',
        payload: {
          message: "Sorry, we couldn't connect you to a live agent at this time. Please try again later.",
          actor: 'assistant'
        }
      });
      
      // Continue with fallback in Voiceflow
      return { 
        next: { path: 'handoff_failed' },
        trace: [{ 
          type: 'debug', 
          payload: { 
            message: `Handoff Error: ${error.message}` 
          } 
        }]
      };
    }
  }
};

// Helper function to start listening for agent responses
function startAgentResponseListener(userId, messageEndpoint) {
  // In a real implementation, this would use websockets
  // For demo purposes, we'll use polling
  
  const pollInterval = 3000; // 3 seconds
  let pollTimer = null;
  
  // Create a timestamp for fetching only new messages
  let lastMessageTimestamp = Date.now();
  
  const checkForAgentMessages = async () => {
    try {
      // In production, this would be your actual API endpoint
      const baseUrl = messageEndpoint.startsWith('http') 
  ? messageEndpoint 
  : `http://localhost:8080${messageEndpoint}`;
      
      const response = await fetch(`${baseUrl}?since=${lastMessageTimestamp}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.messages && data.messages.length > 0) {
          // Update timestamp
          lastMessageTimestamp = Date.now();
          
          // Display agent messages in the chat
          data.messages.forEach(msg => {
            if (msg.sender === 'agent') {
              // Stop typing indicator
              window.voiceflow.chat.interact({
                type: 'indicator',
                payload: { active: false }
              });
              
              // Show the agent message
              window.voiceflow.chat.interact({
                type: 'text',
                payload: {
                  message: msg.message,
                  actor: 'assistant',
                }
              });
            }
          });
        }
        
        // Check if handoff is still active
        if (data.handoffActive === false) {
          console.log("Handoff has ended, stopping listener");
          clearInterval(pollTimer);
          
          // Show message about returning to bot
          window.voiceflow.chat.interact({
            type: 'text',
            payload: {
              message: "The conversation with the agent has ended. You're now back with the virtual assistant.",
              actor: 'assistant'
            }
          });
          
          // Reset handoff state
          if (window.voiceflow.chat.context.session?.handoff) {
            window.voiceflow.chat.context.session.handoff.active = false;
          }
        }
      }
    } catch (error) {
      console.error("Error checking for agent messages:", error);
    }
  };
  
  // Start polling
  pollTimer = setInterval(checkForAgentMessages, pollInterval);
  
  // Store the timer ID so we can clear it later if needed
  if (window.voiceflow.chat.context.session) {
    window.voiceflow.chat.context.session.handoffPollTimer = pollTimer;
  }
  
  // Initial check
  checkForAgentMessages();
}

// Add event listener for sending messages to the agent when handoff is active
document.addEventListener('voiceflow:messageSent', function(e) {
  const session = window.voiceflow.chat.context.session;
  
  // Check if handoff is active
  if (session?.handoff?.active && session?.handoff?.agentEndpoint) {
    const message = e.detail.message;
    const userId = window.voiceflow.chat.context.user.id;
    
    // Send message to agent
    fetch(session.handoff.agentEndpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        message,
        handoffId: session.handoff.handoffId
      })
    }).catch(error => {
      console.error("Error sending message to agent:", error);
    });
  }
});

// YRS: GTH Form Extension for popover interface (02 April 2025)

export const GTH_FormExtension2 = {
  name: 'Forms',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'GTH_ext_form2' || trace.payload?.name === 'GTH_ext_form2',
  render: ({ trace, element }) => {
    // Create a container that spans the full width
    const formWrapper = document.createElement('div')
    formWrapper.style.cssText = 'width: 100% !important; margin: 0 !important; padding: 0 !important;'
    
    formWrapper.innerHTML = `
      <style>
        .gth-form-container {
          width: 100% !important;
          margin: 0 !important;
          padding: 0 !important;
        }
        
        .gth-form {
          width: 100% !important;
          padding: 16px !important;
          background-color: #f9f9f9 !important;
          border-radius: 8px !important;
          margin: 0 !important;
          box-sizing: border-box !important;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif !important;
        }
        
        .gth-form-row {
          margin-bottom: 16px !important;
          width: 100% !important;
        }
        
        .gth-form-label {
          font-size: 14px !important;
          color: #333 !important;
          margin-bottom: 6px !important;
          display: block !important;
          font-weight: 500 !important;
          text-align: left !important;
        }
        
        .gth-form-label.required:after {
          content: ' *' !important;
          color: #e74c3c !important;
        }
        
        .gth-form-input,
        .gth-form-select,
        .gth-form-textarea {
          width: 100% !important;
          border: 1px solid #ccc !important;
          padding: 10px !important;
          font-size: 14px !important;
          border-radius: 4px !important;
          background-color: white !important;
          color: #333 !important;
          box-sizing: border-box !important;
        }
        
        .gth-form-textarea {
          height: 100px !important;
          resize: vertical !important;
          min-height: 80px !important;
        }
        
        .gth-form-button {
          background-color: #587C74 !important;
          color: white !important;
          border: none !important;
          padding: 10px 20px !important;
          font-size: 16px !important;
          font-weight: 500 !important;
          border-radius: 4px !important;
          cursor: pointer !important;
          width: 100% !important;
          text-transform: none !important;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
          margin-top: 8px !important;
          transition: background-color 0.3s ease !important;
        }
        
        .gth-form-button:hover {
          background-color: #6a948b !important;
        }
        
        .gth-form-button:active {
          background-color: #476660 !important;
          transform: translateY(1px) !important;
        }
        
        .gth-form-input.invalid,
        .gth-form-select.invalid,
        .gth-form-textarea.invalid {
          border-color: #e74c3c !important;
          background-color: rgba(231, 76, 60, 0.05) !important;
        }
      </style>
      
      <div class="gth-form-container">
        <form class="gth-form">
          <div class="gth-form-row">
            <label class="gth-form-label required">First Name</label>
            <input type="text" class="gth-form-input gth-firstName" placeholder="John" required>
          </div>
          
          <div class="gth-form-row">
            <label class="gth-form-label required">Last Name</label>
            <input type="text" class="gth-form-input gth-lastName" placeholder="Doe" required>
          </div>
          
          <div class="gth-form-row">
            <label class="gth-form-label required">Contact Number</label>
            <input type="tel" class="gth-form-input gth-phone" placeholder="+123 456 7890" required>
          </div>
          
          <div class="gth-form-row">
            <label class="gth-form-label required">Email</label>
            <input type="email" class="gth-form-input gth-email" placeholder="youremail@example.com" required>
          </div>
          
          <div class="gth-form-row">
            <label class="gth-form-label required">Services</label>
            <select class="gth-form-select gth-services" required>
              <option value="" disabled selected>Select Service</option>
              <option value="Oahu Island Tours">Oahu Island Tours</option>
              <option value="Pearl Harbor Tours">Pearl Harbor Tours</option>
              <option value="Luaus Tours">Luaus Tours</option>
              <option value="Private Tours">Private Tours</option>
              <option value="General Inquiry">General Inquiry</option>
            </select>
          </div>
          
          <div class="gth-form-row">
            <label class="gth-form-label required">Message</label>
            <textarea class="gth-form-textarea gth-message" placeholder="How can we help you?" required></textarea>
          </div>
          
          <div class="gth-form-row">
            <button type="submit" class="gth-form-button">SUBMIT</button>
          </div>
        </form>
      </div>
    `

    // Get the form
    const form = formWrapper.querySelector('.gth-form')
    
    // Add submit event listener
    form.addEventListener('submit', function(event) {
      event.preventDefault()
      
      // Get all form inputs using class names instead of IDs
      const firstName = form.querySelector('.gth-firstName')
      const lastName = form.querySelector('.gth-lastName')
      const phone = form.querySelector('.gth-phone')
      const email = form.querySelector('.gth-email')
      const services = form.querySelector('.gth-services')
      const message = form.querySelector('.gth-message')
      
      // Check if all fields are valid
      let isValid = true
      
      // Array of all input elements
      const fields = [firstName, lastName, phone, email, services, message]
      
      // Remove invalid class from all fields first
      fields.forEach(field => {
        if (field) field.classList.remove('invalid')
      })
      
      // Check validity of each field
      fields.forEach(field => {
        if (field && !field.checkValidity()) {
          field.classList.add('invalid')
          isValid = false
        }
      })
      
      // If form is not valid, stop here
      if (!isValid) return
      
      // Show sending state
      const submitBtn = form.querySelector('.gth-form-button')
      submitBtn.textContent = 'SENDING...'
      submitBtn.disabled = true
      
      // Short delay to show sending state
      setTimeout(() => {
        // Submit form data to Voiceflow
        try {
          window.voiceflow.chat.interact({
            type: 'complete',
            payload: {
              firstName: firstName ? firstName.value : '',
              lastName: lastName ? lastName.value : '',
              phone: phone ? phone.value : '',
              email: email ? email.value : '',
              services: services ? services.value : '',
              message: message ? message.value : ''
            }
          })
        } catch (error) {
          console.error('Error submitting form:', error)
          // Reset button if there was an error
          submitBtn.textContent = 'SUBMIT'
          submitBtn.disabled = false
        }
      }, 300)
    })
    
    // Append the form wrapper to the element
    element.appendChild(formWrapper)
  }
}

// YRS: MainMenuButton Extension (03 April 2025)

export const MainMenuButtonExtension = {
  name: 'MainMenuButton',
  type: 'response',
  match: ({ trace }) => {
    // This is a very simple extension that just identifies itself to Voiceflow
    return trace.type === 'ext_mainMenuButton' || trace.payload?.name === 'ext_mainMenuButton';
  },
  render: ({ trace, element }) => {
    console.log('MainMenuButtonExtension loaded successfully');
    
    // Nothing to render - our standalone script will handle the UI
    // Just complete the extension immediately
    setTimeout(() => {
      window.voiceflow.chat.interact({ type: 'complete' });
    }, 100);
  }
};

// YRS: N8N Custom Form Webhook Demo (11 April 2025)

export const RomAIxWebhookExtension1 = {
  name: 'RomAIxWebhookForm',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'romaix_webhook_form1' || trace.payload?.name === 'romaix_webhook_form1',
  render: ({ trace, element }) => {
    // Create a container that spans the full width
    const formWrapper = document.createElement('div')
    formWrapper.style.cssText = 'width: 100% !important; margin: 0 !important; padding: 0 !important;'
    
    formWrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap');
        
        .romaix-form-container {
          width: 100% !important;
          margin: 0 !important;
          padding: 0 !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form {
          width: 100% !important;
          padding: 0 !important;
          margin: 0 !important;
          box-sizing: border-box !important;
          border-radius: 10px !important;
          overflow: hidden !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
          background-color: white !important;
          position: relative !important;
        }
        
        .romaix-form-header {
          width: 100% !important;
          padding: 12px 16px !important;
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          font-weight: 700 !important;
          font-size: 18px !important;
          line-height: 1.95em !important;
          text-align: center !important;
        }
        
        .romaix-form-content {
          padding: 16px !important;
        }
        
        .romaix-logo-container {
          display: flex !important;
          justify-content: center !important;
          align-items: center !important;
          gap: 16px !important;
          margin-bottom: 16px !important;
        }
        
        .romaix-logo {
          width: 40px !important;
          height: 40px !important;
          border-radius: 6px !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          overflow: hidden !important;
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          font-weight: bold !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
        }
        
        .n8n-logo {
          width: 40px !important;
          height: 40px !important;
          border-radius: 6px !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          background-color: black !important;
          color: white !important;
          font-weight: bold !important;
          font-family: monospace !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
        }
        
        .romaix-form-row {
          margin-bottom: 14px !important;
          width: 100% !important;
        }
        
        .romaix-form-label {
          font-size: 14px !important;
          color: #333 !important;
          margin-bottom: 6px !important;
          display: block !important;
          font-weight: 500 !important;
          text-align: left !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form-label.required:after {
          content: ' *' !important;
          color: #e74c3c !important;
        }
        
        .romaix-form-input,
        .romaix-form-select {
          width: 100% !important;
          border: 1px solid #e0e0e0 !important;
          padding: 10px 12px !important;
          font-size: 14px !important;
          border-radius: 8px !important;
          background-color: white !important;
          color: #333 !important;
          box-sizing: border-box !important;
          font-family: 'Open Sans', sans-serif !important;
          transition: border-color 0.2s !important;
        }
        
        .romaix-form-input:focus,
        .romaix-form-select:focus {
          outline: none !important;
          border-color: #587C74 !important;
        }
        
        .romaix-form-button {
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          border: none !important;
          padding: 12px 24px !important;
          font-size: 16px !important;
          font-weight: 500 !important;
          border-radius: 50px !important;
          cursor: pointer !important;
          width: 100% !important;
          text-transform: none !important;
          box-shadow: 0px 3.14px 3.14px 0px rgba(0, 0, 0, 0.25) !important;
          transition: transform 0.2s ease !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form-button:hover {
          background: linear-gradient(to right, #263238, #4D6D66) !important;
        }
        
        .romaix-form-button:active {
          transform: translateY(1px) !important;
        }
        
        .romaix-form-input.invalid,
        .romaix-form-select.invalid {
          border-color: #e74c3c !important;
          background-color: rgba(231, 76, 60, 0.05) !important;
        }
        
        .error-message {
          color: #e74c3c !important;
          font-size: 12px !important;
          margin-top: 4px !important;
          margin-bottom: 0 !important;
          display: none !important;
        }
        
        .error-message.visible {
          display: block !important;
        }
        
        /* States */
        .romaix-form-state {
          display: none !important;
          padding: 24px !important;
          text-align: center !important;
        }
        
        .romaix-form-state.active {
          display: block !important;
        }
        
        .romaix-form-content.hidden {
          display: none !important;
        }
        
        /* Spinner */
        .spinner-container {
          display: flex !important;
          flex-direction: column !important;
          align-items: center !important;
          justify-content: center !important;
          padding: 24px 16px !important;
        }
        
        .spinner {
          width: 48px !important;
          height: 48px !important;
          border: 4px solid rgba(88, 124, 116, 0.1) !important;
          border-radius: 50% !important;
          border-top: 4px solid #587C74 !important;
          animation: spin 1s linear infinite !important;
          margin-bottom: 16px !important;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .success-icon {
          width: 48px !important;
          height: 48px !important;
          background-color: #587C74 !important;
          border-radius: 50% !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          margin-bottom: 16px !important;
          color: white !important;
          font-size: 24px !important;
        }
        
        .success-title {
          font-size: 20px !important;
          font-weight: 600 !important;
          margin-bottom: 8px !important;
          color: #333 !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .success-message {
          font-size: 14px !important;
          color: #666 !important;
          margin-bottom: 20px !important;
          font-family: 'Open Sans', sans-serif !important;
        }
      </style>
      
      <div class="romaix-form-container">
        <form class="romaix-form" id="romaix-webhook-form">
          <!-- Form Header -->
          <div class="romaix-form-header">
            N8N Webhook Demo Form
          </div>
          
          <!-- Form Content -->
          <div class="romaix-form-content" id="romaix-form-fields">
            <!-- Logos -->
            <div class="romaix-logo-container">
              <div class="romaix-logo">R</div>
              <div class="n8n-logo">n8n</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Full Name</label>
              <input type="text" class="romaix-form-input romaix-name" placeholder="John Doe" required>
              <div class="error-message" data-for="name">Name is required</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Email Address</label>
              <input type="email" class="romaix-form-input romaix-email" placeholder="youremail@example.com" required>
              <div class="error-message" data-for="email">Please enter a valid email address</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Company/Organization</label>
              <input type="text" class="romaix-form-input romaix-company" placeholder="Your company" required>
              <div class="error-message" data-for="company">Company name is required</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Service Type</label>
              <select class="romaix-form-select romaix-service" required>
                <option value="" disabled selected>Select service type</option>
                <option value="chatbot">AI Chatbot Development</option>
                <option value="automation">Workflow Automation</option>
                <option value="integration">API Integration</option>
                <option value="custom">Custom AI Solution</option>
              </select>
              <div class="error-message" data-for="service">Please select a service type</div>
            </div>
            
            <div class="romaix-form-row">
              <button type="submit" class="romaix-form-button" id="romaix-submit-btn">Trigger Webhook</button>
            </div>
          </div>
          
          <!-- Loading State -->
          <div class="romaix-form-state" id="romaix-loading-state">
            <div class="spinner-container">
              <div class="spinner"></div>
              <div class="success-title">Sending Webhook to N8N</div>
              <div class="success-message">Waiting for webhook response...</div>
            </div>
          </div>
          
          <!-- Success State -->
          <div class="romaix-form-state" id="romaix-success-state">
            <div class="spinner-container">
              <div class="success-icon">✓</div>
              <div class="success-title">Webhook Response Received!</div>
              <div class="success-message">The N8N workflow has processed your request successfully.</div>
              <button type="button" class="romaix-form-button" id="romaix-reset-btn">Try Another Webhook</button>
            </div>
          </div>
        </form>
      </div>
    `

    // Get the form
    const form = formWrapper.querySelector('#romaix-webhook-form')
    
    // Find the states
    const fieldsContainer = form.querySelector('#romaix-form-fields')
    const loadingState = form.querySelector('#romaix-loading-state')
    const successState = form.querySelector('#romaix-success-state')
    
    // Find the form elements
    const nameInput = form.querySelector('.romaix-name')
    const emailInput = form.querySelector('.romaix-email')
    const companyInput = form.querySelector('.romaix-company')
    const serviceSelect = form.querySelector('.romaix-service')
    const submitBtn = form.querySelector('#romaix-submit-btn')
    const resetBtn = form.querySelector('#romaix-reset-btn')
    
    // Helper to show error message
    const showError = (field, message) => {
      const input = form.querySelector(`.romaix-${field}`)
      if (input) {
        input.classList.add('invalid')
        const errorEl = form.querySelector(`.error-message[data-for="${field}"]`)
        if (errorEl) {
          errorEl.textContent = message
          errorEl.classList.add('visible')
        }
      }
    }
    
    // Helper to clear error
    const clearError = (field) => {
      const input = form.querySelector(`.romaix-${field}`)
      if (input) {
        input.classList.remove('invalid')
        const errorEl = form.querySelector(`.error-message[data-for="${field}"]`)
        if (errorEl) {
          errorEl.classList.remove('visible')
        }
      }
    }
    
    // Helper to check email validity
    const isEmailValid = (email) => {
      return /\S+@\S+\.\S+/.test(email)
    }
    
    // Function to show a specific state
    const showState = (state) => {
      // Hide all states
      fieldsContainer.classList.add('hidden')
      loadingState.classList.remove('active')
      successState.classList.remove('active')
      
      // Show the requested state
      if (state === 'form') {
        fieldsContainer.classList.remove('hidden')
      } else if (state === 'loading') {
        loadingState.classList.add('active')
      } else if (state === 'success') {
        successState.classList.add('active')
      }
    }
    
    // Add input event listeners to clear errors on type
    nameInput.addEventListener('input', () => clearError('name'))
    emailInput.addEventListener('input', () => clearError('email'))
    companyInput.addEventListener('input', () => clearError('company'))
    serviceSelect.addEventListener('change', () => clearError('service'))
    
    // Add submit event listener
    form.addEventListener('submit', function(event) {
      event.preventDefault()
      
      // Reset all errors
      clearError('name')
      clearError('email')
      clearError('company')
      clearError('service')
      
      // Validate inputs
      let isValid = true
      
      if (!nameInput.value.trim()) {
        showError('name', 'Name is required')
        isValid = false
      }
      
      if (!emailInput.value.trim()) {
        showError('email', 'Email is required')
        isValid = false
      } else if (!isEmailValid(emailInput.value.trim())) {
        showError('email', 'Please enter a valid email address')
        isValid = false
      }
      
      if (!companyInput.value.trim()) {
        showError('company', 'Company name is required')
        isValid = false
      }
      
      if (!serviceSelect.value) {
        showError('service', 'Please select a service type')
        isValid = false
      }
      
      // If form is valid, submit
      if (isValid) {
        // Show loading state
        showState('loading')
        
        // Gather form data
        const formData = {
          name: nameInput.value.trim(),
          email: emailInput.value.trim(),
          company: companyInput.value.trim(),
          serviceType: serviceSelect.value
        }
        
        console.log("Sending webhook to N8N:", formData)
        
        // Simulate webhook call
        setTimeout(() => {
          // In a real implementation, you would send this data to your webhook endpoint
          
          // Submit form data to Voiceflow
          try {
            window.voiceflow.chat.interact({
              type: 'complete',
              payload: formData
            })
          } catch (error) {
            console.error('Error submitting webhook form:', error)
          }
          
          // Show success state
          showState('success')
        }, 3000)
      }
    })
    
    // Add reset button event listener
    resetBtn.addEventListener('click', function() {
      // Reset form fields
      nameInput.value = ''
      emailInput.value = ''
      companyInput.value = ''
      serviceSelect.value = ''
      
      // Show form state
      showState('form')
    })
    
    // Append the form wrapper to the element
    element.appendChild(formWrapper)
  }
}

// YRS: N8N Form Extension Webook Version 2 (11 April 2025)

export const RomAIxWebhookExtension2 = {
  name: 'RomAIxWebhookForm',
  type: 'response',
  match: ({ trace }) =>
    trace.type === 'romaix_webhook_form2' || trace.payload?.name === 'romaix_webhook_form2',
  render: ({ trace, element }) => {
    // Create a container that spans the full width
    const formWrapper = document.createElement('div')
    formWrapper.style.cssText = 'width: 100% !important; margin: 0 !important; padding: 0 !important;'
    
    formWrapper.innerHTML = `
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap');
        
        .romaix-form-container {
          width: 100% !important;
          margin: 0 !important;
          padding: 0 !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form {
          width: 100% !important;
          padding: 0 !important;
          margin: 0 !important;
          box-sizing: border-box !important;
          border-radius: 10px !important;
          overflow: hidden !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
          background-color: white !important;
          position: relative !important;
        }
        
        .romaix-form-header {
          width: 100% !important;
          padding: 12px 16px !important;
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          font-weight: 700 !important;
          font-size: 18px !important;
          line-height: 1.95em !important;
          text-align: center !important;
        }
        
        .romaix-form-content {
          padding: 16px !important;
        }
        
        .romaix-logo-container {
          display: flex !important;
          justify-content: center !important;
          align-items: center !important;
          gap: 16px !important;
          margin-bottom: 16px !important;
        }
        
        .romaix-logo {
          width: 40px !important;
          height: 40px !important;
          border-radius: 6px !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          overflow: hidden !important;
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          font-weight: bold !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
        }
        
        .n8n-logo {
          width: 40px !important;
          height: 40px !important;
          border-radius: 6px !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          background-color: black !important;
          color: white !important;
          font-weight: bold !important;
          font-family: monospace !important;
          box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25) !important;
        }
        
        .romaix-form-row {
          margin-bottom: 14px !important;
          width: 100% !important;
        }
        
        .romaix-form-label {
          font-size: 14px !important;
          color: #333 !important;
          margin-bottom: 6px !important;
          display: block !important;
          font-weight: 500 !important;
          text-align: left !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form-label.required:after {
          content: ' *' !important;
          color: #e74c3c !important;
        }
        
        .romaix-form-input,
        .romaix-form-select {
          width: 100% !important;
          border: 1px solid #e0e0e0 !important;
          padding: 10px 12px !important;
          font-size: 14px !important;
          border-radius: 8px !important;
          background-color: white !important;
          color: #333 !important;
          box-sizing: border-box !important;
          font-family: 'Open Sans', sans-serif !important;
          transition: border-color 0.2s !important;
        }
        
        .romaix-form-input:focus,
        .romaix-form-select:focus {
          outline: none !important;
          border-color: #587C74 !important;
        }
        
        .romaix-form-button {
          background: linear-gradient(to right, #2F3E46, #587C74) !important;
          color: white !important;
          border: none !important;
          padding: 12px 24px !important;
          font-size: 16px !important;
          font-weight: 500 !important;
          border-radius: 50px !important;
          cursor: pointer !important;
          width: 100% !important;
          text-transform: none !important;
          box-shadow: 0px 3.14px 3.14px 0px rgba(0, 0, 0, 0.25) !important;
          transition: transform 0.2s ease !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .romaix-form-button:hover {
          background: linear-gradient(to right, #263238, #4D6D66) !important;
        }
        
        .romaix-form-button:active {
          transform: translateY(1px) !important;
        }
        
        .romaix-form-input.invalid,
        .romaix-form-select.invalid {
          border-color: #e74c3c !important;
          background-color: rgba(231, 76, 60, 0.05) !important;
        }
        
        .error-message {
          color: #e74c3c !important;
          font-size: 12px !important;
          margin-top: 4px !important;
          margin-bottom: 0 !important;
          display: none !important;
        }
        
        .error-message.visible {
          display: block !important;
        }
        
        /* States */
        .romaix-form-state {
          display: none !important;
          padding: 24px !important;
          text-align: center !important;
        }
        
        .romaix-form-state.active {
          display: block !important;
        }
        
        .romaix-form-content.hidden {
          display: none !important;
        }
        
        /* Spinner */
        .spinner-container {
          display: flex !important;
          flex-direction: column !important;
          align-items: center !important;
          justify-content: center !important;
          padding: 24px 16px !important;
        }
        
        .spinner {
          width: 48px !important;
          height: 48px !important;
          border: 4px solid rgba(88, 124, 116, 0.1) !important;
          border-radius: 50% !important;
          border-top: 4px solid #587C74 !important;
          animation: spin 1s linear infinite !important;
          margin-bottom: 16px !important;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .success-icon {
          width: 48px !important;
          height: 48px !important;
          background-color: #587C74 !important;
          border-radius: 50% !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          margin-bottom: 16px !important;
          color: white !important;
          font-size: 24px !important;
        }
        
        .success-title {
          font-size: 20px !important;
          font-weight: 600 !important;
          margin-bottom: 8px !important;
          color: #333 !important;
          font-family: 'Open Sans', sans-serif !important;
        }
        
        .success-message {
          font-size: 14px !important;
          color: #666 !important;
          margin-bottom: 20px !important;
          font-family: 'Open Sans', sans-serif !important;
        }
      </style>
      
      <div class="romaix-form-container">
        <form class="romaix-form" id="romaix-webhook-form">
          <!-- Form Header -->
          <div class="romaix-form-header">
            N8N Webhook Demo Form
          </div>
          
          <!-- Form Content -->
          <div class="romaix-form-content" id="romaix-form-fields">
            <!-- Logos -->
            <div class="romaix-logo-container">
              <div class="romaix-logo">R</div>
              <div class="n8n-logo">n8n</div>
            </div>
            
            <div class="romaix-form-row" id="execution-info" style="display:none;">
              <code id="execution-data">n8n_executionID and n8n_resumeURL will appear here</code>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Full Name</label>
              <input type="text" class="romaix-form-input romaix-name" placeholder="John Doe" required>
              <div class="error-message" data-for="name">Name is required</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Email Address</label>
              <input type="email" class="romaix-form-input romaix-email" placeholder="youremail@example.com" required>
              <div class="error-message" data-for="email">Please enter a valid email address</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Company/Organization</label>
              <input type="text" class="romaix-form-input romaix-company" placeholder="Your company" required>
              <div class="error-message" data-for="company">Company name is required</div>
            </div>
            
            <div class="romaix-form-row">
              <label class="romaix-form-label required">Service Type</label>
              <select class="romaix-form-select romaix-service" required>
                <option value="" disabled selected>Select service type</option>
                <option value="chatbot">AI Chatbot Development</option>
                <option value="automation">Workflow Automation</option>
                <option value="integration">API Integration</option>
                <option value="custom">Custom AI Solution</option>
              </select>
              <div class="error-message" data-for="service">Please select a service type</div>
            </div>
            
            <div class="romaix-form-row">
              <button type="submit" class="romaix-form-button" id="romaix-submit-btn">Trigger Webhook</button>
            </div>
          </div>
          
          <!-- Loading State -->
          <div class="romaix-form-state" id="romaix-loading-state">
            <div class="spinner-container">
              <div class="spinner"></div>
              <div class="success-title">Sending Webhook to N8N</div>
              <div class="success-message">Waiting for webhook response...</div>
            </div>
          </div>
          
          <!-- Success State -->
          <div class="romaix-form-state" id="romaix-success-state">
            <div class="spinner-container">
              <div class="success-icon">✓</div>
              <div class="success-title">Webhook Response Received!</div>
              <div class="success-message">The N8N workflow has processed your request successfully.</div>
              <button type="button" class="romaix-form-button" id="romaix-reset-btn">Try Another Webhook</button>
            </div>
          </div>
        </form>
      </div>
    `

    // Get the form
    const form = formWrapper.querySelector('#romaix-webhook-form')
    
    // Find the states
    const fieldsContainer = form.querySelector('#romaix-form-fields')
    const loadingState = form.querySelector('#romaix-loading-state')
    const successState = form.querySelector('#romaix-success-state')
    
    // Find the form elements
    const nameInput = form.querySelector('.romaix-name')
    const emailInput = form.querySelector('.romaix-email')
    const companyInput = form.querySelector('.romaix-company')
    const serviceSelect = form.querySelector('.romaix-service')
    const submitBtn = form.querySelector('#romaix-submit-btn')
    const resetBtn = form.querySelector('#romaix-reset-btn')
    const executionDataEl = form.querySelector('#execution-data')
    
    // Get execution data from window object or from Voiceflow variables
let n8n_executionID = null;
let n8n_resumeURL = null;

// Try to get data from variables passed in trace payload
if (trace && trace.payload && trace.payload.n8n_executionID && trace.payload.n8n_resumeURL) {
  n8n_executionID = trace.payload.n8n_executionID;
  n8n_resumeURL = trace.payload.n8n_resumeURL;
  console.log("Retrieved execution data from trace payload:", { n8n_executionID, n8n_resumeURL });
} 
// Try from global window object where we stored it during initialization
else if (window.romaixData && window.romaixData.n8n_executionID && window.romaixData.n8n_resumeURL) {
  n8n_executionID = window.romaixData.n8n_executionID;
  n8n_resumeURL = window.romaixData.n8n_resumeURL;
  console.log("Retrieved execution data from window object:", { n8n_executionID, n8n_resumeURL });
}
    
    // If we have execution data, display it in debug mode
    if (n8n_executionID && n8n_resumeURL) {
      executionDataEl.textContent = `n8n_executionID: ${n8n_executionID}\nn8n_resumeURL: ${n8n_resumeURL}`;
      // Uncomment the next line to show execution data during development
      // form.querySelector('#execution-info').style.display = 'block';
    }
    
    // Helper to show error message
    const showError = (field, message) => {
      const input = form.querySelector(`.romaix-${field}`)
      if (input) {
        input.classList.add('invalid')
        const errorEl = form.querySelector(`.error-message[data-for="${field}"]`)
        if (errorEl) {
          errorEl.textContent = message
          errorEl.classList.add('visible')
        }
      }
    }
    
    // Helper to clear error
    const clearError = (field) => {
      const input = form.querySelector(`.romaix-${field}`)
      if (input) {
        input.classList.remove('invalid')
        const errorEl = form.querySelector(`.error-message[data-for="${field}"]`)
        if (errorEl) {
          errorEl.classList.remove('visible')
        }
      }
    }
    
    // Helper to check email validity
    const isEmailValid = (email) => {
      return /\S+@\S+\.\S+/.test(email)
    }
    
    // Function to show a specific state
    const showState = (state) => {
      // Hide all states
      fieldsContainer.classList.add('hidden')
      loadingState.classList.remove('active')
      successState.classList.remove('active')
      
      // Show the requested state
      if (state === 'form') {
        fieldsContainer.classList.remove('hidden')
      } else if (state === 'loading') {
        loadingState.classList.add('active')
      } else if (state === 'success') {
        successState.classList.add('active')
      }
    }
    
    // Add input event listeners to clear errors on type
    nameInput.addEventListener('input', () => clearError('name'))
    emailInput.addEventListener('input', () => clearError('email'))
    companyInput.addEventListener('input', () => clearError('company'))
    serviceSelect.addEventListener('change', () => clearError('service'))
    
    // Add submit event listener
    form.addEventListener('submit', function(event) {
      event.preventDefault()
      
      // Reset all errors
      clearError('name')
      clearError('email')
      clearError('company')
      clearError('service')
      
      // Validate inputs
      let isValid = true
      
      if (!nameInput.value.trim()) {
        showError('name', 'Name is required')
        isValid = false
      }
      
      if (!emailInput.value.trim()) {
        showError('email', 'Email is required')
        isValid = false
      } else if (!isEmailValid(emailInput.value.trim())) {
        showError('email', 'Please enter a valid email address')
        isValid = false
      }
      
      if (!companyInput.value.trim()) {
        showError('company', 'Company name is required')
        isValid = false
      }
      
      if (!serviceSelect.value) {
        showError('service', 'Please select a service type')
        isValid = false
      }
      
      // If form is valid, submit
      if (isValid) {
        // Show loading state
        showState('loading')
        
        // Gather form data
        const formData = {
          name: nameInput.value.trim(),
          email: emailInput.value.trim(),
          company: companyInput.value.trim(),
          serviceType: serviceSelect.value,
          n8n_executionID: n8n_executionID,
          n8n_resumeURL: n8n_resumeURL
        }
        
        console.log("Form data to submit:", formData);
        
        // Check if we have a n8n_resumeURL to call
        if (n8n_resumeURL) {
          // Call the n8n resume webhook with the form data
          fetch(n8n_resumeURL, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`Server responded with ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log("Webhook response:", data);
            
            // Submit form data to Voiceflow
            try {
              window.voiceflow.chat.interact({
                type: 'complete',
                payload: formData
              });
            } catch (error) {
              console.error('Error submitting to Voiceflow:', error);
            }
            
            // Show success state
            showState('success');
          })
          .catch(error => {
            console.error("Error calling webhook:", error);
            
            // Still submit to Voiceflow even if the webhook fails
            try {
              window.voiceflow.chat.interact({
                type: 'complete',
                payload: formData
              });
            } catch (error) {
              console.error('Error submitting to Voiceflow:', error);
            }
            
            // Show success state anyway to not block the user
            showState('success');
          });
        } else {
          // If no n8n_resumeURL, just simulate a wait and submit to Voiceflow
          setTimeout(() => {
            try {
              window.voiceflow.chat.interact({
                type: 'complete',
                payload: formData
              });
            } catch (error) {
              console.error('Error submitting webhook form:', error);
            }
            
            showState('success');
          }, 2000);
        }
      }
    });
    
    // Add reset button event listener
    resetBtn.addEventListener('click', function() {
      // Reset form fields
      nameInput.value = ''
      emailInput.value = ''
      companyInput.value = ''
      serviceSelect.value = ''
      
      // Show form state
      showState('form')
    });
    
    // Append the form wrapper to the element
    element.appendChild(formWrapper)
  }
}